# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T19:12:37+00:00

from __future__ import annotations

from datetime import date as date_aliased
from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, EmailStr, Field, RootModel


class Action(Enum):
    create = 'create'
    read = 'read'
    update = 'update'
    destroy = 'destroy'
    move = 'move'
    login = 'login'
    failedlogin = 'failedlogin'
    copy = 'copy'
    user_create = 'user_create'
    user_update = 'user_update'
    user_destroy = 'user_destroy'
    group_create = 'group_create'
    group_update = 'group_update'
    group_destroy = 'group_destroy'
    permission_create = 'permission_create'
    permission_destroy = 'permission_destroy'
    api_key_create = 'api_key_create'
    api_key_update = 'api_key_update'
    api_key_destroy = 'api_key_destroy'


class FailureType(Enum):
    expired_trial = 'expired_trial'
    account_overdue = 'account_overdue'
    locked_out = 'locked_out'
    ip_mismatch = 'ip_mismatch'
    password_mismatch = 'password_mismatch'
    site_mismatch = 'site_mismatch'
    username_not_found = 'username_not_found'
    none = 'none'
    no_ftp_permission = 'no_ftp_permission'
    no_web_permission = 'no_web_permission'
    no_directory = 'no_directory'
    errno_enoent = 'errno_enoent'
    no_sftp_permission = 'no_sftp_permission'
    no_dav_permission = 'no_dav_permission'
    no_restapi_permission = 'no_restapi_permission'
    key_mismatch = 'key_mismatch'
    region_mismatch = 'region_mismatch'
    expired_access = 'expired_access'
    desktop_ip_mismatch = 'desktop_ip_mismatch'
    desktop_api_key_not_used_quickly_enough = 'desktop_api_key_not_used_quickly_enough'
    disabled = 'disabled'
    country_mismatch = 'country_mismatch'


class Interface(Enum):
    web = 'web'
    ftp = 'ftp'
    robot = 'robot'
    jsapi = 'jsapi'
    webdesktopapi = 'webdesktopapi'
    sftp = 'sftp'
    dav = 'dav'
    desktop = 'desktop'
    restapi = 'restapi'
    scim = 'scim'
    office = 'office'
    mobile = 'mobile'
    as2 = 'as2'
    inbound_email = 'inbound_email'
    remote = 'remote'


class ActionEntity(BaseModel):
    action: Optional[Action] = Field(
        None, description='Type of action', examples=['create']
    )
    destination: Optional[str] = Field(
        None,
        description='The destination path for this action, if applicable',
        examples=['/to_path'],
    )
    display: Optional[str] = Field(
        None,
        description='Friendly displayed output',
        examples=['Actual text of the action here.'],
    )
    failure_type: Optional[FailureType] = Field(
        None,
        description='Failure type.  If action was a user login or session failure, why did it fail?',
        examples=['none'],
    )
    id: Optional[int] = Field(None, description='Action ID', examples=[1])
    interface: Optional[Interface] = Field(
        None, description='Interface on which this action occurred.', examples=['web']
    )
    ip: Optional[str] = Field(
        None,
        description='IP Address that performed this action',
        examples=['192.283.128.182'],
    )
    path: Optional[str] = Field(None, description='Path', examples=['path'])
    source: Optional[str] = Field(
        None,
        description='The source path for this action, if applicable',
        examples=['/from_path'],
    )
    targets: Optional[List[Dict[str, Any]]] = Field(
        None, description='Targets', examples=[[]]
    )
    user_id: Optional[int] = Field(None, description='User ID', examples=[1])
    username: Optional[str] = Field(None, description='Username', examples=['user'])
    when: Optional[datetime] = Field(
        None,
        description='Action occurrence date/time',
        examples=['2000-01-01T01:00:00Z'],
    )


class ActionNotificationExportEntity(BaseModel):
    end_at: Optional[datetime] = Field(
        None,
        description='End date/time of export range.',
        examples=['2000-01-01T01:00:00Z'],
    )
    export_version: Optional[str] = Field(
        None,
        description='Version of the underlying records for the export.',
        examples=['example'],
    )
    id: Optional[int] = Field(None, description='History Export ID', examples=[1])
    query_folder: Optional[str] = Field(
        None,
        description='Return notifications that were triggered by actions in this folder.',
        examples=['MyFolder'],
    )
    query_message: Optional[str] = Field(
        None,
        description='Error message associated with the request, if any.',
        examples=['Connection Refused'],
    )
    query_path: Optional[str] = Field(
        None,
        description='Return notifications that were triggered by actions on this specific path.',
        examples=['MyFile.txt'],
    )
    query_request_method: Optional[str] = Field(
        None,
        description='The HTTP request method used by the webhook.',
        examples=['GET'],
    )
    query_request_url: Optional[str] = Field(
        None,
        description='The target webhook URL.',
        examples=['http://example.com/webhook'],
    )
    query_status: Optional[str] = Field(
        None,
        description='The HTTP status returned from the server in response to the webhook request.',
        examples=['200'],
    )
    query_success: Optional[bool] = Field(
        None,
        description='true if the webhook request succeeded (i.e. returned a 200 or 204 response status). false otherwise.',
        examples=[True],
    )
    results_url: Optional[str] = Field(
        None,
        description='If `status` is `ready`, this will be a URL where all the results can be downloaded at once as a CSV.',
        examples=['https://files.com/action_notification_results.csv'],
    )
    start_at: Optional[datetime] = Field(
        None,
        description='Start date/time of export range.',
        examples=['2000-01-01T01:00:00Z'],
    )
    status: Optional[str] = Field(
        None,
        description='Status of export.  Valid values: `building`, `ready`, or `failed`',
        examples=['ready'],
    )


class ActionNotificationExportResultEntity(BaseModel):
    created_at: Optional[int] = Field(
        None, description='When the notification was sent.', examples=[1]
    )
    folder: Optional[str] = Field(
        None,
        description='The folder associated with the triggering action for this notification.',
        examples=['MyFolder'],
    )
    id: Optional[int] = Field(None, description='Notification ID', examples=[1])
    message: Optional[str] = Field(
        None,
        description='A message indicating the overall status of the webhook notification.',
        examples=['Success'],
    )
    path: Optional[str] = Field(
        None,
        description='The path to the actual file that triggered this notification.',
        examples=['MyFolder/MyFile.txt'],
    )
    request_headers: Optional[str] = Field(
        None,
        description='A JSON-encoded string with headers that were sent with the webhook.',
        examples=['{"User-Agent":"Files.com Webhook"}'],
    )
    request_method: Optional[str] = Field(
        None, description='The HTTP verb used to perform the webhook.', examples=['GET']
    )
    request_url: Optional[str] = Field(
        None,
        description='The webhook request URL.',
        examples=['www.example.com/webhook_receiver'],
    )
    status: Optional[int] = Field(
        None,
        description='HTTP status code returned in the webhook response.',
        examples=[200],
    )
    success: Optional[bool] = Field(
        None,
        description='`true` if the webhook succeeded by receiving a 200 or 204 response.',
        examples=[True],
    )


class PermissionSet(Enum):
    none = 'none'
    full = 'full'
    desktop_app = 'desktop_app'
    sync_app = 'sync_app'
    office_integration = 'office_integration'
    mobile_app = 'mobile_app'


class ApiKeyEntity(BaseModel):
    created_at: Optional[datetime] = Field(
        None,
        description='Time which API Key was created',
        examples=['2000-01-01T01:00:00Z'],
    )
    description: Optional[str] = Field(
        None, description='User-supplied description of API key.', examples=['example']
    )
    descriptive_label: Optional[str] = Field(
        None,
        description='Unique label that describes this API key.  Useful for external systems where you may have API keys from multiple accounts and want a human-readable label for each key.',
        examples=['Site-wide API key for https://site.files.com/ (key ID #1)'],
    )
    expires_at: Optional[datetime] = Field(
        None, description='API Key expiration date', examples=['2000-01-01T01:00:00Z']
    )
    id: Optional[int] = Field(None, description='API Key ID', examples=[1])
    key: Optional[str] = Field(
        None, description='API Key actual key string', examples=['[key]']
    )
    last_use_at: Optional[datetime] = Field(
        None,
        description="API Key last used - note this value is only updated once per 3 hour period, so the 'actual' time of last use may be up to 3 hours later than this timestamp.",
        examples=['2000-01-01T01:00:00Z'],
    )
    name: Optional[str] = Field(
        None,
        description='Internal name for the API Key.  For your use.',
        examples=['My Main API Key'],
    )
    path: Optional[str] = Field(
        None,
        description='Folder path restriction for this api key.',
        examples=['shared/docs'],
    )
    permission_set: Optional[PermissionSet] = Field(
        None,
        description='Permissions for this API Key.  Keys with the `desktop_app` permission set only have the ability to do the functions provided in our Desktop App (File and Share Link operations).  Additional permission sets may become available in the future, such as for a Site Admin to give a key with no administrator privileges.  If you have ideas for permission sets, please let us know.',
        examples=['full'],
    )
    platform: Optional[str] = Field(
        None,
        description='If this API key represents a Desktop app, what platform was it created on?',
        examples=['win32'],
    )
    url: Optional[str] = Field(
        None, description='URL for API host.', examples=['example']
    )
    user_id: Optional[int] = Field(
        None,
        description='User ID for the owner of this API Key.  May be blank for Site-wide API Keys.',
        examples=[1],
    )


class AppType(Enum):
    sdk = 'sdk'
    sso = 'sso'
    remote_server = 'remote_server'
    folder_behavior = 'folder_behavior'
    client_app = 'client_app'
    app_integration = 'app_integration'


class FolderBehaviorType(Enum):
    webhook = 'webhook'
    file_expiration = 'file_expiration'
    auto_encrypt = 'auto_encrypt'
    lock_subfolders = 'lock_subfolders'
    storage_region = 'storage_region'
    serve_publicly = 'serve_publicly'
    create_user_folders = 'create_user_folders'
    remote_server_sync = 'remote_server_sync'
    inbox = 'inbox'
    append_timestamp = 'append_timestamp'
    limit_file_extensions = 'limit_file_extensions'
    limit_file_regex = 'limit_file_regex'
    amazon_sns = 'amazon_sns'
    watermark = 'watermark'
    remote_server_mount = 'remote_server_mount'
    slack_webhook = 'slack_webhook'
    auto_decrypt = 'auto_decrypt'
    override_upload_filename = 'override_upload_filename'


class RemoteServerType(Enum):
    ftp = 'ftp'
    sftp = 'sftp'
    s3 = 's3'
    google_cloud_storage = 'google_cloud_storage'
    webdav = 'webdav'
    wasabi = 'wasabi'
    backblaze_b2 = 'backblaze_b2'
    one_drive = 'one_drive'
    rackspace = 'rackspace'
    box = 'box'
    dropbox = 'dropbox'
    google_drive = 'google_drive'
    azure = 'azure'
    sharepoint = 'sharepoint'
    s3_compatible = 's3_compatible'
    azure_files = 'azure_files'
    files_agent = 'files_agent'
    filebase = 'filebase'


class SsoStrategyType(Enum):
    google = 'google'
    auth0 = 'auth0'
    okta = 'okta'
    atlassian = 'atlassian'
    azure = 'azure'
    box = 'box'
    dropbox = 'dropbox'
    slack = 'slack'
    field_unused_ubuntu = '_unused_ubuntu'
    onelogin = 'onelogin'
    saml = 'saml'
    idaptive = 'idaptive'
    ldap = 'ldap'
    scim = 'scim'


class AppEntity(BaseModel):
    app_type: Optional[AppType] = Field(
        None, description='The type of the App', examples=['example']
    )
    documentation_links: Optional[Dict[str, Any]] = Field(
        None,
        description='Collection of named links to documentation',
        examples=[{'Important Info': 'http://files.test/learn-more'}],
    )
    extended_description: Optional[str] = Field(
        None, description='Long form description of the App', examples=['example']
    )
    external_homepage_url: Optional[str] = Field(
        None, description='Link to external homepage', examples=['example']
    )
    featured: Optional[bool] = Field(
        None, description='Is featured on the App listing?', examples=[True]
    )
    folder_behavior_type: Optional[FolderBehaviorType] = Field(
        None,
        description='Associated Folder Behavior type, if any',
        examples=['example'],
    )
    icon_url: Optional[str] = Field(None, description='App icon', examples=['example'])
    logo_thumbnail_url: Optional[str] = Field(
        None, description='Logo thumbnail for the App', examples=['example']
    )
    logo_url: Optional[str] = Field(
        None, description='Full size logo for the App', examples=['example']
    )
    marketing_youtube_url: Optional[str] = Field(
        None, description='Marketing video page', examples=['example']
    )
    name: Optional[str] = Field(
        None, description='Name of the App', examples=['example']
    )
    remote_server_type: Optional[RemoteServerType] = Field(
        None, description='Associated Remote Server type, if any', examples=['example']
    )
    screenshot_list_urls: Optional[List[str]] = Field(
        None, description='Screenshots of the App', examples=[['example']]
    )
    short_description: Optional[str] = Field(
        None, description='Short description of the App', examples=['example']
    )
    sso_strategy_type: Optional[SsoStrategyType] = Field(
        None, description='Associated SSO Strategy type, if any', examples=['example']
    )
    tutorial_youtube_url: Optional[str] = Field(
        None, description='Tutorial video page', examples=['example']
    )


class ProcessingResult(Enum):
    not_started = 'not_started'
    unable_to_find_station = 'unable_to_find_station'
    unable_to_find_partner = 'unable_to_find_partner'
    unable_to_validate_signature = 'unable_to_validate_signature'
    decrypt_fail = 'decrypt_fail'
    file_save_fail = 'file_save_fail'
    success = 'success'


class As2IncomingMessageEntity(BaseModel):
    activity_log: Optional[str] = Field(
        None, description='JSON Structure of the activity log.', examples=['example']
    )
    as2_from: Optional[str] = Field(
        None, description='AS2 FROM header of message', examples=['example']
    )
    as2_partner_id: Optional[int] = Field(
        None,
        description='Id of the AS2 Partner associated with this message.',
        examples=[1],
    )
    as2_station_id: Optional[int] = Field(
        None,
        description='Id of the AS2 Station associated with this message.',
        examples=[1],
    )
    as2_to: Optional[str] = Field(
        None, description='AS2 TO header of message', examples=['example']
    )
    attachment_filename: Optional[str] = Field(
        None, description='Filename of the file being received.', examples=['example']
    )
    body_size: Optional[str] = Field(
        None, description='Encrypted Payload Body Size', examples=['example']
    )
    content_type: Optional[str] = Field(
        None,
        description='Content Type header of the incoming message.',
        examples=['example'],
    )
    created_at: Optional[datetime] = Field(
        None,
        description='Message creation date/time',
        examples=['2000-01-01T01:00:00Z'],
    )
    date: Optional[str] = Field(None, description='Date Header', examples=['example'])
    encrypted_uri: Optional[str] = Field(
        None,
        description='URL to download the encrypted signed smime that is to sent as AS2 body',
        examples=['example'],
    )
    hex_recipient_serial: Optional[str] = Field(
        None,
        description="Incoming Message Recipient(the Client Cert used to encrypt this message)'s serial in hex format.",
        examples=['A5:EB:C1:95:DC:D8:2B:E7'],
    )
    http_headers: Optional[Dict[str, Any]] = Field(
        None,
        description='HTTP Headers sent with this message.',
        examples=[{'key': 'example value'}],
    )
    http_response_code: Optional[str] = Field(
        None,
        description='HTTP Response Code sent for this message',
        examples=['example'],
    )
    http_response_headers: Optional[Dict[str, Any]] = Field(
        None,
        description='HTTP Headers sent for this message.',
        examples=[{'key': 'example value'}],
    )
    id: Optional[int] = Field(None, description='Id of the AS2 Partner.', examples=[1])
    ip: Optional[str] = Field(
        None, description='IP Address of the Sender', examples=['example']
    )
    mdn_response_uri: Optional[str] = Field(
        None, description='URL to download the http response body', examples=['example']
    )
    message_decrypted: Optional[bool] = Field(
        None, description='Message decrypted successfully?', examples=[True]
    )
    message_id: Optional[str] = Field(
        None, description='AS2 Message Id', examples=['example']
    )
    message_mdn_returned: Optional[bool] = Field(
        None, description='MDN returned?', examples=[True]
    )
    message_processing_success: Optional[bool] = Field(
        None, description='Message processed successfully?', examples=[True]
    )
    message_received: Optional[bool] = Field(
        None, description='Message body received?', examples=[True]
    )
    message_signature_verified: Optional[bool] = Field(
        None, description='Message signature verified?', examples=[True]
    )
    mic: Optional[str] = Field(
        None, description='AS2 Message Integrity Check', examples=['example']
    )
    mic_algo: Optional[str] = Field(
        None,
        description='AS2 Message Integrity Check Algorithm Used',
        examples=['example'],
    )
    processing_result: Optional[ProcessingResult] = Field(
        None, description='Result of processing.', examples=['example']
    )
    processing_result_description: Optional[str] = Field(
        None, description='Result of processing description.', examples=['example']
    )
    raw_uri: Optional[str] = Field(
        None,
        description='URL to download the original file contents',
        examples=['example'],
    )
    recipient_issuer: Optional[str] = Field(
        None,
        description="Incoming Message Recipient(the Client Cert used to encrypt this message)'s issuer",
        examples=['example'],
    )
    recipient_serial: Optional[str] = Field(
        None,
        description="Incoming Message Recipient(the Client Cert used to encrypt this message)'s serial",
        examples=['example'],
    )
    smime_signed_uri: Optional[str] = Field(
        None,
        description='URL to download the file contents as smime with signature',
        examples=['example'],
    )
    smime_uri: Optional[str] = Field(
        None,
        description='URL to download the file contents encoded as smime',
        examples=['example'],
    )
    subject: Optional[str] = Field(
        None, description='AS2 Subject Header', examples=['example']
    )
    uuid: Optional[str] = Field(
        None, description='UUID assigned to this message.', examples=['example']
    )


class ProcessingResult1(Enum):
    not_started = 'not_started'
    send_failed = 'send_failed'
    send_success = 'send_success'
    send_success_mdn_invalid = 'send_success_mdn_invalid'
    send_success_mic_mismatch = 'send_success_mic_mismatch'
    send_success_message_id_mismatch = 'send_success_message_id_mismatch'
    send_success_signature_mismatch = 'send_success_signature_mismatch'
    send_success_processing_failure = 'send_success_processing_failure'
    send_failed_unknown_host = 'send_failed_unknown_host'
    send_failed_bad_http_response_code = 'send_failed_bad_http_response_code'
    send_failed_ssl_error = 'send_failed_ssl_error'
    send_failed_connection_refused = 'send_failed_connection_refused'


class As2OutgoingMessageEntity(BaseModel):
    activity_log: Optional[str] = Field(
        None, description='JSON Structure of the activity log.', examples=['example']
    )
    as2_from: Optional[str] = Field(None, description='AS2 FROM', examples=['example'])
    as2_partner_id: Optional[int] = Field(
        None,
        description='Id of the AS2 Partner associated with this message.',
        examples=[1],
    )
    as2_station_id: Optional[int] = Field(
        None,
        description='Id of the AS2 Station associated with this message.',
        examples=[1],
    )
    as2_to: Optional[str] = Field(None, description='AS2 TO', examples=['example'])
    attachment_filename: Optional[str] = Field(
        None, description='Filename of the file being sent.', examples=['example']
    )
    body_size: Optional[str] = Field(
        None, description='Encrypted Payload Body Size', examples=['example']
    )
    created_at: Optional[datetime] = Field(
        None,
        description='Message creation date/time',
        examples=['2000-01-01T01:00:00Z'],
    )
    date: Optional[str] = Field(None, description='Date Header', examples=['example'])
    encrypted_uri: Optional[str] = Field(
        None,
        description='URL to download the encrypted signed smime that is to sent as AS2 body',
        examples=['example'],
    )
    http_headers: Optional[Dict[str, Any]] = Field(
        None,
        description='HTTP Headers sent with this message.',
        examples=[{'key': 'example value'}],
    )
    http_response_code: Optional[str] = Field(
        None,
        description='HTTP Response Code received for this message',
        examples=['example'],
    )
    http_response_headers: Optional[Dict[str, Any]] = Field(
        None,
        description='HTTP Headers received for this message.',
        examples=[{'key': 'example value'}],
    )
    http_transmission_duration: Optional[float] = Field(
        None, description='HTTP transmission duration in seceonds', examples=[1]
    )
    id: Optional[int] = Field(None, description='Id of the AS2 Partner.', examples=[1])
    mdn_message_id_matched: Optional[bool] = Field(
        None, description='MDN message id matched?', examples=[True]
    )
    mdn_mic_matched: Optional[bool] = Field(
        None, description='MDN MIC matched?', examples=[True]
    )
    mdn_processing_success: Optional[bool] = Field(
        None,
        description='MDN disposition indicate a successful processing?',
        examples=[True],
    )
    mdn_received: Optional[bool] = Field(
        None, description='Did the partner give a response body?', examples=[True]
    )
    mdn_response_uri: Optional[str] = Field(
        None, description='URL to download the http response body', examples=['example']
    )
    mdn_signature_verified: Optional[bool] = Field(
        None, description='MDN signature verified?', examples=[True]
    )
    mdn_valid: Optional[bool] = Field(
        None, description='Is the response in MDN format?', examples=[True]
    )
    message_id: Optional[str] = Field(
        None, description='AS2 Message Id', examples=['example']
    )
    mic: Optional[str] = Field(
        None, description='AS2 Message Integrity Check SHA1', examples=['example']
    )
    mic_sha_256: Optional[str] = Field(
        None, description='AS2 Message Integrity Check SHA256', examples=['example']
    )
    processing_result: Optional[ProcessingResult1] = Field(
        None, description='Result of processing.', examples=['example']
    )
    processing_result_description: Optional[str] = Field(
        None, description='Result of processing description.', examples=['example']
    )
    raw_uri: Optional[str] = Field(
        None,
        description='URL to download the original file contents',
        examples=['example'],
    )
    smime_signed_uri: Optional[str] = Field(
        None,
        description='URL to download the file contents as smime with signature',
        examples=['example'],
    )
    smime_uri: Optional[str] = Field(
        None,
        description='URL to download the file contents encoded as smime',
        examples=['example'],
    )
    uuid: Optional[str] = Field(
        None, description='UUID assigned to this message.', examples=['example']
    )


class ServerCertificate(Enum):
    require_match = 'require_match'
    allow_any = 'allow_any'


class As2PartnerEntity(BaseModel):
    as2_station_id: Optional[int] = Field(
        None,
        description='Id of the AS2 Station associated with this partner.',
        examples=[1],
    )
    hex_public_certificate_serial: Optional[str] = Field(
        None,
        description='Serial of public certificate used for message security in hex format.',
        examples=['A5:EB:C1:95:DC:D8:2B:E7'],
    )
    id: Optional[int] = Field(None, description='Id of the AS2 Partner.', examples=[1])
    name: Optional[str] = Field(
        None,
        description="The partner's formal AS2 name.",
        examples=['AS2 Partner Name'],
    )
    public_certificate_issuer: Optional[str] = Field(
        None,
        description='Issuer of public certificate used for message security.',
        examples=['example'],
    )
    public_certificate_md5: Optional[str] = Field(
        None,
        description='MD5 hash of public certificate used for message security.',
        examples=['example'],
    )
    public_certificate_not_after: Optional[str] = Field(
        None,
        description='Not after value of public certificate used for message security.',
        examples=['example'],
    )
    public_certificate_not_before: Optional[str] = Field(
        None,
        description='Not before value of public certificate used for message security.',
        examples=['example'],
    )
    public_certificate_serial: Optional[str] = Field(
        None,
        description='Serial of public certificate used for message security.',
        examples=['example'],
    )
    public_certificate_subject: Optional[str] = Field(
        None,
        description='Subject of public certificate used for message security.',
        examples=['example'],
    )
    server_certificate: Optional[ServerCertificate] = Field(
        None,
        description='Remote server certificate security setting',
        examples=['require_match'],
    )
    uri: Optional[str] = Field(
        None, description='Public URI for sending AS2 message to.', examples=['example']
    )


class As2StationEntity(BaseModel):
    domain: Optional[str] = Field(
        None, description="The station's AS2 domain name.", examples=['domain.test']
    )
    hex_public_certificate_serial: Optional[str] = Field(
        None,
        description='Serial of public certificate used for message security in hex format.',
        examples=['A5:EB:C1:95:DC:D8:2B:E7'],
    )
    id: Optional[int] = Field(None, description='Id of the AS2 Station.', examples=[1])
    name: Optional[str] = Field(
        None,
        description="The station's formal AS2 name.",
        examples=['AS2 Station Name'],
    )
    private_key_md5: Optional[str] = Field(
        None,
        description='MD5 hash of private key used for message security.',
        examples=['example'],
    )
    private_key_password_md5: Optional[str] = Field(
        None,
        description='MD5 hash of private key password used for message security.',
        examples=['example'],
    )
    public_certificate_issuer: Optional[str] = Field(
        None,
        description='Issuer of public certificate used for message security.',
        examples=['example'],
    )
    public_certificate_md5: Optional[str] = Field(
        None,
        description='MD5 hash of public certificate used for message security.',
        examples=['example'],
    )
    public_certificate_not_after: Optional[str] = Field(
        None,
        description='Not after value of public certificate used for message security.',
        examples=['example'],
    )
    public_certificate_not_before: Optional[str] = Field(
        None,
        description='Not before value of public certificate used for message security.',
        examples=['example'],
    )
    public_certificate_serial: Optional[str] = Field(
        None,
        description='Serial of public certificate used for message security.',
        examples=['example'],
    )
    public_certificate_subject: Optional[str] = Field(
        None,
        description='Subject of public certificate used for message security.',
        examples=['example'],
    )
    uri: Optional[str] = Field(
        None, description='Public URI for sending AS2 message to.', examples=['example']
    )


class AutoEntity(BaseModel):
    dynamic: Optional[Dict[str, Any]] = None


class Automation(Enum):
    create_folder = 'create_folder'
    request_file = 'request_file'
    request_move = 'request_move'
    copy_newest_file = 'copy_newest_file'
    delete_file = 'delete_file'
    copy_file = 'copy_file'
    move_file = 'move_file'
    as2_send = 'as2_send'
    run_sync = 'run_sync'


class Trigger(Enum):
    realtime = 'realtime'
    daily = 'daily'
    custom_schedule = 'custom_schedule'
    webhook = 'webhook'
    email = 'email'
    action = 'action'


class AutomationEntity(BaseModel):
    automation: Optional[Automation] = Field(
        None, description='Automation type', examples=['create_folder']
    )
    deleted: Optional[bool] = Field(
        None,
        description='Indicates if the automation has been deleted.',
        examples=[True],
    )
    description: Optional[str] = Field(
        None, description='Description for the this Automation.', examples=['example']
    )
    destination_replace_from: Optional[str] = Field(
        None,
        description='If set, this string in the destination path will be replaced with the value in `destination_replace_to`.',
        examples=['example'],
    )
    destination_replace_to: Optional[str] = Field(
        None,
        description='If set, this string will replace the value `destination_replace_from` in the destination filename. You can use special patterns here.',
        examples=['example'],
    )
    destinations: Optional[List[str]] = Field(
        None, description='Destination Path', examples=[['destination']]
    )
    disabled: Optional[bool] = Field(
        None, description='If true, this automation will not run.', examples=[True]
    )
    group_ids: Optional[List[int]] = Field(
        None,
        description='IDs of Groups for the Automation (i.e. who to Request File from)',
        examples=[[1, 2]],
    )
    id: Optional[int] = Field(None, description='Automation ID', examples=[1])
    interval: Optional[str] = Field(
        None,
        description='If trigger is `daily`, this specifies how often to run this automation.  One of: `day`, `week`, `week_end`, `month`, `month_end`, `quarter`, `quarter_end`, `year`, `year_end`',
        examples=['week'],
    )
    last_modified_at: Optional[datetime] = Field(
        None,
        description='Time when automation was last modified. Does not change for name or description updates.',
        examples=['2000-01-01T01:00:00Z'],
    )
    name: Optional[str] = Field(
        None, description='Name for this automation.', examples=['example']
    )
    path: Optional[str] = Field(
        None,
        description='Path on which this Automation runs.  Supports globs.',
        examples=['example'],
    )
    schedule: Optional[Dict[str, Any]] = Field(
        None,
        description='If trigger is `custom_schedule`, Custom schedule description for when the automation should be run.',
        examples=['example'],
    )
    source: Optional[str] = Field(None, description='Source Path', examples=['example'])
    sync_ids: Optional[List[int]] = Field(
        None,
        description='IDs of remote sync folder behaviors to run by this Automation',
        examples=[[1, 2]],
    )
    trigger: Optional[Trigger] = Field(
        None,
        description='How this automation is triggered to run. One of: `realtime`, `daily`, `custom_schedule`, `webhook`, `email`, or `action`.',
        examples=['realtime'],
    )
    trigger_actions: Optional[List[str]] = Field(
        None,
        description='If trigger is `action`, this is the list of action types on which to trigger the automation. Valid actions are create, read, update, destroy, move, copy',
        examples=[['create']],
    )
    user_id: Optional[int] = Field(
        None, description="User ID of the Automation's creator.", examples=[1]
    )
    user_ids: Optional[List[int]] = Field(
        None,
        description='IDs of Users for the Automation (i.e. who to Request File from)',
        examples=[[1, 2]],
    )
    value: Optional[Dict[str, Any]] = Field(
        None,
        description='A Hash of attributes specific to the automation type.',
        examples=[{'limit': '1'}],
    )
    webhook_url: Optional[str] = Field(
        None,
        description='If trigger is `webhook`, this is the URL of the webhook to trigger the Automation.',
        examples=['https://app.files.com/api/webhooks/abc123'],
    )


class Status(Enum):
    running = 'running'
    success = 'success'
    partial_failure = 'partial_failure'
    failure = 'failure'
    skipped = 'skipped'


class AutomationRunEntity(BaseModel):
    automation_id: Optional[int] = Field(
        None, description='ID of the associated Automation.', examples=[1]
    )
    completed_at: Optional[datetime] = Field(
        None,
        description='Automation run completion/failure date/time.',
        examples=['2000-01-01T01:00:00Z'],
    )
    created_at: Optional[datetime] = Field(
        None,
        description='Automation run start date/time.',
        examples=['2000-01-01T01:00:00Z'],
    )
    id: Optional[int] = Field(None, description='ID.', examples=[1])
    status: Optional[Status] = Field(
        None,
        description='The success status of the AutomationRun. One of `running`, `success`, `partial_failure`, or `failure`.',
        examples=['success'],
    )
    status_messages_url: Optional[str] = Field(
        None,
        description='Link to status messages log file.',
        examples=['https://www.example.com/log_file.txt'],
    )


class BandwidthSnapshotEntity(BaseModel):
    bytes_received: Optional[float] = Field(
        None, description='Site bandwidth report bytes received', examples=[1]
    )
    bytes_sent: Optional[float] = Field(
        None, description='Site bandwidth report bytes sent', examples=[1]
    )
    id: Optional[int] = Field(None, description='Site bandwidth ID', examples=[1])
    logged_at: Optional[datetime] = Field(
        None,
        description='Time the site bandwidth report was logged',
        examples=['2000-01-01T01:00:00Z'],
    )
    requests_get: Optional[float] = Field(
        None, description='Site bandwidth report get requests', examples=[1]
    )
    requests_other: Optional[float] = Field(
        None, description='Site bandwidth report other requests', examples=[1]
    )
    requests_put: Optional[float] = Field(
        None, description='Site bandwidth report put requests', examples=[1]
    )
    sync_bytes_received: Optional[float] = Field(
        None, description='Site sync bandwidth report bytes received', examples=[1]
    )
    sync_bytes_sent: Optional[float] = Field(
        None, description='Site sync bandwidth report bytes sent', examples=[1]
    )


class BehaviorEntity(BaseModel):
    attachment_url: Optional[str] = Field(
        None, description='URL for attached file', examples=['example']
    )
    behavior: Optional[str] = Field(
        None, description='Behavior type.', examples=['webhook']
    )
    description: Optional[str] = Field(
        None, description='Description for this behavior.', examples=['example']
    )
    id: Optional[int] = Field(None, description='Folder behavior ID', examples=[1])
    name: Optional[str] = Field(
        None, description='Name for this behavior.', examples=['example']
    )
    path: Optional[str] = Field(None, description='Folder path', examples=['example'])
    value: Optional[Dict[str, Any]] = Field(
        None,
        description='Settings for this behavior.  See the section above for an example value to provide here.  Formatting is different for each Behavior type.  May be sent as nested JSON or a single JSON-encoded string.  If using XML encoding for the API call, this data must be sent as a JSON-encoded string.',
        examples=[{'key': 'example value'}],
    )


class DownloadMethod(Enum):
    file = 'file'
    full_zip = 'full_zip'


class Permissions(Enum):
    read = 'read'
    write = 'write'
    read_write = 'read_write'
    full = 'full'
    none = 'none'
    preview_only = 'preview_only'


class BundleNotificationEntity(BaseModel):
    bundle_id: Optional[int] = Field(
        None, description='Bundle ID to notify on', examples=[1]
    )
    id: Optional[int] = Field(None, description='Bundle Notification ID', examples=[1])
    notify_on_registration: Optional[bool] = Field(
        None,
        description='Triggers bundle notification when a registration action occurs for it.',
        examples=[True],
    )
    notify_on_upload: Optional[bool] = Field(
        None,
        description='Triggers bundle notification when a upload action occurs for it.',
        examples=[True],
    )
    user_id: Optional[int] = Field(
        None, description='The id of the user to notify.', examples=[1]
    )


class BundleRecipientEntity(BaseModel):
    company: Optional[str] = Field(
        None, description="The recipient's company.", examples=['Acme Inc.']
    )
    name: Optional[str] = Field(
        None, description="The recipient's name.", examples=['John Doe']
    )
    note: Optional[str] = Field(
        None,
        description='A note sent to the recipient with the bundle.',
        examples=['Some note.'],
    )
    recipient: Optional[str] = Field(
        None,
        description="The recipient's email address.",
        examples=['john.doe@example.com'],
    )
    sent_at: Optional[datetime] = Field(
        None,
        description='When the Bundle was shared with this recipient.',
        examples=['2000-01-01T01:00:00Z'],
    )


class BundleRegistrationEntity(BaseModel):
    bundle_code: Optional[str] = Field(
        None, description='Bundle URL code', examples=['example']
    )
    bundle_id: Optional[int] = Field(
        None, description='Id of associated bundle', examples=[1]
    )
    bundle_recipient_id: Optional[int] = Field(
        None, description='Id of associated bundle recipient', examples=[1]
    )
    clickwrap_body: Optional[str] = Field(
        None,
        description='Clickwrap text that was shown to the registrant',
        examples=['example'],
    )
    code: Optional[str] = Field(
        None, description='Registration cookie code', examples=['abc123']
    )
    company: Optional[str] = Field(
        None, description='Registrant company name', examples=['Action Verb']
    )
    created_at: Optional[datetime] = Field(
        None,
        description='Registration creation date/time',
        examples=['2000-01-01T01:00:00Z'],
    )
    email: Optional[str] = Field(
        None, description='Registrant email address', examples=['john.doe@files.com']
    )
    form_field_data: Optional[Dict[str, Any]] = Field(
        None,
        description='Data for form field set with form field ids as keys and user data as values',
        examples=[{'key': 'example value'}],
    )
    form_field_set_id: Optional[int] = Field(
        None, description='Id of associated form field set', examples=[1]
    )
    inbox_code: Optional[str] = Field(
        None,
        description='InboxRegistration cookie code, if there is an associated InboxRegistration',
        examples=['abc123'],
    )
    ip: Optional[str] = Field(
        None, description='Registrant IP Address', examples=['10.1.1.1']
    )
    name: Optional[str] = Field(
        None, description='Registrant name', examples=['account']
    )


class UseWithBundles(Enum):
    none = 'none'
    available = 'available'
    require = 'require'


class UseWithInboxes(Enum):
    none = 'none'
    available = 'available'
    require = 'require'


class UseWithUsers(Enum):
    none = 'none'
    require = 'require'


class ClickwrapEntity(BaseModel):
    body: Optional[str] = Field(
        None,
        description='Body text of Clickwrap (supports Markdown formatting).',
        examples=['[Legal body text]'],
    )
    id: Optional[int] = Field(None, description='Clickwrap ID', examples=[1])
    name: Optional[str] = Field(
        None,
        description='Name of the Clickwrap agreement (used when selecting from multiple Clickwrap agreements.)',
        examples=['Example Site NDA for Files.com Use'],
    )
    use_with_bundles: Optional[UseWithBundles] = Field(
        None, description='Use this Clickwrap for Bundles?', examples=['example']
    )
    use_with_inboxes: Optional[UseWithInboxes] = Field(
        None, description='Use this Clickwrap for Inboxes?', examples=['example']
    )
    use_with_users: Optional[UseWithUsers] = Field(
        None,
        description='Use this Clickwrap for User Registrations?  Note: This only applies to User Registrations where the User is invited to your Files.com site using an E-Mail invitation process where they then set their own password.',
        examples=['example'],
    )


class DnsRecordEntity(BaseModel):
    domain: Optional[str] = Field(
        None, description='DNS record domain name', examples=['my-custom-domain.com']
    )
    id: Optional[str] = Field(
        None,
        description='Unique label for DNS record; used by Zapier and other integrations.',
        examples=['example'],
    )
    rrtype: Optional[str] = Field(
        None, description='DNS record type', examples=['CNAME']
    )
    value: Optional[str] = Field(
        None, description='DNS record value', examples=['mysite.files.com']
    )


class ErrorsEntity(BaseModel):
    fields: Optional[List[str]] = Field(
        None, description='A list of fields where errors occur', examples=[[]]
    )
    messages: Optional[List[str]] = Field(
        None, description='A list of error messages', examples=[[]]
    )


class EventType(Enum):
    ldap_sync = 'ldap_sync'
    remote_server_sync = 'remote_server_sync'
    lockout = 'lockout'
    ldap_login = 'ldap_login'
    saml_login = 'saml_login'
    client_log = 'client_log'
    pending_work = 'pending_work'


class Status1(Enum):
    success = 'success'
    failure = 'failure'
    partial_failure = 'partial_failure'
    in_progress = 'in_progress'
    skipped = 'skipped'


class ExternalEventEntity(BaseModel):
    body: Optional[str] = Field(None, description='Event body', examples=['example'])
    body_url: Optional[str] = Field(
        None, description='Link to log file.', examples=['example']
    )
    bytes_synced: Optional[int] = Field(
        None,
        description='For sync events, the total number of bytes synced.',
        examples=[1],
    )
    created_at: Optional[datetime] = Field(
        None,
        description='External event create date/time',
        examples=['2000-01-01T01:00:00Z'],
    )
    errored_files: Optional[int] = Field(
        None,
        description='For sync events, the number of files that encountered errors.',
        examples=[1],
    )
    event_type: Optional[EventType] = Field(
        None, description='Type of event being recorded.', examples=['example']
    )
    folder_behavior_id: Optional[int] = Field(
        None, description='Folder Behavior ID', examples=[1]
    )
    id: Optional[int] = Field(None, description='Event ID', examples=[1])
    remote_server_type: Optional[str] = Field(
        None, description='Associated Remote Server type, if any', examples=['example']
    )
    status: Optional[Status1] = Field(
        None, description='Status of event.', examples=['example']
    )
    successful_files: Optional[int] = Field(
        None,
        description='For sync events, the number of files handled successfully.',
        examples=[1],
    )


class FileActionEntity(BaseModel):
    file_migration_id: Optional[int] = Field(
        None,
        description='If status is pending, this is the id of the FileMigration to check for status updates.',
        examples=[1],
    )
    status: Optional[str] = Field(
        None, description='Status of file operation.', examples=['pending']
    )


class FileCommentReactionEntity(BaseModel):
    emoji: Optional[str] = Field(
        None, description='Emoji used in the reaction.', examples=['👍']
    )
    id: Optional[int] = Field(None, description='Reaction ID', examples=[1])


class Operation(Enum):
    delete = 'delete'
    move = 'move'
    copy = 'copy'
    regional_migration = 'regional_migration'


class Status2(Enum):
    pending = 'pending'
    counting = 'counting'
    processing = 'processing'
    completed = 'completed'
    processing_subfolders = 'processing_subfolders'
    finishing = 'finishing'
    creating_dest_folder = 'creating_dest_folder'
    waiting_for_other_jobs = 'waiting_for_other_jobs'
    waiting_for_all_files = 'waiting_for_all_files'
    waiting_for_pending_subfolders = 'waiting_for_pending_subfolders'
    waiting_for_all_subfolders = 'waiting_for_all_subfolders'
    failed = 'failed'
    waiting_for_enqueued_operations = 'waiting_for_enqueued_operations'
    unused = 'unused'
    processing_recursively = 'processing_recursively'
    removing_deferred_folders = 'removing_deferred_folders'


class FileMigrationEntity(BaseModel):
    dest_path: Optional[str] = Field(
        None, description='Destination path', examples=['MyFolder']
    )
    files_moved: Optional[int] = Field(
        None, description='Number of files processed', examples=[1]
    )
    files_total: Optional[int] = Field(
        None,
        description='Deprecated: used to return a count of the applicable files.  Currently returns 0 always.  On remote servers, it is not possible to reliably determine the number of affected files for every migration operation.',
        examples=[1],
    )
    id: Optional[int] = Field(None, description='File migration ID', examples=[1])
    log_url: Optional[str] = Field(
        None,
        description='Link to download the log file for this migration.',
        examples=['https://www.example.com/log_file'],
    )
    operation: Optional[Operation] = Field(
        None, description='The type of operation', examples=['move']
    )
    path: Optional[str] = Field(None, description='Source path', examples=['MyFolder'])
    region: Optional[str] = Field(None, description='Region', examples=['USA'])
    status: Optional[Status2] = Field(None, description='Status', examples=['complete'])


class FileUploadPartEntity(BaseModel):
    action: Optional[str] = Field(
        None, description='Type of upload', examples=['multipart']
    )
    ask_about_overwrites: Optional[bool] = Field(
        None,
        description='If `true`, this file exists and you may wish to ask the user for overwrite confirmation',
        examples=[True],
    )
    available_parts: Optional[int] = Field(
        None, description='Number of parts in the upload', examples=[1]
    )
    expires: Optional[str] = Field(
        None,
        description='Date/time of when this Upload part expires and the URL cannot be used any more',
        examples=['example'],
    )
    headers: Optional[Dict[str, Any]] = Field(
        None,
        description='Additional upload headers to provide as part of the upload',
        examples=[{'key': 'example value'}],
    )
    http_method: Optional[str] = Field(
        None,
        description='HTTP Method to use for uploading the part, usually `PUT`',
        examples=['PUT'],
    )
    next_partsize: Optional[int] = Field(
        None, description='Size in bytes for this part', examples=[1]
    )
    parallel_parts: Optional[bool] = Field(
        None,
        description='If `true`, multiple parts may be uploaded in parallel.  If `false`, be sure to only upload one part at a time, in order.',
        examples=[True],
    )
    parameters: Optional[Dict[str, Any]] = Field(
        None,
        description='Additional HTTP parameters to send with the upload',
        examples=[{'key': 'example value'}],
    )
    part_number: Optional[int] = Field(
        None, description='Number of this upload part', examples=[1]
    )
    partsize: Optional[int] = Field(
        None, description='Size in bytes for the next upload part', examples=[1]
    )
    path: Optional[str] = Field(None, description='New file path', examples=['path'])
    ref: Optional[str] = Field(
        None, description='Reference name for this upload part', examples=['upload-1']
    )
    send: Optional[Dict[str, Any]] = Field(
        None,
        description='Content-Type and File to send',
        examples=[{'key': 'example value'}],
    )
    upload_uri: Optional[str] = Field(
        None, description='URI to upload this part to', examples=['example']
    )


class FieldType(Enum):
    text = 'text'
    text_area = 'text_area'
    dropdown = 'dropdown'
    radio = 'radio'


class FormFieldEntity(BaseModel):
    default_option: Optional[str] = Field(
        None, description='Default option for radio and dropdown', examples=['red']
    )
    field_type: Optional[FieldType] = Field(
        None, description='Type of Field', examples=['text']
    )
    form_field_set_id: Optional[int] = Field(
        None, description='Form field set id', examples=[1]
    )
    help_text: Optional[str] = Field(
        None, description='Help text to be displayed', examples=['Help Text']
    )
    id: Optional[int] = Field(None, description='Form field id', examples=[1])
    label: Optional[str] = Field(
        None, description='Label to be displayed', examples=['Sample Label']
    )
    options_for_select: Optional[List[str]] = Field(
        None,
        description='Options to display for radio and dropdown',
        examples=[['red', 'green', 'blue']],
    )
    required: Optional[bool] = Field(
        None, description='Is this a required field?', examples=[True]
    )


class FormFieldSetEntity(BaseModel):
    form_fields: Optional[List[FormFieldEntity]] = Field(
        None, description='Associated form fields', examples=[[None]]
    )
    form_layout: Optional[List[int]] = Field(
        None, description='Layout of the form', examples=[[1, 2, 3, 4]]
    )
    id: Optional[int] = Field(None, description='Form field set id', examples=[1])
    skip_company: Optional[bool] = Field(
        None,
        description='Any associated InboxRegistrations or BundleRegistrations can be saved without providing company',
        examples=[True],
    )
    skip_email: Optional[bool] = Field(
        None,
        description='Any associated InboxRegistrations or BundleRegistrations can be saved without providing email',
        examples=[True],
    )
    skip_name: Optional[bool] = Field(
        None,
        description='Any associated InboxRegistrations or BundleRegistrations can be saved without providing name',
        examples=[True],
    )
    title: Optional[str] = Field(
        None, description='Title to be displayed', examples=['Sample Form Title']
    )


class GroupEntity(BaseModel):
    admin_ids: Optional[str] = Field(
        None,
        description='Comma-delimited list of user IDs who are group administrators (separated by commas)',
        examples=['1'],
    )
    id: Optional[int] = Field(None, description='Group ID', examples=[1])
    name: Optional[str] = Field(None, description='Group name', examples=['owners'])
    notes: Optional[str] = Field(
        None, description='Notes about this group', examples=['example']
    )
    user_ids: Optional[str] = Field(
        None,
        description='Comma-delimited list of user IDs who belong to this group (separated by commas)',
        examples=['1'],
    )
    usernames: Optional[str] = Field(
        None,
        description='Comma-delimited list of usernames who belong to this group (separated by commas)',
        examples=['example'],
    )


class GroupUserEntity(BaseModel):
    admin: Optional[bool] = Field(
        None,
        description='Is this user an administrator of this group?',
        examples=[True],
    )
    group_id: Optional[int] = Field(None, description='Group ID', examples=[1])
    group_name: Optional[str] = Field(
        None, description='Group name', examples=['example']
    )
    user_id: Optional[int] = Field(None, description='User ID', examples=[1])
    usernames: Optional[List[str]] = Field(
        None,
        description='A list of usernames for users in this group',
        examples=[['user']],
    )


class HistoryExportEntity(BaseModel):
    end_at: Optional[datetime] = Field(
        None,
        description='End date/time of export range.',
        examples=['2000-01-01T01:00:00Z'],
    )
    history_version: Optional[str] = Field(
        None, description='Version of the history for the export.', examples=['example']
    )
    id: Optional[int] = Field(None, description='History Export ID', examples=[1])
    query_action: Optional[str] = Field(
        None,
        description='Filter results by this this action type. Valid values: `create`, `read`, `update`, `destroy`, `move`, `login`, `failedlogin`, `copy`, `user_create`, `user_update`, `user_destroy`, `group_create`, `group_update`, `group_destroy`, `permission_create`, `permission_destroy`, `api_key_create`, `api_key_update`, `api_key_destroy`',
        examples=['read'],
    )
    query_destination: Optional[str] = Field(
        None,
        description='Return results that are file moves with this path as destination.',
        examples=['DestFolder'],
    )
    query_failure_type: Optional[str] = Field(
        None,
        description='If searching for Histories about login failures, this parameter restricts results to failures of this specific type.  Valid values: `expired_trial`, `account_overdue`, `locked_out`, `ip_mismatch`, `password_mismatch`, `site_mismatch`, `username_not_found`, `none`, `no_ftp_permission`, `no_web_permission`, `no_directory`, `errno_enoent`, `no_sftp_permission`, `no_dav_permission`, `no_restapi_permission`, `key_mismatch`, `region_mismatch`, `expired_access`, `desktop_ip_mismatch`, `desktop_api_key_not_used_quickly_enough`, `disabled`, `country_mismatch`',
        examples=['bad_password'],
    )
    query_file_id: Optional[str] = Field(
        None,
        description='Return results that are file actions related to the file indicated by this File ID',
        examples=['1'],
    )
    query_folder: Optional[str] = Field(
        None,
        description='Return results that are file actions related to files or folders inside this folder path.',
        examples=['Folder'],
    )
    query_interface: Optional[str] = Field(
        None,
        description='Filter results by this this interface type. Valid values: `web`, `ftp`, `robot`, `jsapi`, `webdesktopapi`, `sftp`, `dav`, `desktop`, `restapi`, `scim`, `office`, `mobile`, `as2`, `inbound_email`, `remote`',
        examples=['ftp'],
    )
    query_ip: Optional[str] = Field(
        None, description='Filter results by this IP address.', examples=['127.0.0.1']
    )
    query_parent_id: Optional[str] = Field(
        None,
        description='Return results that are file actions inside the parent folder specified by this folder ID',
        examples=['1'],
    )
    query_path: Optional[str] = Field(
        None,
        description='Return results that are file actions related to this path.',
        examples=['MyFile.txt'],
    )
    query_src: Optional[str] = Field(
        None,
        description='Return results that are file moves originating from this path.',
        examples=['SrcFolder'],
    )
    query_target_id: Optional[str] = Field(
        None,
        description='If searching for Histories about specific objects (such as Users, or API Keys), this paremeter restricts results to objects that match this ID.',
        examples=['1'],
    )
    query_target_name: Optional[str] = Field(
        None,
        description='If searching for Histories about Users, Groups or other objects with names, this parameter restricts results to objects with this name/username.',
        examples=['full'],
    )
    query_target_permission: Optional[str] = Field(
        None,
        description='If searching for Histories about Permisisons, this parameter restricts results to permissions of this level.',
        examples=['full'],
    )
    query_target_permission_set: Optional[str] = Field(
        None,
        description='If searching for Histories about API keys, this parameter restricts results to API keys with this permission set.',
        examples=['desktop_app'],
    )
    query_target_platform: Optional[str] = Field(
        None,
        description='If searching for Histories about API keys, this parameter restricts results to API keys associated with this platform.',
        examples=['windows'],
    )
    query_target_user_id: Optional[str] = Field(
        None,
        description='If searching for Histories about API keys, this parameter restricts results to API keys created by/for this user ID.',
        examples=['1'],
    )
    query_target_username: Optional[str] = Field(
        None,
        description='If searching for Histories about API keys, this parameter restricts results to API keys created by/for this username.',
        examples=['jerry'],
    )
    query_user_id: Optional[str] = Field(
        None,
        description='Return results that are actions performed by the user indiciated by this User ID',
        examples=['1'],
    )
    query_username: Optional[str] = Field(
        None, description='Filter results by this username.', examples=['jerry']
    )
    results_url: Optional[str] = Field(
        None,
        description='If `status` is `ready`, this will be a URL where all the results can be downloaded at once as a CSV.',
        examples=['https://files.com/history_results.csv'],
    )
    start_at: Optional[datetime] = Field(
        None,
        description='Start date/time of export range.',
        examples=['2000-01-01T01:00:00Z'],
    )
    status: Optional[str] = Field(
        None,
        description='Status of export.  Will be: `building`, `ready`, or `failed`',
        examples=['ready'],
    )


class HistoryExportResultEntity(BaseModel):
    action: Optional[str] = Field(
        None,
        description='What action was taken. Valid values: `create`, `read`, `update`, `destroy`, `move`, `login`, `failedlogin`, `copy`, `user_create`, `user_update`, `user_destroy`, `group_create`, `group_update`, `group_destroy`, `permission_create`, `permission_destroy`, `api_key_create`, `api_key_update`, `api_key_destroy`',
        examples=['read'],
    )
    created_at: Optional[int] = Field(
        None, description='When the action happened', examples=[1]
    )
    created_at_iso8601: Optional[int] = Field(
        None, description='When the action happened, in ISO8601 format.', examples=[1]
    )
    destination: Optional[str] = Field(
        None,
        description='File moved to this destination folder',
        examples=['DestFolder'],
    )
    failure_type: Optional[str] = Field(
        None,
        description='The type of login failure, if applicable.  Valid values: `expired_trial`, `account_overdue`, `locked_out`, `ip_mismatch`, `password_mismatch`, `site_mismatch`, `username_not_found`, `none`, `no_ftp_permission`, `no_web_permission`, `no_directory`, `errno_enoent`, `no_sftp_permission`, `no_dav_permission`, `no_restapi_permission`, `key_mismatch`, `region_mismatch`, `expired_access`, `desktop_ip_mismatch`, `desktop_api_key_not_used_quickly_enough`, `disabled`, `country_mismatch`',
        examples=['bad_password'],
    )
    file_id: Optional[int] = Field(
        None, description='File ID related to the action', examples=[1]
    )
    folder: Optional[str] = Field(
        None, description='Folder in which the action occurred', examples=['Folder']
    )
    id: Optional[int] = Field(None, description='Action ID', examples=[1])
    interface: Optional[str] = Field(
        None,
        description='Inteface through which the action was taken. Valid values: `web`, `ftp`, `robot`, `jsapi`, `webdesktopapi`, `sftp`, `dav`, `desktop`, `restapi`, `scim`, `office`, `mobile`, `as2`, `inbound_email`, `remote`',
        examples=['ftp'],
    )
    ip: Optional[str] = Field(
        None, description='Client IP that performed the action', examples=['127.0.0.1']
    )
    parent_id: Optional[int] = Field(
        None, description='ID of the parent folder', examples=[1]
    )
    path: Optional[str] = Field(
        None, description='Path of the related action', examples=['MyFile.txt']
    )
    src: Optional[str] = Field(
        None, description='File move originated from this path', examples=['SrcFolder']
    )
    target_expires_at: Optional[int] = Field(
        None,
        description='If searching for Histories about API keys, this is when the API key will expire',
        examples=[1],
    )
    target_id: Optional[int] = Field(
        None,
        description='ID of the object (such as Users, or API Keys) on which the action was taken',
        examples=[1],
    )
    target_name: Optional[str] = Field(
        None,
        description='Name of the User, Group or other object with a name related to this action',
        examples=['full'],
    )
    target_permission: Optional[str] = Field(
        None, description='Permission level of the action', examples=['full']
    )
    target_permission_set: Optional[str] = Field(
        None,
        description='If searching for Histories about API keys, this represents the permission set of the associated  API key',
        examples=['desktop_app'],
    )
    target_platform: Optional[str] = Field(
        None,
        description='If searching for Histories about API keys, this is the platform on which the action was taken',
        examples=['windows'],
    )
    target_recursive: Optional[bool] = Field(
        None, description='Whether or not the action was recursive', examples=[True]
    )
    target_user_id: Optional[int] = Field(
        None,
        description='If searching for Histories about API keys, this is the User ID on which the action was taken',
        examples=[1],
    )
    target_username: Optional[str] = Field(
        None,
        description='If searching for Histories about API keys, this is the username on which the action was taken',
        examples=['jerry'],
    )
    user_id: Optional[int] = Field(None, description='User ID', examples=[1])
    username: Optional[str] = Field(
        None,
        description='Username of the user that performed the action',
        examples=['jerry'],
    )


class ImageEntity(BaseModel):
    name: Optional[str] = Field(None, description='Image name', examples=['My logo'])
    uri: Optional[str] = Field(
        None,
        description='Image URI',
        examples=['https://mysite.files.com/.../my_image.png'],
    )


class InboxRecipientEntity(BaseModel):
    company: Optional[str] = Field(
        None, description="The recipient's company.", examples=['Acme Inc.']
    )
    name: Optional[str] = Field(
        None, description="The recipient's name.", examples=['John Doe']
    )
    note: Optional[str] = Field(
        None,
        description='A note sent to the recipient with the inbox.',
        examples=['Some note.'],
    )
    recipient: Optional[str] = Field(
        None,
        description="The recipient's email address.",
        examples=['john.doe@example.com'],
    )
    sent_at: Optional[datetime] = Field(
        None,
        description='When the Inbox was shared with this recipient.',
        examples=['2000-01-01T01:00:00Z'],
    )


class InboxRegistrationEntity(BaseModel):
    clickwrap_body: Optional[str] = Field(
        None,
        description='Clickwrap text that was shown to the registrant',
        examples=['example'],
    )
    code: Optional[str] = Field(
        None, description='Registration cookie code', examples=['abc123']
    )
    company: Optional[str] = Field(
        None, description='Registrant company name', examples=['Action Verb']
    )
    created_at: Optional[datetime] = Field(
        None,
        description='Registration creation date/time',
        examples=['2000-01-01T01:00:00Z'],
    )
    email: Optional[str] = Field(
        None, description='Registrant email address', examples=['john.doe@files.com']
    )
    form_field_data: Optional[Dict[str, Any]] = Field(
        None,
        description='Data for form field set with form field ids as keys and user data as values',
        examples=[{'key': 'example value'}],
    )
    form_field_set_id: Optional[int] = Field(
        None, description='Id of associated form field set', examples=[1]
    )
    inbox_id: Optional[int] = Field(
        None, description='Id of associated inbox', examples=[1]
    )
    inbox_recipient_id: Optional[int] = Field(
        None, description='Id of associated inbox recipient', examples=[1]
    )
    inbox_title: Optional[str] = Field(
        None, description='Title of associated inbox', examples=['example']
    )
    name: Optional[str] = Field(
        None, description='Registrant name', examples=['account']
    )


class InboxUploadEntity(BaseModel):
    created_at: Optional[datetime] = Field(
        None, description='Upload date/time', examples=['2000-01-01T01:00:00Z']
    )
    inbox_registration: Optional[InboxRegistrationEntity] = None
    path: Optional[str] = Field(
        None, description='Upload path', examples=['a/b/test.txt']
    )


class Type(Enum):
    invoice = 'invoice'
    invoice_adjustment = 'invoice_adjustment'
    usage_overage = 'usage_overage'
    user_overage = 'user_overage'
    addon_subscription = 'addon_subscription'
    misc_fee = 'misc_fee'
    usage_overage_adjustment = 'usage_overage_adjustment'
    user_overage_adjustment = 'user_overage_adjustment'
    addon_subscription_adjustment = 'addon_subscription_adjustment'
    misc_fee_adjustment = 'misc_fee_adjustment'
    credit_expiration = 'credit_expiration'


class InvoiceLineItemEntity(BaseModel):
    amount: Optional[float] = Field(
        None, description='Invoice line item amount', examples=[1]
    )
    created_at: Optional[datetime] = Field(
        None,
        description='Invoice line item created at date/time',
        examples=['2000-01-01T01:00:00Z'],
    )
    description: Optional[str] = Field(
        None,
        description='Invoice line item description',
        examples=['Service from 2019-01-01 through 2019-12-31'],
    )
    plan: Optional[str] = Field(None, description='Plan name', examples=['Premier'])
    service_end_at: Optional[datetime] = Field(
        None,
        description='Invoice line item service end date/time',
        examples=['2000-01-01T01:00:00Z'],
    )
    service_start_at: Optional[datetime] = Field(
        None,
        description='Invoice line item service start date/time',
        examples=['2000-01-01T01:00:00Z'],
    )
    site: Optional[str] = Field(None, description='Site name', examples=['My site'])
    type: Optional[Type] = Field(
        None, description='Invoice line item type', examples=['invoice']
    )
    updated_at: Optional[datetime] = Field(
        None,
        description='Invoice line item updated date/time',
        examples=['2000-01-01T01:00:00Z'],
    )


class IpAddressEntity(BaseModel):
    associated_with: Optional[str] = Field(
        None,
        description='The object that this public IP address list is associated with.',
        examples=['Site'],
    )
    group_id: Optional[int] = Field(None, description='Group ID', examples=[1])
    id: Optional[str] = Field(
        None,
        description='Unique label for list; used by Zapier and other integrations.',
        examples=['Site'],
    )
    ip_addresses: Optional[List[str]] = Field(
        None, description='A list of IP addresses.', examples=[['127.0.0.1']]
    )


class LockEntity(BaseModel):
    allow_access_by_any_user: Optional[bool] = Field(
        None, description='Can lock be modified by users other than its creator?'
    )
    depth: Optional[str] = Field(
        None, description='DEPRECATED: Lock depth', examples=['infinity']
    )
    exclusive: Optional[bool] = Field(None, description='Is lock exclusive?')
    owner: Optional[str] = Field(
        None,
        description='Owner of the lock.  This can be any arbitrary string.',
        examples=['user'],
    )
    path: Optional[str] = Field(None, description='Path', examples=['locked_file'])
    recursive: Optional[bool] = Field(
        None, description='Does lock apply to subfolders?', examples=[True]
    )
    scope: Optional[str] = Field(
        None, description='DEPRECATED: Lock scope', examples=['shared']
    )
    timeout: Optional[int] = Field(
        None, description='Lock timeout in seconds', examples=[1]
    )
    token: Optional[str] = Field(
        None,
        description='Lock token.  Use to release lock.',
        examples=['17c54824e9931a4688ca032d03f6663c'],
    )
    type: Optional[str] = Field(
        None, description='DEPRECATED: Lock type', examples=['write']
    )
    user_id: Optional[int] = Field(
        None, description='Lock creator user ID', examples=[1]
    )
    username: Optional[str] = Field(
        None, description='Lock creator username', examples=['username']
    )


class MessageCommentReactionEntity(BaseModel):
    emoji: Optional[str] = Field(
        None, description='Emoji used in the reaction.', examples=['👍']
    )
    id: Optional[int] = Field(None, description='Reaction ID', examples=[1])


class MessageReactionEntity(BaseModel):
    emoji: Optional[str] = Field(
        None, description='Emoji used in the reaction.', examples=['👍']
    )
    id: Optional[int] = Field(None, description='Reaction ID', examples=[1])


class SendInterval(Enum):
    five_minutes = 'five_minutes'
    fifteen_minutes = 'fifteen_minutes'
    hourly = 'hourly'
    daily = 'daily'


class UnsubscribedReason(Enum):
    none = 'none'
    unsubscribe_link_clicked = 'unsubscribe_link_clicked'
    mail_bounced = 'mail_bounced'
    mail_marked_as_spam = 'mail_marked_as_spam'


class NotificationEntity(BaseModel):
    group_id: Optional[int] = Field(
        None, description='Notification group id', examples=[0]
    )
    group_name: Optional[str] = Field(
        None, description='Group name if applicable', examples=['example']
    )
    id: Optional[int] = Field(None, description='Notification ID', examples=[1])
    message: Optional[str] = Field(
        None,
        description='Custom message to include in notification emails.',
        examples=['custom notification email message'],
    )
    notify_on_copy: Optional[bool] = Field(
        None,
        description='Triggers notification when copying files to this path',
        examples=[True],
    )
    notify_on_delete: Optional[bool] = Field(
        None,
        description='Triggers notification when deleting files from this path',
        examples=[True],
    )
    notify_on_download: Optional[bool] = Field(
        None,
        description='Triggers notification when downloading files from this path',
        examples=[True],
    )
    notify_on_move: Optional[bool] = Field(
        None,
        description='Triggers notification when moving files to this path',
        examples=[True],
    )
    notify_on_upload: Optional[bool] = Field(
        None,
        description='Triggers notification when uploading new files to this path',
        examples=[True],
    )
    notify_user_actions: Optional[bool] = Field(
        None,
        description='Trigger notification on notification user actions?',
        examples=[True],
    )
    path: Optional[str] = Field(
        None, description='Folder path to notify on', examples=['path']
    )
    recursive: Optional[bool] = Field(
        None,
        description='Enable notifications for each subfolder in this path',
        examples=[True],
    )
    send_interval: Optional[SendInterval] = Field(
        None,
        description='The time interval that notifications are aggregated to',
        examples=['fifteen_minutes'],
    )
    suppressed_email: Optional[bool] = Field(
        None,
        description='If true, it means that the recipient at this user\'s email address has manually unsubscribed from all emails, or had their email "hard bounce", which means that we are unable to send mail to this user\'s current email address. Notifications will resume if the user changes their email address.',
        examples=[True],
    )
    trigger_by_share_recipients: Optional[bool] = Field(
        None,
        description='Notify when actions are performed by a share recipient?',
        examples=[True],
    )
    triggering_filenames: Optional[List[str]] = Field(
        None,
        description='Array of filenames (possibly with wildcards) to match for action path',
        examples=[['*.jpg', 'notify_file.txt']],
    )
    triggering_group_ids: Optional[List[int]] = Field(
        None,
        description='Only notify on actions made by a member of one of the specified groups',
        examples=[[1]],
    )
    triggering_user_ids: Optional[List[int]] = Field(
        None,
        description='Only notify on actions made one of the specified users',
        examples=[[1]],
    )
    unsubscribed: Optional[bool] = Field(
        None,
        description='Is the user unsubscribed from this notification?',
        examples=[True],
    )
    unsubscribed_reason: Optional[UnsubscribedReason] = Field(
        None, description='The reason that the user unsubscribed', examples=['example']
    )
    user_id: Optional[int] = Field(
        None, description='Notification user ID', examples=[1]
    )
    username: Optional[str] = Field(
        None, description='Notification username', examples=['User']
    )


class PaymentLineItemEntity(BaseModel):
    amount: Optional[float] = Field(
        None, description='Payment line item amount', examples=[1]
    )
    created_at: Optional[datetime] = Field(
        None,
        description='Payment line item created at date/time',
        examples=['2000-01-01T01:00:00Z'],
    )
    invoice_id: Optional[int] = Field(None, description='Invoice ID', examples=[1])
    payment_id: Optional[int] = Field(None, description='Payment ID', examples=[1])


class Permission(Enum):
    full = 'full'
    readonly = 'readonly'
    writeonly = 'writeonly'
    list = 'list'
    history = 'history'
    admin = 'admin'
    bundle = 'bundle'


class PermissionEntity(BaseModel):
    group_id: Optional[int] = Field(None, description='Group ID', examples=[0])
    group_name: Optional[str] = Field(
        None, description='Group name if applicable', examples=['example']
    )
    id: Optional[int] = Field(None, description='Permission ID', examples=[1])
    path: Optional[str] = Field(None, description='Folder path', examples=['example'])
    permission: Optional[Permission] = Field(
        None, description='Permission type', examples=['full']
    )
    recursive: Optional[bool] = Field(
        None, description='Does this permission apply to subfolders?', examples=[True]
    )
    user_id: Optional[int] = Field(None, description='User ID', examples=[1])
    username: Optional[str] = Field(
        None, description="User's username", examples=['Sser']
    )


class PreviewEntity(BaseModel):
    download_uri: Optional[str] = Field(
        None,
        description='Link to download preview',
        examples=['https://mysite.files.com/...'],
    )
    id: Optional[int] = Field(None, description='Preview ID', examples=[1])
    size: Optional[str] = Field(None, description='Preview size', examples=['large'])
    status: Optional[str] = Field(
        None,
        description='Preview status.  Can be invalid, not_generated, generating, complete, or file_too_large',
        examples=['complete'],
    )
    type: Optional[str] = Field(
        None,
        description='Preview type. Can be image, pdf, pdf_native, video, or audio',
        examples=['image'],
    )


class PriorityEntity(BaseModel):
    color: Optional[str] = Field(
        None, description='The priority color', examples=['pink']
    )
    path: Optional[str] = Field(
        None,
        description='The path corresponding to the priority color',
        examples=['foo/bar'],
    )


class GlobalAccess(Enum):
    none = 'none'
    anyone_with_read = 'anyone_with_read'
    anyone_with_full = 'anyone_with_full'


class ProjectEntity(BaseModel):
    global_access: Optional[GlobalAccess] = Field(
        None, description='Global access settings', examples=['none']
    )
    id: Optional[int] = Field(None, description='Project ID', examples=[1])


class PublicIpAddressEntity(BaseModel):
    ftp_enabled: Optional[bool] = Field(None, examples=[True])
    ip_address: Optional[str] = Field(
        None, description='The public IP address.', examples=['1.1.1.1']
    )
    server_name: Optional[str] = Field(
        None, description='The name of the frontend server.', examples=['server-1']
    )
    sftp_enabled: Optional[bool] = Field(None, examples=[True])


class PublicKeyEntity(BaseModel):
    created_at: Optional[datetime] = Field(
        None,
        description='Public key created at date/time',
        examples=['2000-01-01T01:00:00Z'],
    )
    fingerprint: Optional[str] = Field(
        None,
        description='Public key fingerprint',
        examples=['43:51:43:a1:b5:fc:8b:b7:0a:3a:a9:b1:0f:66:73:a8'],
    )
    id: Optional[int] = Field(None, description='Public key ID', examples=[1])
    title: Optional[str] = Field(
        None, description='Public key title', examples=['My public key']
    )


class RemoteBandwidthSnapshotEntity(BaseModel):
    id: Optional[int] = Field(None, description='Site bandwidth ID', examples=[1])
    logged_at: Optional[datetime] = Field(
        None,
        description='Time the site bandwidth report was logged',
        examples=['2000-01-01T01:00:00Z'],
    )
    remote_server_id: Optional[int] = Field(
        None, description='ID of related Remote Server', examples=[1]
    )
    sync_bytes_received: Optional[float] = Field(
        None, description='Site sync bandwidth report bytes received', examples=[1]
    )
    sync_bytes_sent: Optional[float] = Field(
        None, description='Site sync bandwidth report bytes sent', examples=[1]
    )


class RemoteServerConfigurationFileEntity(BaseModel):
    api_token: Optional[str] = Field(
        None, description='Files Agent API Token', examples=['example']
    )
    config_version: Optional[str] = Field(
        None, description='agent config version', examples=['example']
    )
    hostname: Optional[str] = Field(None, examples=['example'])
    id: Optional[int] = Field(None, description='Agent ID', examples=[1])
    permission_set: Optional[str] = Field(None, description='', examples=['full'])
    port: Optional[int] = Field(
        None, description='Incoming port for files agent connections', examples=[1]
    )
    private_key: Optional[str] = Field(
        None, description='private key', examples=['example']
    )
    public_key: Optional[str] = Field(
        None, description='public key', examples=['example']
    )
    root: Optional[str] = Field(
        None, description='Agent local root path', examples=['example']
    )
    server_host_key: Optional[str] = Field(None, examples=['example'])
    status: Optional[str] = Field(
        None, description='either running or shutdown', examples=['example']
    )
    subdomain: Optional[str] = Field(None, examples=['example'])


class AuthStatus(Enum):
    not_applicable = 'not_applicable'
    in_setup = 'in_setup'
    complete = 'complete'
    reauthenticate = 'reauthenticate'


class FilesAgentPermissionSet(Enum):
    read_write = 'read_write'
    read_only = 'read_only'
    write_only = 'write_only'


class OneDriveAccountType(Enum):
    personal = 'personal'
    business_other = 'business_other'


class ServerType(Enum):
    ftp = 'ftp'
    sftp = 'sftp'
    s3 = 's3'
    google_cloud_storage = 'google_cloud_storage'
    webdav = 'webdav'
    wasabi = 'wasabi'
    backblaze_b2 = 'backblaze_b2'
    one_drive = 'one_drive'
    rackspace = 'rackspace'
    box = 'box'
    dropbox = 'dropbox'
    google_drive = 'google_drive'
    azure = 'azure'
    sharepoint = 'sharepoint'
    s3_compatible = 's3_compatible'
    azure_files = 'azure_files'
    files_agent = 'files_agent'
    filebase = 'filebase'


class Ssl(Enum):
    if_available = 'if_available'
    require = 'require'
    require_implicit = 'require_implicit'
    never = 'never'


class RemoteServerEntity(BaseModel):
    auth_account_name: Optional[str] = Field(
        None,
        description='Describes the authorized account',
        examples=['me@example.com'],
    )
    auth_setup_link: Optional[str] = Field(
        None,
        description='Returns link to login with an Oauth provider',
        examples=['auth/:provider'],
    )
    auth_status: Optional[AuthStatus] = Field(
        None, description='Either `in_setup` or `complete`', examples=['in_setup']
    )
    authentication_method: Optional[str] = Field(
        None, description='Type of authentication method', examples=['password']
    )
    aws_access_key: Optional[str] = Field(
        None, description='AWS Access Key.', examples=['example']
    )
    azure_blob_storage_account: Optional[str] = Field(
        None,
        description='Azure Blob Storage Account name',
        examples=['storage-account-name'],
    )
    azure_blob_storage_container: Optional[str] = Field(
        None,
        description='Azure Blob Storage Container name',
        examples=['container-name'],
    )
    azure_blob_storage_sas_token: Optional[str] = Field(
        None,
        description='Shared Access Signature (SAS) token',
        examples=['storage-sas-token'],
    )
    azure_files_storage_account: Optional[str] = Field(
        None,
        description='Azure File Storage Account name',
        examples=['storage-account-name'],
    )
    azure_files_storage_sas_token: Optional[str] = Field(
        None,
        description='Shared Access Signature (SAS) token',
        examples=['storage-sas-token'],
    )
    azure_files_storage_share_name: Optional[str] = Field(
        None, description='Azure File Storage Share name', examples=['share-name']
    )
    backblaze_b2_bucket: Optional[str] = Field(
        None,
        description='Backblaze B2 Cloud Storage Bucket name',
        examples=['my-bucket'],
    )
    backblaze_b2_s3_endpoint: Optional[str] = Field(
        None,
        description='Backblaze B2 Cloud Storage S3 Endpoint',
        examples=['s3.us-west-001.backblazeb2.com'],
    )
    disabled: Optional[bool] = Field(
        None,
        description='If true, this server has been disabled due to failures.  Make any change or set disabled to false to clear this flag.',
        examples=[True],
    )
    enable_dedicated_ips: Optional[bool] = Field(
        None,
        description='`true` if remote server only accepts connections from dedicated IPs',
        examples=[True],
    )
    filebase_access_key: Optional[str] = Field(
        None, description='Filebase Access Key.', examples=['example']
    )
    filebase_bucket: Optional[str] = Field(
        None, description='Filebase Bucket name', examples=['my-bucket']
    )
    files_agent_api_token: Optional[str] = Field(
        None, description='Files Agent API Token', examples=['example']
    )
    files_agent_permission_set: Optional[FilesAgentPermissionSet] = Field(
        None,
        description='Local permissions for files agent. read_only, write_only, or read_write',
        examples=['read_write'],
    )
    files_agent_root: Optional[str] = Field(
        None, description='Agent local root path', examples=['example']
    )
    google_cloud_storage_bucket: Optional[str] = Field(
        None, description='Google Cloud Storage bucket name', examples=['my-bucket']
    )
    google_cloud_storage_project_id: Optional[str] = Field(
        None, description='Google Cloud Project ID', examples=['my-project']
    )
    hostname: Optional[str] = Field(
        None, description='Hostname or IP address', examples=['remote-server.com']
    )
    id: Optional[int] = Field(None, description='Remote server ID', examples=[1])
    max_connections: Optional[int] = Field(
        None,
        description='Max number of parallel connections.  Ignored for S3 connections (we will parallelize these as much as possible).',
        examples=[1],
    )
    name: Optional[str] = Field(
        None,
        description='Internal name for your reference',
        examples=['My Remote server'],
    )
    one_drive_account_type: Optional[OneDriveAccountType] = Field(
        None,
        description='Either personal or business_other account types',
        examples=['personal'],
    )
    pin_to_site_region: Optional[bool] = Field(
        None,
        description='If true, we will ensure that all communications with this remote server are made through the primary region of the site.  This setting can also be overridden by a sitewide setting which will force it to true.',
        examples=[True],
    )
    pinned_region: Optional[str] = Field(
        None,
        description='If set, all communciations with this remote server are made through the provided region.',
        examples=['us-east-1'],
    )
    port: Optional[int] = Field(
        None, description='Port for remote server.  Not needed for S3.', examples=[1]
    )
    rackspace_container: Optional[str] = Field(
        None,
        description='The name of the container (top level directory) where files will sync.',
        examples=['my-container'],
    )
    rackspace_region: Optional[str] = Field(
        None,
        description='Three letter airport code for Rackspace region. See https://support.rackspace.com/how-to/about-regions/',
        examples=['dfw'],
    )
    rackspace_username: Optional[str] = Field(
        None,
        description='Rackspace username used to login to the Rackspace Cloud Control Panel.',
        examples=['rackspaceuser'],
    )
    remote_home_path: Optional[str] = Field(
        None,
        description='Initial home folder on remote server',
        examples=['/home/user1'],
    )
    s3_bucket: Optional[str] = Field(
        None, description='S3 bucket name', examples=['my-bucket']
    )
    s3_compatible_access_key: Optional[str] = Field(
        None, description='S3-compatible Access Key.', examples=['example']
    )
    s3_compatible_bucket: Optional[str] = Field(
        None, description='S3-compatible Bucket name', examples=['my-bucket']
    )
    s3_compatible_endpoint: Optional[str] = Field(
        None, description='S3-compatible endpoint', examples=['mys3platform.com']
    )
    s3_compatible_region: Optional[str] = Field(
        None, description='S3-compatible endpoint', examples=['us-east-1']
    )
    s3_region: Optional[str] = Field(
        None, description='S3 region', examples=['us-east-1']
    )
    server_certificate: Optional[ServerCertificate] = Field(
        None, description='Remote server certificate', examples=['require_match']
    )
    server_host_key: Optional[str] = Field(
        None,
        description='Remote server SSH Host Key. If provided, we will require that the server host key matches the provided key. Uses OpenSSH format similar to what would go into ~/.ssh/known_hosts',
        examples=['[public key]'],
    )
    server_type: Optional[ServerType] = Field(
        None, description='Remote server type.', examples=['s3']
    )
    ssl: Optional[Ssl] = Field(
        None, description='Should we require SSL?', examples=['if_available']
    )
    username: Optional[str] = Field(
        None,
        description='Remote server username.  Not needed for S3 buckets.',
        examples=['user'],
    )
    wasabi_access_key: Optional[str] = Field(
        None, description='Wasabi access key.', examples=['example']
    )
    wasabi_bucket: Optional[str] = Field(
        None, description='Wasabi Bucket name', examples=['my-bucket']
    )
    wasabi_region: Optional[str] = Field(
        None, description='Wasabi region', examples=['us-west-1']
    )


class RequestEntity(BaseModel):
    automation_id: Optional[str] = Field(
        None, description='ID of automation that created request', examples=['example']
    )
    destination: Optional[str] = Field(
        None, description='Destination filename', examples=['example']
    )
    id: Optional[int] = Field(None, description='Request ID', examples=[1])
    path: Optional[str] = Field(None, description='Folder path', examples=['example'])
    source: Optional[str] = Field(
        None, description='Source filename, if applicable', examples=['example']
    )
    user_display_name: Optional[str] = Field(
        None,
        description='User making the request (if applicable)',
        examples=['example'],
    )


class SessionEntity(BaseModel):
    id: Optional[str] = Field(
        None,
        description='Session ID',
        examples=['60525f92e859c4c3d74cb02fd176b1525901b525'],
    )
    language: Optional[str] = Field(
        None, description='Session language', examples=['en']
    )
    read_only: Optional[bool] = Field(
        None, description='Is this session read only?', examples=[True]
    )
    sftp_insecure_ciphers: Optional[bool] = Field(
        None,
        description='Are insecure SFTP ciphers allowed for this user? (If this is set to true, the site administrator has signaled that it is ok to use less secure SSH ciphers for this user.)',
    )


class SettingsChangeEntity(BaseModel):
    changes: Optional[List[str]] = Field(
        None, description='Markdown-formatted change messages.', examples=[['example']]
    )
    created_at: Optional[datetime] = Field(
        None,
        description='The time this change was made',
        examples=['2000-01-01T01:00:00Z'],
    )
    user_id: Optional[int] = Field(
        None, description='The user id responsible for this change', examples=[1]
    )
    user_is_files_support: Optional[bool] = Field(
        None, description='true if this change was performed by Files.com support.'
    )
    username: Optional[str] = Field(
        None,
        description='The username of the user responsible for this change',
        examples=['some_user'],
    )


class SftpHostKeyEntity(BaseModel):
    fingerprint_md5: Optional[str] = Field(
        None, description='MD5 Fingerpint of the public key', examples=['example']
    )
    fingerprint_sha256: Optional[str] = Field(
        None, description='SHA256 Fingerpint of the public key', examples=['example']
    )
    id: Optional[int] = Field(None, description='Sftp Host Key ID', examples=[1])
    name: Optional[str] = Field(
        None,
        description='The friendly name of this SFTP Host Key.',
        examples=['example'],
    )


class BundleActivityNotifications(Enum):
    never = 'never'
    always = 'always'
    per_bundle_setting = 'per_bundle_setting'


class BundleRegistrationNotifications(Enum):
    never = 'never'
    always = 'always'
    per_bundle_setting = 'per_bundle_setting'


class BundleUploadReceiptNotifications(Enum):
    never = 'never'
    always = 'always'
    per_bundle_setting = 'per_bundle_setting'


class DomainLetsencryptChain(Enum):
    default = 'default'
    isrg_root_x1 = 'isrg_root_x1'
    dst_root_ca_x3 = 'dst_root_ca_x3'


class OfficeIntegrationType(Enum):
    only_office = 'only_office'
    office_365 = 'office_365'
    disabled = 'disabled'


class Require2faUserType(Enum):
    all = 'all'
    folder_and_site_admins = 'folder_and_site_admins'
    site_admins = 'site_admins'


class SftpHostKeyType(Enum):
    default = 'default'
    exavault = 'exavault'
    custom = 'custom'


class WelcomeScreen(Enum):
    enabled = 'enabled'
    hidden = 'hidden'
    disabled = 'disabled'


class DeprovisionBehavior(Enum):
    disable = 'disable'
    delete = 'delete'


class LdapUsernameField(Enum):
    sAMAccountName = 'sAMAccountName'
    userPrincipalName = 'userPrincipalName'


class Protocol(Enum):
    oauth2 = 'oauth2'
    field_unused_openid2 = '_unused_openid2'
    saml = 'saml'
    active_directory = 'active_directory'
    open_ldap = 'open_ldap'
    scim = 'scim'


class Provider(Enum):
    google = 'google'
    auth0 = 'auth0'
    okta = 'okta'
    atlassian = 'atlassian'
    azure = 'azure'
    box = 'box'
    dropbox = 'dropbox'
    slack = 'slack'
    field_unused_ubuntu = '_unused_ubuntu'
    onelogin = 'onelogin'
    saml = 'saml'
    idaptive = 'idaptive'
    ldap = 'ldap'
    scim = 'scim'


class ScimAuthenticationMethod(Enum):
    none = 'none'
    basic = 'basic'
    token = 'token'


class SsoStrategyEntity(BaseModel):
    deprovision_behavior: Optional[DeprovisionBehavior] = Field(
        None, description='Method used for deprovisioning users.', examples=['disable']
    )
    deprovision_groups: Optional[bool] = Field(
        None,
        description='Auto-deprovision group membership based on group memberships on the SSO side?',
    )
    deprovision_users: Optional[bool] = Field(
        None, description='Auto-deprovision users?'
    )
    enabled: Optional[bool] = Field(
        None,
        description='Is strategy enabled?  This may become automatically set to `false` after a high number and duration of failures.',
        examples=[True],
    )
    id: Optional[int] = Field(None, description='ID', examples=[1])
    label: Optional[str] = Field(
        None,
        description='Custom label for the SSO provider on the login page.',
        examples=['My Corporate SSO Provider'],
    )
    ldap_base_dn: Optional[str] = Field(
        None,
        description='Base DN for looking up users in LDAP server',
        examples=['example'],
    )
    ldap_domain: Optional[str] = Field(
        None,
        description='Domain name that will be appended to LDAP usernames',
        examples=['mysite.com'],
    )
    ldap_host: Optional[str] = Field(
        None, description='LDAP host', examples=['ldap.site.com']
    )
    ldap_host_2: Optional[str] = Field(
        None, description='LDAP backup host', examples=['ldap2.site.com']
    )
    ldap_host_3: Optional[str] = Field(
        None, description='LDAP backup host', examples=['ldap3.site.com']
    )
    ldap_port: Optional[int] = Field(None, description='LDAP port', examples=[1])
    ldap_secure: Optional[bool] = Field(
        None, description='Use secure LDAP?', examples=[True]
    )
    ldap_username: Optional[str] = Field(
        None,
        description='Username for signing in to LDAP server.',
        examples=['[ldap username]'],
    )
    ldap_username_field: Optional[LdapUsernameField] = Field(
        None, description='LDAP username field', examples=['sAMAccountName']
    )
    logo_url: Optional[str] = Field(
        None,
        description='URL holding a custom logo for the SSO provider on the login page.',
        examples=['https://mysite.files.com/.../logo.png'],
    )
    protocol: Optional[Protocol] = Field(
        None, description='SSO Protocol', examples=['oauth2']
    )
    provider: Optional[Provider] = Field(
        None, description='Provider name', examples=['okta']
    )
    provision_attachments_permission: Optional[bool] = Field(
        None,
        description='DEPRECATED: Auto-provisioned users get Sharing permission. Use a Group with the Bundle permission instead.',
        examples=[True],
    )
    provision_company: Optional[str] = Field(
        None,
        description='Default company for auto provisioned users.',
        examples=['ACME Corp.'],
    )
    provision_dav_permission: Optional[bool] = Field(
        None,
        description='Auto-provisioned users get WebDAV permission?',
        examples=[True],
    )
    provision_email_signup_groups: Optional[str] = Field(
        None,
        description='Comma-separated list of group names whose members will be created with email_signup authentication.',
        examples=['Employees'],
    )
    provision_ftp_permission: Optional[bool] = Field(
        None, description='Auto-provisioned users get FTP permission?', examples=[True]
    )
    provision_group_default: Optional[str] = Field(
        None,
        description='Comma-separated list of group names for groups to automatically add all auto-provisioned users to.',
        examples=['Employees'],
    )
    provision_group_exclusion: Optional[str] = Field(
        None,
        description='Comma-separated list of group names for groups (with optional wildcards) that will be excluded from auto-provisioning.',
        examples=['Employees'],
    )
    provision_group_inclusion: Optional[str] = Field(
        None,
        description='Comma-separated list of group names for groups (with optional wildcards) that will be auto-provisioned.',
        examples=['Employees'],
    )
    provision_group_required: Optional[str] = Field(
        None,
        description='Comma or newline separated list of group names (with optional wildcards) to require membership for user provisioning.',
        examples=['example'],
    )
    provision_groups: Optional[bool] = Field(
        None,
        description='Auto-provision group membership based on group memberships on the SSO side?',
    )
    provision_sftp_permission: Optional[bool] = Field(
        None, description='Auto-provisioned users get SFTP permission?', examples=[True]
    )
    provision_site_admin_groups: Optional[str] = Field(
        None,
        description='Comma-separated list of group names whose members will be created as Site Admins.',
        examples=['Employees'],
    )
    provision_time_zone: Optional[str] = Field(
        None,
        description='Default time zone for auto provisioned users.',
        examples=['Eastern Time (US & Canada)'],
    )
    provision_users: Optional[bool] = Field(None, description='Auto-provision users?')
    saml_provider_cert_fingerprint: Optional[str] = Field(
        None,
        description='Identity provider sha256 cert fingerprint if saml_provider_metadata_url is not available.',
        examples=['example'],
    )
    saml_provider_issuer_url: Optional[str] = Field(
        None, description='Identity provider issuer url', examples=['example']
    )
    saml_provider_metadata_content: Optional[str] = Field(
        None, description='Custom identity provider metadata', examples=['example']
    )
    saml_provider_metadata_url: Optional[str] = Field(
        None,
        description='Metadata URL for the SAML identity provider',
        examples=['example'],
    )
    saml_provider_slo_target_url: Optional[str] = Field(
        None, description='Identity provider SLO endpoint', examples=['example']
    )
    saml_provider_sso_target_url: Optional[str] = Field(
        None,
        description='Identity provider SSO endpoint if saml_provider_metadata_url is not available.',
        examples=['example'],
    )
    scim_authentication_method: Optional[ScimAuthenticationMethod] = Field(
        None, description='SCIM authentication type.', examples=['example']
    )
    scim_oauth_access_token: Optional[str] = Field(
        None, description='SCIM OAuth Access Token.', examples=['example']
    )
    scim_oauth_access_token_expires_at: Optional[str] = Field(
        None,
        description='SCIM OAuth Access Token Expiration Time.',
        examples=['example'],
    )
    scim_username: Optional[str] = Field(
        None, description='SCIM username.', examples=['example']
    )
    subdomain: Optional[str] = Field(
        None, description='Subdomain', examples=['my-site']
    )


class StatusEntity(BaseModel):
    clickwrap_body: Optional[str] = Field(
        None, description='Required Clickwrap body', examples=['example']
    )
    clickwrap_id: Optional[int] = Field(
        None, description='Required Clickwrap id', examples=[1]
    )
    code: Optional[int] = Field(None, description='Status HTTP code', examples=[200])
    data: Optional[AutoEntity] = None
    errors: Optional[List[ErrorsEntity]] = Field(
        None, description='A list of api errors', examples=[[None]]
    )
    message: Optional[str] = Field(
        None, description='Error message', examples=['example']
    )
    status: Optional[str] = Field(None, description='Status message', examples=[''])


class StyleEntity(BaseModel):
    id: Optional[int] = Field(None, description='Style ID', examples=[1])
    logo: Optional[ImageEntity] = None
    path: Optional[str] = Field(None, description='Folder path', examples=['example'])
    thumbnail: Optional[ImageEntity] = None


class UsageDailySnapshotEntity(BaseModel):
    api_usage_available: Optional[bool] = Field(
        None,
        description='True if the API usage fields `read_api_usage` and `write_api_usage` can be relied upon.  If this is false, we suggest hiding that value from any UI.',
        examples=[True],
    )
    current_storage: Optional[int] = Field(
        None, description='GB of Files Native Storage used on this day.', examples=[1]
    )
    date: Optional[date_aliased] = Field(
        None,
        description='The date of this usage record',
        examples=['2000-01-01T01:00:00Z'],
    )
    deleted_files_counted_in_minimum: Optional[int] = Field(
        None,
        description='GB of Files Native Storage used on this day for files that have been permanently deleted but were uploaded less than 30 days ago, and are still billable.',
        examples=[1],
    )
    deleted_files_storage: Optional[int] = Field(
        None,
        description='GB of Files Native Storage used on this day for files that have been deleted and are stored as backups.',
        examples=[1],
    )
    id: Optional[int] = Field(None, description='ID of the usage record', examples=[1])
    read_api_usage: Optional[int] = Field(
        None,
        description='Read API Calls used on this day. Note: only updated for days before the current day.',
        examples=[1],
    )
    root_storage: Optional[int] = Field(
        None,
        description='GB of Files Native Storage used for the root folder.  Included here because this value will not be part of `usage_by_top_level_dir`',
        examples=[1],
    )
    usage_by_top_level_dir: Optional[Dict[str, Any]] = Field(
        None,
        description='Usage broken down by each top-level folder',
        examples=[{'key': 'example value'}],
    )
    user_count: Optional[int] = Field(
        None, description='Number of billable users as of this day.', examples=[1]
    )
    write_api_usage: Optional[int] = Field(
        None,
        description='Write API Calls used on this day. Note: only updated for days before the current day.',
        examples=[1],
    )


class UsageSnapshotEntity(BaseModel):
    bytes_sent: Optional[float] = Field(
        None,
        description='Transfer Usage for period - Outbound GB from Files Native Storage',
        examples=[1],
    )
    current_storage: Optional[float] = Field(
        None,
        description='Current total Storage Usage GB as of end date (not necessarily high water mark, which is used for billing)',
        examples=[1],
    )
    deleted_files_counted_in_minimum: Optional[float] = Field(
        None,
        description='Storage Usage for files that are deleted but uploaded within last 30 days as of end date (not necessarily high water mark, which is used for billing)',
        examples=[1],
    )
    deleted_files_storage: Optional[float] = Field(
        None,
        description='Storage Usage for files that are deleted but retained as backups as of end date (not necessarily high water mark, which is used for billing)',
        examples=[1],
    )
    end_at: Optional[datetime] = Field(
        None,
        description='Usage snapshot end date/time',
        examples=['2000-01-01T01:00:00Z'],
    )
    high_water_storage: Optional[float] = Field(
        None,
        description='Highest Storage Usage GB recorded in time period (used for billing)',
        examples=[1],
    )
    high_water_user_count: Optional[float] = Field(
        None, description='Highest user count number in time period', examples=[1]
    )
    id: Optional[int] = Field(None, description='Usage snapshot ID', examples=[1])
    root_storage: Optional[float] = Field(
        None,
        description='Storage Usage for root folder as of end date (not necessarily high water mark, which is used for billing)',
        examples=[1],
    )
    start_at: Optional[datetime] = Field(
        None,
        description='Usage snapshot start date/time',
        examples=['2000-01-01T01:00:00Z'],
    )
    sync_bytes_received: Optional[float] = Field(
        None,
        description='Transfer Usage for period - Inbound GB to Remote Servers (Sync/Mount)',
        examples=[1],
    )
    sync_bytes_sent: Optional[float] = Field(
        None,
        description='Transfer Usage for period - Outbound GB from Remote Servers (Sync/Mount)',
        examples=[1],
    )
    total_billable_transfer_usage: Optional[float] = Field(
        None,
        description='Transfer usage for period - Total Billable amount',
        examples=[1],
    )
    total_billable_usage: Optional[float] = Field(
        None,
        description='Storage + Transfer Usage - Total Billable amount',
        examples=[1],
    )
    usage_by_top_level_dir: Optional[Dict[str, Any]] = Field(
        None,
        description='Storage Usage - map of root folders to their usage as of end date (not necessarily high water mark, which is used for billing)',
        examples=[{'key': 'example value'}],
    )


class Interface1(Enum):
    web = 'web'
    ftp = 'ftp'
    sftp = 'sftp'
    dav = 'dav'
    desktop = 'desktop'
    restapi = 'restapi'
    robot = 'robot'
    jsapi = 'jsapi'


class UserCipherUseEntity(BaseModel):
    created_at: Optional[datetime] = Field(
        None,
        description='The earliest recorded use of this combination of interface and protocol and cipher (for this user)',
        examples=['2000-01-01T01:00:00Z'],
    )
    id: Optional[int] = Field(None, description='UserCipherUse ID', examples=[1])
    interface: Optional[Interface1] = Field(
        None, description='The interface accessed', examples=['restapi']
    )
    protocol_cipher: Optional[str] = Field(
        None,
        description='The protocol and cipher employed',
        examples=['TLSv1.2; ECDHE-RSA-AES256-GCM-SHA384'],
    )
    updated_at: Optional[datetime] = Field(
        None,
        description='The most recent use of this combination of interface and protocol and cipher (for this user)',
        examples=['2000-01-01T01:00:00Z'],
    )
    user_id: Optional[int] = Field(
        None, description='ID of the user who performed this access', examples=[1]
    )


class AuthenticationMethod(Enum):
    password = 'password'
    unused_former_ldap = 'unused_former_ldap'
    sso = 'sso'
    none = 'none'
    email_signup = 'email_signup'
    password_with_imported_hash = 'password_with_imported_hash'


class Require2fa(Enum):
    use_system_setting = 'use_system_setting'
    always_require = 'always_require'
    never_require = 'never_require'


class SslRequired(Enum):
    use_system_setting = 'use_system_setting'
    always_require = 'always_require'
    never_require = 'never_require'


class UserEntity(BaseModel):
    active_2fa: Optional[bool] = Field(
        None, description='Is 2fa active for the user?', examples=[True]
    )
    admin_group_ids: Optional[List[int]] = Field(
        None,
        description='List of group IDs of which this user is an administrator',
        examples=[[1]],
    )
    allowed_ips: Optional[str] = Field(
        None,
        description='A list of allowed IPs if applicable.  Newline delimited',
        examples=['127.0.0.1'],
    )
    api_keys_count: Optional[int] = Field(
        None, description='Number of api keys associated with this user', examples=[1]
    )
    attachments_permission: Optional[bool] = Field(
        None,
        description='DEPRECATED: Can the user create Bundles (aka Share Links)? Use the bundle permission instead.',
        examples=[True],
    )
    authenticate_until: Optional[datetime] = Field(
        None,
        description='Scheduled Date/Time at which user will be deactivated',
        examples=['2000-01-01T01:00:00Z'],
    )
    authentication_method: Optional[AuthenticationMethod] = Field(
        None, description='How is this user authenticated?', examples=['password']
    )
    avatar_url: Optional[str] = Field(
        None, description="URL holding the user's avatar", examples=['example']
    )
    billing_permission: Optional[bool] = Field(
        None,
        description='Allow this user to perform operations on the account, payments, and invoices?',
    )
    bypass_inactive_disable: Optional[bool] = Field(
        None, description='Exempt this user from being disabled based on inactivity?'
    )
    bypass_site_allowed_ips: Optional[bool] = Field(
        None, description='Allow this user to skip site-wide IP blacklists?'
    )
    company: Optional[str] = Field(
        None, description="User's company", examples=['ACME Corp.']
    )
    created_at: Optional[datetime] = Field(
        None,
        description='When this user was created',
        examples=['2000-01-01T01:00:00Z'],
    )
    dav_permission: Optional[bool] = Field(
        None, description='Can the user connect with WebDAV?', examples=[True]
    )
    days_remaining_until_password_expire: Optional[int] = Field(
        None,
        description='Number of days remaining until password expires',
        examples=[1],
    )
    disabled: Optional[bool] = Field(
        None,
        description='Is user disabled? Disabled users cannot log in, and do not count for billing purposes.  Users can be automatically disabled after an inactivity period via a Site setting.',
        examples=[True],
    )
    email: Optional[EmailStr] = Field(
        None, description='User email address', examples=['example']
    )
    externally_managed: Optional[bool] = Field(
        None, description='Is this user managed by a SsoStrategy?', examples=[True]
    )
    first_login_at: Optional[datetime] = Field(
        None, description="User's first login time", examples=['2000-01-01T01:00:00Z']
    )
    ftp_permission: Optional[bool] = Field(
        None, description='Can the user access with FTP/FTPS?', examples=[True]
    )
    group_ids: Optional[str] = Field(
        None,
        description='Comma-separated list of group IDs of which this user is a member',
        examples=['example'],
    )
    header_text: Optional[str] = Field(
        None,
        description='Text to display to the user in the header of the UI',
        examples=['User-specific message.'],
    )
    id: Optional[int] = Field(None, description='User ID', examples=[1])
    language: Optional[str] = Field(
        None, description='Preferred language', examples=['en']
    )
    last_active_at: Optional[datetime] = Field(
        None,
        description="User's most recent activity time, which is the latest of most recent login, most recent API use, enablement, or creation",
        examples=['2000-01-01T01:00:00Z'],
    )
    last_api_use_at: Optional[datetime] = Field(
        None,
        description="User's most recent API use time",
        examples=['2000-01-01T01:00:00Z'],
    )
    last_dav_login_at: Optional[datetime] = Field(
        None,
        description="User's most recent login time via WebDAV",
        examples=['2000-01-01T01:00:00Z'],
    )
    last_desktop_login_at: Optional[datetime] = Field(
        None,
        description="User's most recent login time via Desktop app",
        examples=['2000-01-01T01:00:00Z'],
    )
    last_ftp_login_at: Optional[datetime] = Field(
        None,
        description="User's most recent login time via FTP",
        examples=['2000-01-01T01:00:00Z'],
    )
    last_login_at: Optional[datetime] = Field(
        None,
        description="User's most recent login time via any protocol",
        examples=['2000-01-01T01:00:00Z'],
    )
    last_protocol_cipher: Optional[str] = Field(
        None,
        description='The most recent protocol and cipher used',
        examples=['example'],
    )
    last_restapi_login_at: Optional[datetime] = Field(
        None,
        description="User's most recent login time via Rest API",
        examples=['2000-01-01T01:00:00Z'],
    )
    last_sftp_login_at: Optional[datetime] = Field(
        None,
        description="User's most recent login time via SFTP",
        examples=['2000-01-01T01:00:00Z'],
    )
    last_web_login_at: Optional[datetime] = Field(
        None,
        description="User's most recent login time via web",
        examples=['2000-01-01T01:00:00Z'],
    )
    lockout_expires: Optional[datetime] = Field(
        None,
        description='Time in the future that the user will no longer be locked out if applicable',
        examples=['2000-01-01T01:00:00Z'],
    )
    name: Optional[str] = Field(
        None, description="User's full name", examples=['John Doe']
    )
    notes: Optional[str] = Field(
        None,
        description='Any internal notes on the user',
        examples=['Internal notes on this user.'],
    )
    notification_daily_send_time: Optional[int] = Field(
        None,
        description='Hour of the day at which daily notifications should be sent. Can be in range 0 to 23',
        examples=[18],
    )
    office_integration_enabled: Optional[bool] = Field(
        None, description='Enable integration with Office for the web?', examples=[True]
    )
    password_expire_at: Optional[datetime] = Field(
        None,
        description='Password expiration datetime',
        examples=['2000-01-01T01:00:00Z'],
    )
    password_expired: Optional[bool] = Field(
        None, description="Is user's password expired?", examples=[True]
    )
    password_set_at: Optional[datetime] = Field(
        None,
        description="Last time the user's password was set",
        examples=['2000-01-01T01:00:00Z'],
    )
    password_validity_days: Optional[int] = Field(
        None,
        description='Number of days to allow user to use the same password',
        examples=[1],
    )
    public_keys_count: Optional[int] = Field(
        None,
        description='Number of public keys associated with this user',
        examples=[1],
    )
    receive_admin_alerts: Optional[bool] = Field(
        None,
        description='Should the user receive admin alerts such a certificate expiration notifications and overages?',
        examples=[True],
    )
    require_2fa: Optional[Require2fa] = Field(
        None, description='2FA required setting', examples=['always_require']
    )
    require_password_change: Optional[bool] = Field(
        None,
        description='Is a password change required upon next user login?',
        examples=[True],
    )
    restapi_permission: Optional[bool] = Field(
        None, description='Can this user access the REST API?', examples=[True]
    )
    self_managed: Optional[bool] = Field(
        None,
        description="Does this user manage it's own credentials or is it a shared/bot user?",
        examples=[True],
    )
    sftp_permission: Optional[bool] = Field(
        None, description='Can the user access with SFTP?', examples=[True]
    )
    site_admin: Optional[bool] = Field(
        None, description='Is the user an administrator for this site?', examples=[True]
    )
    skip_welcome_screen: Optional[bool] = Field(
        None, description='Skip Welcome page in the UI?', examples=[True]
    )
    ssl_required: Optional[SslRequired] = Field(
        None, description='SSL required setting', examples=['always_require']
    )
    sso_strategy_id: Optional[int] = Field(
        None,
        description='SSO (Single Sign On) strategy ID for the user, if applicable.',
        examples=[1],
    )
    subscribe_to_newsletter: Optional[bool] = Field(
        None, description='Is the user subscribed to the newsletter?', examples=[True]
    )
    time_zone: Optional[str] = Field(
        None, description='User time zone', examples=['Pacific Time (US & Canada)']
    )
    type_of_2fa: Optional[str] = Field(
        None,
        description='Type(s) of 2FA methods in use.  Will be either `sms`, `totp`, `u2f`, `yubi`, or multiple values sorted alphabetically and joined by an underscore.',
        examples=['yubi'],
    )
    user_root: Optional[str] = Field(
        None,
        description='Root folder for FTP (and optionally SFTP if the appropriate site-wide setting is set.)  Note that this is not used for API, Desktop, or Web interface.',
        examples=['example'],
    )
    username: Optional[str] = Field(
        None, description="User's username", examples=['user']
    )


class UserRequestEntity(BaseModel):
    details: Optional[str] = Field(
        None,
        description="Details of the user's request",
        examples=['Changed Departments'],
    )
    email: Optional[EmailStr] = Field(
        None, description='User email address', examples=['example']
    )
    id: Optional[int] = Field(None, description='ID', examples=[1])
    name: Optional[str] = Field(
        None, description="User's full name", examples=['John Doe']
    )


class WebhookTestEntity(BaseModel):
    code: Optional[int] = Field(None, description='Status HTTP code', examples=[200])
    data: Optional[AutoEntity] = None
    message: Optional[str] = Field(None, description='Error message', examples=[''])
    status: Optional[str] = Field(None, description='Status message', examples=[''])
    success: Optional[bool] = Field(
        None, description='The success status of the webhook test', examples=[True]
    )


class FormField(BaseModel):
    default_option: Optional[str] = Field(
        None, description='Default option to be preselected in the dropdown or radio.'
    )
    field_type: Optional[str] = Field(
        None, description='Type of field: text, text_area, dropdown, or radio'
    )
    help_text: Optional[str] = Field(None, description='Help text of field')
    id: Optional[int] = Field(None, description='Id of existing Form Field')
    label: Optional[str] = Field(None, description='Label of Field')
    options_for_select: Optional[str] = Field(
        None, description='List of options for dropdown or radio'
    )
    required: Optional[bool] = Field(
        None, description='Is this a required field? (default true)'
    )


class PatchFormFieldSets(BaseModel):
    form_fields: Optional[List[FormField]] = None
    skip_company: Optional[bool] = Field(None, description='Skip validating company')
    skip_email: Optional[bool] = Field(None, description='Skip validating form email')
    skip_name: Optional[bool] = Field(None, description='Skip validating form name')
    title: Optional[str] = Field(None, description='Title to be displayed')


class PostFormFieldSets(BaseModel):
    form_fields: Optional[List[FormField]] = None
    skip_company: Optional[bool] = Field(None, description='Skip validating company')
    skip_email: Optional[bool] = Field(None, description='Skip validating form email')
    skip_name: Optional[bool] = Field(None, description='Skip validating form name')
    title: Optional[str] = Field(None, description='Title to be displayed')
    user_id: Optional[int] = Field(
        None,
        description="User ID.  Provide a value of `0` to operate the current session's user.",
    )


class ActionNotificationExportResultsGetResponse(
    RootModel[List[ActionNotificationExportResultEntity]]
):
    root: List[ActionNotificationExportResultEntity]


class ActionNotificationExportsPostRequest(BaseModel):
    end_at: Optional[datetime] = Field(
        None,
        description='End date/time of export range.',
        examples=['2000-01-01T01:00:00Z'],
    )
    query_folder: Optional[str] = Field(
        None,
        description='Return notifications that were triggered by actions in this folder.',
        examples=['MyFolder'],
    )
    query_message: Optional[str] = Field(
        None,
        description='Error message associated with the request, if any.',
        examples=['Connection Refused'],
    )
    query_path: Optional[str] = Field(
        None,
        description='Return notifications that were triggered by actions on this specific path.',
        examples=['MyFile.txt'],
    )
    query_request_method: Optional[str] = Field(
        None,
        description='The HTTP request method used by the webhook.',
        examples=['GET'],
    )
    query_request_url: Optional[str] = Field(
        None,
        description='The target webhook URL.',
        examples=['http://example.com/webhook'],
    )
    query_status: Optional[str] = Field(
        None,
        description='The HTTP status returned from the server in response to the webhook request.',
        examples=['200'],
    )
    query_success: Optional[bool] = Field(
        None,
        description='true if the webhook request succeeded (i.e. returned a 200 or 204 response status). false otherwise.',
        examples=[True],
    )
    start_at: Optional[datetime] = Field(
        None,
        description='Start date/time of export range.',
        examples=['2000-01-01T01:00:00Z'],
    )
    user_id: Optional[int] = Field(
        None,
        description="User ID.  Provide a value of `0` to operate the current session's user.",
    )


class ApiKeyPatchRequest(BaseModel):
    expires_at: Optional[datetime] = Field(
        None, description='API Key expiration date', examples=['2000-01-01T01:00:00Z']
    )
    name: Optional[str] = Field(
        None,
        description='Internal name for the API Key.  For your use.',
        examples=['My Main API Key'],
    )
    permission_set: Optional[PermissionSet] = Field(
        None,
        description='Permissions for this API Key.  Keys with the `desktop_app` permission set only have the ability to do the functions provided in our Desktop App (File and Share Link operations).  Additional permission sets may become available in the future, such as for a Site Admin to give a key with no administrator privileges.  If you have ideas for permission sets, please let us know.',
        examples=['full'],
    )


class ApiKeysGetResponse(RootModel[List[ApiKeyEntity]]):
    root: List[ApiKeyEntity]


class SortBy(BaseModel):
    pass


class Filter(BaseModel):
    pass


class FilterGt(BaseModel):
    pass


class FilterGteq(BaseModel):
    pass


class FilterLike(BaseModel):
    pass


class FilterLt(BaseModel):
    pass


class FilterLteq(BaseModel):
    pass


class ApiKeysPostRequest(BaseModel):
    description: Optional[str] = Field(
        None, description='User-supplied description of API key.', examples=['example']
    )
    expires_at: Optional[datetime] = Field(
        None, description='API Key expiration date', examples=['2000-01-01T01:00:00Z']
    )
    name: Optional[str] = Field(
        None,
        description='Internal name for the API Key.  For your use.',
        examples=['My Main API Key'],
    )
    path: Optional[str] = Field(
        None,
        description='Folder path restriction for this api key.',
        examples=['shared/docs'],
    )
    permission_set: Optional[PermissionSet] = Field(
        'full',
        description='Permissions for this API Key.  Keys with the `desktop_app` permission set only have the ability to do the functions provided in our Desktop App (File and Share Link operations).  Additional permission sets may become available in the future, such as for a Site Admin to give a key with no administrator privileges.  If you have ideas for permission sets, please let us know.',
        examples=['full'],
    )
    user_id: Optional[int] = Field(
        None,
        description="User ID.  Provide a value of `0` to operate the current session's user.",
    )


class ApiKeysIdPatchRequest(BaseModel):
    description: Optional[str] = Field(
        None, description='User-supplied description of API key.', examples=['example']
    )
    expires_at: Optional[datetime] = Field(
        None, description='API Key expiration date', examples=['2000-01-01T01:00:00Z']
    )
    name: Optional[str] = Field(
        None,
        description='Internal name for the API Key.  For your use.',
        examples=['My Main API Key'],
    )
    permission_set: Optional[PermissionSet] = Field(
        None,
        description='Permissions for this API Key.  Keys with the `desktop_app` permission set only have the ability to do the functions provided in our Desktop App (File and Share Link operations).  Additional permission sets may become available in the future, such as for a Site Admin to give a key with no administrator privileges.  If you have ideas for permission sets, please let us know.',
        examples=['full'],
    )


class AppsGetResponse(RootModel[List[AppEntity]]):
    root: List[AppEntity]


class As2IncomingMessagesGetResponse(RootModel[List[As2IncomingMessageEntity]]):
    root: List[As2IncomingMessageEntity]


class As2OutgoingMessagesGetResponse(RootModel[List[As2OutgoingMessageEntity]]):
    root: List[As2OutgoingMessageEntity]


class As2PartnersGetResponse(RootModel[List[As2PartnerEntity]]):
    root: List[As2PartnerEntity]


class As2PartnersPostRequest(BaseModel):
    as2_station_id: int = Field(..., description='Id of As2Station for this partner')
    name: str = Field(..., description='AS2 Name')
    public_certificate: str
    server_certificate: Optional[str] = Field(
        None, description='Remote server certificate security setting'
    )
    uri: str = Field(..., description='URL base for AS2 responses')


class As2PartnersIdPatchRequest(BaseModel):
    name: Optional[str] = Field(None, description='AS2 Name')
    public_certificate: Optional[str] = None
    server_certificate: Optional[str] = Field(
        None, description='Remote server certificate security setting'
    )
    uri: Optional[str] = Field(None, description='URL base for AS2 responses')


class As2StationsGetResponse(RootModel[List[As2StationEntity]]):
    root: List[As2StationEntity]


class As2StationsPostRequest(BaseModel):
    name: str = Field(..., description='AS2 Name')
    private_key: str
    private_key_password: Optional[str] = None
    public_certificate: str


class As2StationsIdPatchRequest(BaseModel):
    name: Optional[str] = Field(None, description='AS2 Name')
    private_key: Optional[str] = None
    private_key_password: Optional[str] = None
    public_certificate: Optional[str] = None


class AutomationRunsGetResponse(RootModel[List[AutomationRunEntity]]):
    root: List[AutomationRunEntity]


class AutomationsGetResponse(RootModel[List[AutomationEntity]]):
    root: List[AutomationEntity]


class AutomationsPostRequest(BaseModel):
    automation: Automation = Field(
        ..., description='Automation type', examples=['create_folder']
    )
    description: Optional[str] = Field(
        None, description='Description for the this Automation.', examples=['example']
    )
    destination: Optional[str] = Field(
        None, description='DEPRECATED: Destination Path. Use `destinations` instead.'
    )
    destination_replace_from: Optional[str] = Field(
        None,
        description='If set, this string in the destination path will be replaced with the value in `destination_replace_to`.',
    )
    destination_replace_to: Optional[str] = Field(
        None,
        description='If set, this string will replace the value `destination_replace_from` in the destination filename. You can use special patterns here.',
    )
    destinations: Optional[List[str]] = Field(
        None,
        description='A list of String destination paths or Hash of folder_path and optional file_path.',
        examples=[
            [
                'folder_a/file_a.txt',
                {'file_path': 'file_b.txt', 'folder_path': 'folder_b'},
                {'folder_path': 'folder_c'},
            ]
        ],
    )
    disabled: Optional[bool] = Field(
        None, description='If true, this automation will not run.', examples=[True]
    )
    group_ids: Optional[str] = Field(
        None,
        description='A list of group IDs the automation is associated with. If sent as a string, it should be comma-delimited.',
    )
    interval: Optional[str] = Field(
        None,
        description='How often to run this automation? One of: `day`, `week`, `week_end`, `month`, `month_end`, `quarter`, `quarter_end`, `year`, `year_end`',
        examples=['year'],
    )
    name: Optional[str] = Field(
        None, description='Name for this automation.', examples=['example']
    )
    path: Optional[str] = Field(
        None, description='Path on which this Automation runs.  Supports globs.'
    )
    schedule: Optional[Dict[str, Any]] = Field(
        None,
        description='Custom schedule for running this automation.',
        examples=[
            {
                'days_of_week': [0, 1, 3],
                'time_zone': 'Eastern Time (US & Canada)',
                'times_of_day': ['7:30', '11:30'],
            }
        ],
    )
    source: Optional[str] = Field(None, description='Source Path', examples=['source'])
    sync_ids: Optional[str] = Field(
        None,
        description='A list of sync IDs the automation is associated with. If sent as a string, it should be comma-delimited.',
    )
    trigger: Optional[Trigger] = Field(
        None,
        description='How this automation is triggered to run. One of: `realtime`, `daily`, `custom_schedule`, `webhook`, `email`, or `action`.',
        examples=['realtime'],
    )
    trigger_actions: Optional[List[str]] = Field(
        None,
        description='If trigger is `action`, this is the list of action types on which to trigger the automation. Valid actions are create, read, update, destroy, move, copy',
        examples=[['create']],
    )
    user_ids: Optional[str] = Field(
        None,
        description='A list of user IDs the automation is associated with. If sent as a string, it should be comma-delimited.',
    )
    value: Optional[Dict[str, Any]] = Field(
        None,
        description='A Hash of attributes specific to the automation type.',
        examples=[{'limit': '1'}],
    )


class AutomationsIdPatchRequest(BaseModel):
    automation: Optional[Automation] = Field(
        None, description='Automation type', examples=['create_folder']
    )
    description: Optional[str] = Field(
        None, description='Description for the this Automation.', examples=['example']
    )
    destination: Optional[str] = Field(
        None, description='DEPRECATED: Destination Path. Use `destinations` instead.'
    )
    destination_replace_from: Optional[str] = Field(
        None,
        description='If set, this string in the destination path will be replaced with the value in `destination_replace_to`.',
    )
    destination_replace_to: Optional[str] = Field(
        None,
        description='If set, this string will replace the value `destination_replace_from` in the destination filename. You can use special patterns here.',
    )
    destinations: Optional[List[str]] = Field(
        None,
        description='A list of String destination paths or Hash of folder_path and optional file_path.',
        examples=[
            [
                'folder_a/file_a.txt',
                {'file_path': 'file_b.txt', 'folder_path': 'folder_b'},
                {'folder_path': 'folder_c'},
            ]
        ],
    )
    disabled: Optional[bool] = Field(
        None, description='If true, this automation will not run.', examples=[True]
    )
    group_ids: Optional[str] = Field(
        None,
        description='A list of group IDs the automation is associated with. If sent as a string, it should be comma-delimited.',
    )
    interval: Optional[str] = Field(
        None,
        description='How often to run this automation? One of: `day`, `week`, `week_end`, `month`, `month_end`, `quarter`, `quarter_end`, `year`, `year_end`',
        examples=['year'],
    )
    name: Optional[str] = Field(
        None, description='Name for this automation.', examples=['example']
    )
    path: Optional[str] = Field(
        None, description='Path on which this Automation runs.  Supports globs.'
    )
    schedule: Optional[Dict[str, Any]] = Field(
        None,
        description='Custom schedule for running this automation.',
        examples=[
            {
                'days_of_week': [0, 1, 3],
                'time_zone': 'Eastern Time (US & Canada)',
                'times_of_day': ['7:30', '11:30'],
            }
        ],
    )
    source: Optional[str] = Field(None, description='Source Path', examples=['source'])
    sync_ids: Optional[str] = Field(
        None,
        description='A list of sync IDs the automation is associated with. If sent as a string, it should be comma-delimited.',
    )
    trigger: Optional[Trigger] = Field(
        None,
        description='How this automation is triggered to run. One of: `realtime`, `daily`, `custom_schedule`, `webhook`, `email`, or `action`.',
        examples=['realtime'],
    )
    trigger_actions: Optional[List[str]] = Field(
        None,
        description='If trigger is `action`, this is the list of action types on which to trigger the automation. Valid actions are create, read, update, destroy, move, copy',
        examples=[['create']],
    )
    user_ids: Optional[str] = Field(
        None,
        description='A list of user IDs the automation is associated with. If sent as a string, it should be comma-delimited.',
    )
    value: Optional[Dict[str, Any]] = Field(
        None,
        description='A Hash of attributes specific to the automation type.',
        examples=[{'limit': '1'}],
    )


class BandwidthSnapshotsGetResponse(RootModel[List[BandwidthSnapshotEntity]]):
    root: List[BandwidthSnapshotEntity]


class BehaviorsGetResponse(RootModel[List[BehaviorEntity]]):
    root: List[BehaviorEntity]


class BehaviorsPostRequest(BaseModel):
    attachment_file: Optional[bytes] = Field(
        None,
        description='Certain behaviors may require a file, for instance, the "watermark" behavior requires a watermark image',
    )
    behavior: str = Field(..., description='Behavior type.', examples=['webhook'])
    description: Optional[str] = Field(
        None, description='Description for this behavior.', examples=['example']
    )
    name: Optional[str] = Field(
        None, description='Name for this behavior.', examples=['example']
    )
    path: str = Field(..., description='Folder behaviors path.')
    value: Optional[str] = Field(
        None,
        description='The value of the folder behavior.  Can be a integer, array, or hash depending on the type of folder behavior. See The Behavior Types section for example values for each type of behavior.',
        examples=['{"method": "GET"}'],
    )


class BehaviorsFoldersPathGetResponse(RootModel[List[BehaviorEntity]]):
    root: List[BehaviorEntity]


class BehaviorsWebhookTestPostRequest(BaseModel):
    action: Optional[str] = Field(
        None, description='action for test body', examples=['test']
    )
    body: Optional[Dict[str, Any]] = Field(
        None,
        description='Additional body parameters.',
        examples=[{'test-param': 'testvalue'}],
    )
    encoding: Optional[str] = Field(
        None,
        description='HTTP encoding method.  Can be JSON, XML, or RAW (form data).',
        examples=['RAW'],
    )
    headers: Optional[Dict[str, Any]] = Field(
        None,
        description='Additional request headers.',
        examples=[{'x-test-header': 'testvalue'}],
    )
    method: Optional[str] = Field(
        None, description='HTTP method(GET or POST).', examples=['GET']
    )
    url: str = Field(
        ...,
        description='URL for testing the webhook.',
        examples=['https://www.site.com/...'],
    )


class BehaviorsIdPatchRequest(BaseModel):
    attachment_delete: Optional[bool] = Field(
        None, description='If true, will delete the file stored in attachment'
    )
    attachment_file: Optional[bytes] = Field(
        None,
        description='Certain behaviors may require a file, for instance, the "watermark" behavior requires a watermark image',
    )
    behavior: Optional[str] = Field(
        None, description='Behavior type.', examples=['webhook']
    )
    description: Optional[str] = Field(
        None, description='Description for this behavior.', examples=['example']
    )
    name: Optional[str] = Field(
        None, description='Name for this behavior.', examples=['example']
    )
    path: Optional[str] = Field(None, description='Folder behaviors path.')
    value: Optional[str] = Field(
        None,
        description='The value of the folder behavior.  Can be a integer, array, or hash depending on the type of folder behavior. See The Behavior Types section for example values for each type of behavior.',
        examples=['{"method": "GET"}'],
    )


class BundleNotificationsGetResponse(RootModel[List[BundleNotificationEntity]]):
    root: List[BundleNotificationEntity]


class BundleNotificationsPostRequest(BaseModel):
    bundle_id: int = Field(..., description='Bundle ID to notify on', examples=[1])
    notify_on_registration: Optional[bool] = Field(
        None,
        description='Triggers bundle notification when a registration action occurs for it.',
        examples=[True],
    )
    notify_on_upload: Optional[bool] = Field(
        None,
        description='Triggers bundle notification when a upload action occurs for it.',
        examples=[True],
    )
    user_id: Optional[int] = Field(
        None, description='The id of the user to notify.', examples=[1]
    )


class BundleNotificationsIdPatchRequest(BaseModel):
    notify_on_registration: Optional[bool] = Field(
        None,
        description='Triggers bundle notification when a registration action occurs for it.',
        examples=[True],
    )
    notify_on_upload: Optional[bool] = Field(
        None,
        description='Triggers bundle notification when a upload action occurs for it.',
        examples=[True],
    )


class BundleRecipientsGetResponse(RootModel[List[BundleRecipientEntity]]):
    root: List[BundleRecipientEntity]


class BundleRecipientsPostRequest(BaseModel):
    bundle_id: int = Field(..., description='Bundle to share.')
    company: Optional[str] = Field(
        None, description='Company of recipient.', examples=['Acme Ltd']
    )
    name: Optional[str] = Field(
        None, description='Name of recipient.', examples=['John Smith']
    )
    note: Optional[str] = Field(
        None, description='Note to include in email.', examples=['Just a note.']
    )
    recipient: str = Field(
        ...,
        description='Email addresses to share this bundle with.',
        examples=['johndoe@gmail.com'],
    )
    share_after_create: Optional[bool] = Field(
        None,
        description='Set to true to share the link with the recipient upon creation.',
    )
    user_id: Optional[int] = Field(
        None,
        description="User ID.  Provide a value of `0` to operate the current session's user.",
    )


class BundleRegistrationsGetResponse(RootModel[List[BundleRegistrationEntity]]):
    root: List[BundleRegistrationEntity]


class BundlesPostRequest(BaseModel):
    clickwrap_id: Optional[int] = Field(
        None, description='ID of the clickwrap to use with this bundle.', examples=[1]
    )
    code: Optional[str] = Field(
        None,
        description='Bundle code.  This code forms the end part of the Public URL.',
        examples=['abc123'],
    )
    description: Optional[str] = Field(
        None,
        description='Public description',
        examples=['The public description of the bundle.'],
    )
    dont_separate_submissions_by_folder: Optional[bool] = Field(
        None,
        description='Do not create subfolders for files uploaded to this share. Note: there are subtle security pitfalls with allowing anonymous uploads from multiple users to live in the same folder. We strongly discourage use of this option unless absolutely required.',
        examples=[True],
    )
    expires_at: Optional[datetime] = Field(
        None,
        description='Bundle expiration date/time',
        examples=['2000-01-01T01:00:00Z'],
    )
    form_field_set_id: Optional[int] = Field(
        None, description='Id of Form Field Set to use with this bundle'
    )
    inbox_id: Optional[int] = Field(
        None, description='ID of the associated inbox, if available.', examples=[1]
    )
    max_uses: Optional[int] = Field(
        None, description='Maximum number of times bundle can be accessed', examples=[1]
    )
    note: Optional[str] = Field(
        None,
        description='Bundle internal note',
        examples=['The internal note on the bundle.'],
    )
    password: Optional[str] = Field(
        None, description='Password for this bundle.', examples=['Password']
    )
    path_template: Optional[str] = Field(
        None,
        description="Template for creating submission subfolders. Can use the uploader's name, email address, ip, company, and any custom form data.",
        examples=['{{name}}_{{ip}}'],
    )
    paths: List[str] = Field(
        ...,
        description='A list of paths to include in this bundle.',
        examples=[['file.txt']],
    )
    permissions: Optional[Permissions] = Field(
        None,
        description='Permissions that apply to Folders in this Share Link.',
        examples=['read'],
    )
    preview_only: Optional[bool] = Field(
        None, description='Restrict users to previewing files only?'
    )
    require_registration: Optional[bool] = Field(
        None,
        description="Show a registration page that captures the downloader's name and email address?",
    )
    require_share_recipient: Optional[bool] = Field(
        None,
        description='Only allow access to recipients who have explicitly received the share via an email sent through the Files.com UI?',
    )
    send_email_receipt_to_uploader: Optional[bool] = Field(
        None,
        description='Send delivery receipt to the uploader. Note: For writable share only',
        examples=[True],
    )
    skip_company: Optional[bool] = Field(
        None,
        description='BundleRegistrations can be saved without providing company?',
        examples=[True],
    )
    skip_email: Optional[bool] = Field(
        None,
        description='BundleRegistrations can be saved without providing email?',
        examples=[True],
    )
    skip_name: Optional[bool] = Field(
        None,
        description='BundleRegistrations can be saved without providing name?',
        examples=[True],
    )
    user_id: Optional[int] = Field(
        None,
        description="User ID.  Provide a value of `0` to operate the current session's user.",
    )
    watermark_attachment_file: Optional[bytes] = Field(
        None, description='Preview watermark image applied to all bundle items.'
    )


class BundlesIdPatchRequest(BaseModel):
    clickwrap_id: Optional[int] = Field(
        None, description='ID of the clickwrap to use with this bundle.', examples=[1]
    )
    code: Optional[str] = Field(
        None,
        description='Bundle code.  This code forms the end part of the Public URL.',
        examples=['abc123'],
    )
    description: Optional[str] = Field(
        None,
        description='Public description',
        examples=['The public description of the bundle.'],
    )
    dont_separate_submissions_by_folder: Optional[bool] = Field(
        None,
        description='Do not create subfolders for files uploaded to this share. Note: there are subtle security pitfalls with allowing anonymous uploads from multiple users to live in the same folder. We strongly discourage use of this option unless absolutely required.',
        examples=[True],
    )
    expires_at: Optional[datetime] = Field(
        None,
        description='Bundle expiration date/time',
        examples=['2000-01-01T01:00:00Z'],
    )
    form_field_set_id: Optional[int] = Field(
        None, description='Id of Form Field Set to use with this bundle'
    )
    inbox_id: Optional[int] = Field(
        None, description='ID of the associated inbox, if available.', examples=[1]
    )
    max_uses: Optional[int] = Field(
        None, description='Maximum number of times bundle can be accessed', examples=[1]
    )
    note: Optional[str] = Field(
        None,
        description='Bundle internal note',
        examples=['The internal note on the bundle.'],
    )
    password: Optional[str] = Field(
        None, description='Password for this bundle.', examples=['Password']
    )
    path_template: Optional[str] = Field(
        None,
        description="Template for creating submission subfolders. Can use the uploader's name, email address, ip, company, and any custom form data.",
        examples=['{{name}}_{{ip}}'],
    )
    paths: Optional[List[str]] = Field(
        None,
        description='A list of paths to include in this bundle.',
        examples=[['file.txt']],
    )
    permissions: Optional[Permissions] = Field(
        None,
        description='Permissions that apply to Folders in this Share Link.',
        examples=['read'],
    )
    preview_only: Optional[bool] = Field(
        None, description='Restrict users to previewing files only?'
    )
    require_registration: Optional[bool] = Field(
        None,
        description="Show a registration page that captures the downloader's name and email address?",
    )
    require_share_recipient: Optional[bool] = Field(
        None,
        description='Only allow access to recipients who have explicitly received the share via an email sent through the Files.com UI?',
    )
    send_email_receipt_to_uploader: Optional[bool] = Field(
        None,
        description='Send delivery receipt to the uploader. Note: For writable share only',
        examples=[True],
    )
    skip_company: Optional[bool] = Field(
        None,
        description='BundleRegistrations can be saved without providing company?',
        examples=[True],
    )
    skip_email: Optional[bool] = Field(
        None,
        description='BundleRegistrations can be saved without providing email?',
        examples=[True],
    )
    skip_name: Optional[bool] = Field(
        None,
        description='BundleRegistrations can be saved without providing name?',
        examples=[True],
    )
    watermark_attachment_delete: Optional[bool] = Field(
        None, description='If true, will delete the file stored in watermark_attachment'
    )
    watermark_attachment_file: Optional[bytes] = Field(
        None, description='Preview watermark image applied to all bundle items.'
    )


class BundlesIdSharePostRequest(BaseModel):
    note: Optional[str] = Field(
        None, description='Note to include in email.', examples=['Just a note.']
    )
    recipients: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='A list of recipients to share this bundle with. Required unless `to` is used.',
        examples=[
            [
                {
                    'company': 'Acme Ltd',
                    'name': 'John Doe',
                    'recipient': 'johndoe@gmail.com',
                }
            ]
        ],
    )
    to: Optional[List[str]] = Field(
        None,
        description='A list of email addresses to share this bundle with. Required unless `recipients` is used.',
        examples=[['johndoe@gmail.com']],
    )


class ClickwrapsGetResponse(RootModel[List[ClickwrapEntity]]):
    root: List[ClickwrapEntity]


class ClickwrapsPostRequest(BaseModel):
    body: Optional[str] = Field(
        None,
        description='Body text of Clickwrap (supports Markdown formatting).',
        examples=['[Legal body text]'],
    )
    name: Optional[str] = Field(
        None,
        description='Name of the Clickwrap agreement (used when selecting from multiple Clickwrap agreements.)',
        examples=['Example Site NDA for Files.com Use'],
    )
    use_with_bundles: Optional[UseWithBundles] = Field(
        None, description='Use this Clickwrap for Bundles?', examples=['example']
    )
    use_with_inboxes: Optional[UseWithInboxes] = Field(
        None, description='Use this Clickwrap for Inboxes?', examples=['example']
    )
    use_with_users: Optional[UseWithUsers] = Field(
        None,
        description='Use this Clickwrap for User Registrations?  Note: This only applies to User Registrations where the User is invited to your Files.com site using an E-Mail invitation process where they then set their own password.',
        examples=['example'],
    )


class ClickwrapsIdPatchRequest(BaseModel):
    body: Optional[str] = Field(
        None,
        description='Body text of Clickwrap (supports Markdown formatting).',
        examples=['[Legal body text]'],
    )
    name: Optional[str] = Field(
        None,
        description='Name of the Clickwrap agreement (used when selecting from multiple Clickwrap agreements.)',
        examples=['Example Site NDA for Files.com Use'],
    )
    use_with_bundles: Optional[UseWithBundles] = Field(
        None, description='Use this Clickwrap for Bundles?', examples=['example']
    )
    use_with_inboxes: Optional[UseWithInboxes] = Field(
        None, description='Use this Clickwrap for Inboxes?', examples=['example']
    )
    use_with_users: Optional[UseWithUsers] = Field(
        None,
        description='Use this Clickwrap for User Registrations?  Note: This only applies to User Registrations where the User is invited to your Files.com site using an E-Mail invitation process where they then set their own password.',
        examples=['example'],
    )


class DnsRecordsGetResponse(RootModel[List[DnsRecordEntity]]):
    root: List[DnsRecordEntity]


class ExternalEventsGetResponse(RootModel[List[ExternalEventEntity]]):
    root: List[ExternalEventEntity]


class Status3(Enum):
    success = 'success'
    failure = 'failure'
    partial_failure = 'partial_failure'
    in_progress = 'in_progress'
    skipped = 'skipped'


class ExternalEventsPostRequest(BaseModel):
    body: str = Field(..., description='Event body', examples=['example'])
    status: Status3 = Field(..., description='Status of event.', examples=['example'])


class FileActionsBeginUploadPathPostRequest(BaseModel):
    mkdir_parents: Optional[bool] = Field(
        None, description='Create parent directories if they do not exist?'
    )
    part: Optional[int] = Field(None, description='Part if uploading a part.')
    parts: Optional[int] = Field(None, description='How many parts to fetch?')
    ref: Optional[str] = None
    restart: Optional[int] = Field(
        None, description='File byte offset to restart from.'
    )
    size: Optional[int] = Field(
        None,
        description='Total bytes of file being uploaded (include bytes being retained if appending/restarting).',
    )
    with_rename: Optional[bool] = Field(
        None, description='Allow file rename instead of overwrite?'
    )


class FileActionsBeginUploadPathPostResponse(RootModel[List[FileUploadPartEntity]]):
    root: List[FileUploadPartEntity]


class FileActionsCopyPathPostRequest(BaseModel):
    destination: str = Field(..., description='Copy destination path.')
    structure: Optional[bool] = Field(None, description='Copy structure only?')


class FileActionsMovePathPostRequest(BaseModel):
    destination: str = Field(..., description='Move destination path.')


class FileCommentReactionsPostRequest(BaseModel):
    emoji: str = Field(..., description='Emoji to react with.')
    file_comment_id: int = Field(
        ..., description='ID of file comment to attach reaction to.'
    )
    user_id: Optional[int] = Field(
        None,
        description="User ID.  Provide a value of `0` to operate the current session's user.",
    )


class FileCommentsPostRequest(BaseModel):
    body: str = Field(..., description='Comment body.')
    path: str = Field(..., description='File path.')


class FileCommentsIdPatchRequest(BaseModel):
    body: str = Field(..., description='Comment body.')


class FilesPathPatchRequest(BaseModel):
    priority_color: Optional[str] = Field(
        None, description='Priority/Bookmark color of file.', examples=['red']
    )
    provided_mtime: Optional[datetime] = Field(
        None, description='Modified time of file.'
    )


class FilesPathPostRequest(BaseModel):
    action: Optional[str] = Field(
        None,
        description='The action to perform.  Can be `append`, `attachment`, `end`, `upload`, `put`, or may not exist',
    )
    etags_etag_: List[str] = Field(
        ..., alias='etags[etag]', description='etag identifier.'
    )
    etags_part_: List[int] = Field(..., alias='etags[part]', description='Part number.')
    length: Optional[int] = Field(None, description='Length of file.')
    mkdir_parents: Optional[bool] = Field(
        None, description='Create parent directories if they do not exist?'
    )
    part: Optional[int] = Field(None, description='Part if uploading a part.')
    parts: Optional[int] = Field(None, description='How many parts to fetch?')
    provided_mtime: Optional[datetime] = Field(
        None, description='User provided modification time.'
    )
    ref: Optional[str] = None
    restart: Optional[int] = Field(
        None, description='File byte offset to restart from.'
    )
    size: Optional[int] = Field(None, description='Size of file.')
    structure: Optional[str] = Field(
        None, description='If copying folder, copy just the structure?'
    )
    with_rename: Optional[bool] = Field(
        None, description='Allow file rename instead of overwrite?'
    )


class FoldersPathPostRequest(BaseModel):
    mkdir_parents: Optional[bool] = Field(
        None, description='Create parent directories if they do not exist?'
    )
    provided_mtime: Optional[datetime] = Field(
        None, description='User provided modification time.'
    )


class FormFieldSetsGetResponse(RootModel[List[FormFieldSetEntity]]):
    root: List[FormFieldSetEntity]


class GroupUsersGetResponse(RootModel[List[GroupUserEntity]]):
    root: List[GroupUserEntity]


class GroupUsersPostRequest(BaseModel):
    admin: Optional[bool] = Field(
        None, description='Is the user a group administrator?'
    )
    group_id: int = Field(..., description='Group ID to add user to.')
    user_id: int = Field(..., description='User ID to add to group.')


class GroupUsersIdPatchRequest(BaseModel):
    admin: Optional[bool] = Field(
        None, description='Is the user a group administrator?'
    )
    group_id: int = Field(..., description='Group ID to add user to.')
    user_id: int = Field(..., description='User ID to add to group.')


class GroupsGetResponse(RootModel[List[GroupEntity]]):
    root: List[GroupEntity]


class GroupsPostRequest(BaseModel):
    admin_ids: Optional[str] = Field(
        None,
        description='A list of group admin user ids. If sent as a string, should be comma-delimited.',
    )
    name: Optional[str] = Field(None, description='Group name.')
    notes: Optional[str] = Field(None, description='Group notes.')
    user_ids: Optional[str] = Field(
        None,
        description='A list of user ids. If sent as a string, should be comma-delimited.',
    )


class GroupsGroupIdMembershipsUserIdPatchRequest(BaseModel):
    admin: Optional[bool] = Field(
        None, description='Is the user a group administrator?'
    )


class GroupsGroupIdPermissionsGetResponse(RootModel[List[PermissionEntity]]):
    root: List[PermissionEntity]


class GroupsGroupIdUsersGetResponse(RootModel[List[GroupUserEntity]]):
    root: List[GroupUserEntity]


class GroupsGroupIdUsersPostRequest(BaseModel):
    allowed_ips: Optional[str] = Field(
        None,
        description='A list of allowed IPs if applicable.  Newline delimited',
        examples=['127.0.0.1'],
    )
    announcements_read: Optional[bool] = Field(
        None,
        description='Signifies that the user has read all the announcements in the UI.',
    )
    attachments_permission: Optional[bool] = Field(
        None,
        description='DEPRECATED: Can the user create Bundles (aka Share Links)? Use the bundle permission instead.',
        examples=[True],
    )
    authenticate_until: Optional[datetime] = Field(
        None,
        description='Scheduled Date/Time at which user will be deactivated',
        examples=['2000-01-01T01:00:00Z'],
    )
    authentication_method: Optional[AuthenticationMethod] = Field(
        None, description='How is this user authenticated?', examples=['password']
    )
    avatar_delete: Optional[bool] = Field(
        None, description='If true, the avatar will be deleted.'
    )
    avatar_file: Optional[bytes] = Field(
        None, description='An image file for your user avatar.'
    )
    billing_permission: Optional[bool] = Field(
        None,
        description='Allow this user to perform operations on the account, payments, and invoices?',
    )
    bypass_inactive_disable: Optional[bool] = Field(
        None, description='Exempt this user from being disabled based on inactivity?'
    )
    bypass_site_allowed_ips: Optional[bool] = Field(
        None, description='Allow this user to skip site-wide IP blacklists?'
    )
    change_password: Optional[str] = Field(
        None, description='Used for changing a password on an existing user.'
    )
    change_password_confirmation: Optional[str] = Field(
        None,
        description='Optional, but if provided, we will ensure that it matches the value sent in `change_password`.',
    )
    company: Optional[str] = Field(
        None, description="User's company", examples=['ACME Corp.']
    )
    dav_permission: Optional[bool] = Field(
        None, description='Can the user connect with WebDAV?', examples=[True]
    )
    disabled: Optional[bool] = Field(
        None,
        description='Is user disabled? Disabled users cannot log in, and do not count for billing purposes.  Users can be automatically disabled after an inactivity period via a Site setting.',
        examples=[True],
    )
    email: Optional[str] = Field(None, description="User's email.")
    ftp_permission: Optional[bool] = Field(
        None, description='Can the user access with FTP/FTPS?', examples=[True]
    )
    grant_permission: Optional[str] = Field(
        None,
        description='Permission to grant on the user root.  Can be blank or `full`, `read`, `write`, `list`, or `history`.',
    )
    group_ids: Optional[str] = Field(
        None,
        description='A list of group ids to associate this user with.  Comma delimited.',
    )
    header_text: Optional[str] = Field(
        None,
        description='Text to display to the user in the header of the UI',
        examples=['User-specific message.'],
    )
    imported_password_hash: Optional[str] = Field(
        None,
        description="Pre-calculated hash of the user's password. If supplied, this will be used to authenticate the user on first login. Supported hash menthods are MD5, SHA1, and SHA256.",
    )
    language: Optional[str] = Field(
        None, description='Preferred language', examples=['en']
    )
    name: Optional[str] = Field(
        None, description="User's full name", examples=['John Doe']
    )
    notes: Optional[str] = Field(
        None,
        description='Any internal notes on the user',
        examples=['Internal notes on this user.'],
    )
    notification_daily_send_time: Optional[int] = Field(
        None,
        description='Hour of the day at which daily notifications should be sent. Can be in range 0 to 23',
        examples=[18],
    )
    office_integration_enabled: Optional[bool] = Field(
        None, description='Enable integration with Office for the web?', examples=[True]
    )
    password: Optional[str] = Field(None, description='User password.')
    password_confirmation: Optional[str] = Field(
        None,
        description='Optional, but if provided, we will ensure that it matches the value sent in `password`.',
    )
    password_validity_days: Optional[int] = Field(
        None,
        description='Number of days to allow user to use the same password',
        examples=[1],
    )
    receive_admin_alerts: Optional[bool] = Field(
        None,
        description='Should the user receive admin alerts such a certificate expiration notifications and overages?',
        examples=[True],
    )
    require_2fa: Optional[Require2fa] = Field(
        None, description='2FA required setting', examples=['always_require']
    )
    require_password_change: Optional[bool] = Field(
        None,
        description='Is a password change required upon next user login?',
        examples=[True],
    )
    restapi_permission: Optional[bool] = Field(
        None, description='Can this user access the REST API?', examples=[True]
    )
    self_managed: Optional[bool] = Field(
        None,
        description="Does this user manage it's own credentials or is it a shared/bot user?",
        examples=[True],
    )
    sftp_permission: Optional[bool] = Field(
        None, description='Can the user access with SFTP?', examples=[True]
    )
    site_admin: Optional[bool] = Field(
        None, description='Is the user an administrator for this site?', examples=[True]
    )
    skip_welcome_screen: Optional[bool] = Field(
        None, description='Skip Welcome page in the UI?', examples=[True]
    )
    ssl_required: Optional[SslRequired] = Field(
        None, description='SSL required setting', examples=['always_require']
    )
    sso_strategy_id: Optional[int] = Field(
        None,
        description='SSO (Single Sign On) strategy ID for the user, if applicable.',
        examples=[1],
    )
    subscribe_to_newsletter: Optional[bool] = Field(
        None, description='Is the user subscribed to the newsletter?', examples=[True]
    )
    time_zone: Optional[str] = Field(
        None, description='User time zone', examples=['Pacific Time (US & Canada)']
    )
    user_root: Optional[str] = Field(
        None,
        description='Root folder for FTP (and optionally SFTP if the appropriate site-wide setting is set.)  Note that this is not used for API, Desktop, or Web interface.',
        examples=['example'],
    )
    username: Optional[str] = Field(
        None, description="User's username", examples=['user']
    )


class GroupsIdPatchRequest(BaseModel):
    admin_ids: Optional[str] = Field(
        None,
        description='A list of group admin user ids. If sent as a string, should be comma-delimited.',
    )
    name: Optional[str] = Field(None, description='Group name.')
    notes: Optional[str] = Field(None, description='Group notes.')
    user_ids: Optional[str] = Field(
        None,
        description='A list of user ids. If sent as a string, should be comma-delimited.',
    )


class HistoryGetResponse(RootModel[List[ActionEntity]]):
    root: List[ActionEntity]


class HistoryFilesPathGetResponse(RootModel[List[ActionEntity]]):
    root: List[ActionEntity]


class HistoryFoldersPathGetResponse(RootModel[List[ActionEntity]]):
    root: List[ActionEntity]


class HistoryLoginGetResponse(RootModel[List[ActionEntity]]):
    root: List[ActionEntity]


class HistoryUsersUserIdGetResponse(RootModel[List[ActionEntity]]):
    root: List[ActionEntity]


class HistoryExportResultsGetResponse(RootModel[List[HistoryExportResultEntity]]):
    root: List[HistoryExportResultEntity]


class HistoryExportsPostRequest(BaseModel):
    end_at: Optional[datetime] = Field(
        None,
        description='End date/time of export range.',
        examples=['2000-01-01T01:00:00Z'],
    )
    query_action: Optional[str] = Field(
        None,
        description='Filter results by this this action type. Valid values: `create`, `read`, `update`, `destroy`, `move`, `login`, `failedlogin`, `copy`, `user_create`, `user_update`, `user_destroy`, `group_create`, `group_update`, `group_destroy`, `permission_create`, `permission_destroy`, `api_key_create`, `api_key_update`, `api_key_destroy`',
        examples=['read'],
    )
    query_destination: Optional[str] = Field(
        None,
        description='Return results that are file moves with this path as destination.',
        examples=['DestFolder'],
    )
    query_failure_type: Optional[str] = Field(
        None,
        description='If searching for Histories about login failures, this parameter restricts results to failures of this specific type.  Valid values: `expired_trial`, `account_overdue`, `locked_out`, `ip_mismatch`, `password_mismatch`, `site_mismatch`, `username_not_found`, `none`, `no_ftp_permission`, `no_web_permission`, `no_directory`, `errno_enoent`, `no_sftp_permission`, `no_dav_permission`, `no_restapi_permission`, `key_mismatch`, `region_mismatch`, `expired_access`, `desktop_ip_mismatch`, `desktop_api_key_not_used_quickly_enough`, `disabled`, `country_mismatch`',
        examples=['bad_password'],
    )
    query_file_id: Optional[str] = Field(
        None,
        description='Return results that are file actions related to the file indicated by this File ID',
        examples=['1'],
    )
    query_folder: Optional[str] = Field(
        None,
        description='Return results that are file actions related to files or folders inside this folder path.',
        examples=['Folder'],
    )
    query_interface: Optional[str] = Field(
        None,
        description='Filter results by this this interface type. Valid values: `web`, `ftp`, `robot`, `jsapi`, `webdesktopapi`, `sftp`, `dav`, `desktop`, `restapi`, `scim`, `office`, `mobile`, `as2`, `inbound_email`, `remote`',
        examples=['ftp'],
    )
    query_ip: Optional[str] = Field(
        None, description='Filter results by this IP address.', examples=['127.0.0.1']
    )
    query_parent_id: Optional[str] = Field(
        None,
        description='Return results that are file actions inside the parent folder specified by this folder ID',
        examples=['1'],
    )
    query_path: Optional[str] = Field(
        None,
        description='Return results that are file actions related to this path.',
        examples=['MyFile.txt'],
    )
    query_src: Optional[str] = Field(
        None,
        description='Return results that are file moves originating from this path.',
        examples=['SrcFolder'],
    )
    query_target_id: Optional[str] = Field(
        None,
        description='If searching for Histories about specific objects (such as Users, or API Keys), this paremeter restricts results to objects that match this ID.',
        examples=['1'],
    )
    query_target_name: Optional[str] = Field(
        None,
        description='If searching for Histories about Users, Groups or other objects with names, this parameter restricts results to objects with this name/username.',
        examples=['full'],
    )
    query_target_permission: Optional[str] = Field(
        None,
        description='If searching for Histories about Permisisons, this parameter restricts results to permissions of this level.',
        examples=['full'],
    )
    query_target_permission_set: Optional[str] = Field(
        None,
        description='If searching for Histories about API keys, this parameter restricts results to API keys with this permission set.',
        examples=['desktop_app'],
    )
    query_target_platform: Optional[str] = Field(
        None,
        description='If searching for Histories about API keys, this parameter restricts results to API keys associated with this platform.',
        examples=['windows'],
    )
    query_target_user_id: Optional[str] = Field(
        None,
        description='If searching for Histories about API keys, this parameter restricts results to API keys created by/for this user ID.',
        examples=['1'],
    )
    query_target_username: Optional[str] = Field(
        None,
        description='If searching for Histories about API keys, this parameter restricts results to API keys created by/for this username.',
        examples=['jerry'],
    )
    query_user_id: Optional[str] = Field(
        None,
        description='Return results that are actions performed by the user indiciated by this User ID',
        examples=['1'],
    )
    query_username: Optional[str] = Field(
        None, description='Filter results by this username.', examples=['jerry']
    )
    start_at: Optional[datetime] = Field(
        None,
        description='Start date/time of export range.',
        examples=['2000-01-01T01:00:00Z'],
    )
    user_id: Optional[int] = Field(
        None,
        description="User ID.  Provide a value of `0` to operate the current session's user.",
    )


class InboxRecipientsGetResponse(RootModel[List[InboxRecipientEntity]]):
    root: List[InboxRecipientEntity]


class InboxRecipientsPostRequest(BaseModel):
    company: Optional[str] = Field(
        None, description='Company of recipient.', examples=['Acme Ltd']
    )
    inbox_id: int = Field(..., description='Inbox to share.')
    name: Optional[str] = Field(
        None, description='Name of recipient.', examples=['John Smith']
    )
    note: Optional[str] = Field(
        None, description='Note to include in email.', examples=['Just a note.']
    )
    recipient: str = Field(
        ...,
        description='Email address to share this inbox with.',
        examples=['johndoe@gmail.com'],
    )
    share_after_create: Optional[bool] = Field(
        None,
        description='Set to true to share the link with the recipient upon creation.',
    )
    user_id: Optional[int] = Field(
        None,
        description="User ID.  Provide a value of `0` to operate the current session's user.",
    )


class InboxRegistrationsGetResponse(RootModel[List[InboxRegistrationEntity]]):
    root: List[InboxRegistrationEntity]


class InboxUploadsGetResponse(RootModel[List[InboxUploadEntity]]):
    root: List[InboxUploadEntity]


class IpAddressesGetResponse(RootModel[List[IpAddressEntity]]):
    root: List[IpAddressEntity]


class IpAddressesExavaultReservedGetResponse(RootModel[List[PublicIpAddressEntity]]):
    root: List[PublicIpAddressEntity]


class IpAddressesReservedGetResponse(RootModel[List[PublicIpAddressEntity]]):
    root: List[PublicIpAddressEntity]


class LocksPathGetResponse(RootModel[List[LockEntity]]):
    root: List[LockEntity]


class LocksPathPostRequest(BaseModel):
    allow_access_by_any_user: Optional[bool] = Field(
        None, description='Allow lock to be updated by any user?'
    )
    exclusive: Optional[bool] = Field(None, description='Is lock exclusive?')
    recursive: Optional[str] = Field(None, description='Does lock apply to subfolders?')
    timeout: Optional[int] = Field(None, description='Lock timeout length')


class MessageCommentReactionsGetResponse(RootModel[List[MessageCommentReactionEntity]]):
    root: List[MessageCommentReactionEntity]


class MessageCommentReactionsPostRequest(BaseModel):
    emoji: str = Field(..., description='Emoji to react with.')
    user_id: Optional[int] = Field(
        None,
        description="User ID.  Provide a value of `0` to operate the current session's user.",
    )


class MessageCommentsPostRequest(BaseModel):
    body: str = Field(..., description='Comment body.')
    user_id: Optional[int] = Field(
        None,
        description="User ID.  Provide a value of `0` to operate the current session's user.",
    )


class MessageCommentsIdPatchRequest(BaseModel):
    body: str = Field(..., description='Comment body.')


class MessageReactionsGetResponse(RootModel[List[MessageReactionEntity]]):
    root: List[MessageReactionEntity]


class MessageReactionsPostRequest(BaseModel):
    emoji: str = Field(..., description='Emoji to react with.')
    user_id: Optional[int] = Field(
        None,
        description="User ID.  Provide a value of `0` to operate the current session's user.",
    )


class MessagesPostRequest(BaseModel):
    body: str = Field(
        ...,
        description='Message body.',
        examples=['We should upgrade our Files.com account!'],
    )
    project_id: int = Field(
        ..., description='Project to which the message should be attached.'
    )
    subject: str = Field(
        ..., description='Message subject.', examples=['Files.com Account Upgrade']
    )
    user_id: Optional[int] = Field(
        None,
        description="User ID.  Provide a value of `0` to operate the current session's user.",
    )


class MessagesIdPatchRequest(BaseModel):
    body: str = Field(
        ...,
        description='Message body.',
        examples=['We should upgrade our Files.com account!'],
    )
    project_id: int = Field(
        ..., description='Project to which the message should be attached.'
    )
    subject: str = Field(
        ..., description='Message subject.', examples=['Files.com Account Upgrade']
    )


class NotificationsGetResponse(RootModel[List[NotificationEntity]]):
    root: List[NotificationEntity]


class NotificationsPostRequest(BaseModel):
    group_id: Optional[int] = Field(
        None,
        description='The ID of the group to notify.  Provide `user_id`, `username` or `group_id`.',
    )
    message: Optional[str] = Field(
        None,
        description='Custom message to include in notification emails.',
        examples=['custom notification email message'],
    )
    notify_on_copy: Optional[bool] = Field(
        None,
        description='If `true`, copying or moving resources into this path will trigger a notification, in addition to just uploads.',
    )
    notify_on_delete: Optional[bool] = Field(
        None,
        description='Triggers notification when deleting files from this path',
        examples=[True],
    )
    notify_on_download: Optional[bool] = Field(
        None,
        description='Triggers notification when downloading files from this path',
        examples=[True],
    )
    notify_on_move: Optional[bool] = Field(
        None,
        description='Triggers notification when moving files to this path',
        examples=[True],
    )
    notify_on_upload: Optional[bool] = Field(
        None,
        description='Triggers notification when uploading new files to this path',
        examples=[True],
    )
    notify_user_actions: Optional[bool] = Field(
        None,
        description='If `true` actions initiated by the user will still result in a notification',
    )
    path: Optional[str] = Field(None, description='Path')
    recursive: Optional[bool] = Field(
        None,
        description='If `true`, enable notifications for each subfolder in this path',
    )
    send_interval: Optional[str] = Field(
        None,
        description='The time interval that notifications are aggregated by.  Can be `five_minutes`, `fifteen_minutes`, `hourly`, or `daily`.',
        examples=['daily'],
    )
    trigger_by_share_recipients: Optional[bool] = Field(
        None,
        description='Notify when actions are performed by a share recipient?',
        examples=[True],
    )
    triggering_filenames: Optional[List[str]] = Field(
        None,
        description='Array of filenames (possibly with wildcards) to match for action path',
        examples=[['*.jpg', 'notify_file.txt']],
    )
    triggering_group_ids: Optional[List[int]] = Field(
        None,
        description='Only notify on actions made by a member of one of the specified groups',
        examples=[[1]],
    )
    triggering_user_ids: Optional[List[int]] = Field(
        None,
        description='Only notify on actions made one of the specified users',
        examples=[[1]],
    )
    user_id: Optional[int] = Field(
        None,
        description='The id of the user to notify. Provide `user_id`, `username` or `group_id`.',
    )
    username: Optional[str] = Field(
        None,
        description='The username of the user to notify.  Provide `user_id`, `username` or `group_id`.',
    )


class NotificationsIdPatchRequest(BaseModel):
    message: Optional[str] = Field(
        None,
        description='Custom message to include in notification emails.',
        examples=['custom notification email message'],
    )
    notify_on_copy: Optional[bool] = Field(
        None,
        description='If `true`, copying or moving resources into this path will trigger a notification, in addition to just uploads.',
    )
    notify_on_delete: Optional[bool] = Field(
        None,
        description='Triggers notification when deleting files from this path',
        examples=[True],
    )
    notify_on_download: Optional[bool] = Field(
        None,
        description='Triggers notification when downloading files from this path',
        examples=[True],
    )
    notify_on_move: Optional[bool] = Field(
        None,
        description='Triggers notification when moving files to this path',
        examples=[True],
    )
    notify_on_upload: Optional[bool] = Field(
        None,
        description='Triggers notification when uploading new files to this path',
        examples=[True],
    )
    notify_user_actions: Optional[bool] = Field(
        None,
        description='If `true` actions initiated by the user will still result in a notification',
    )
    recursive: Optional[bool] = Field(
        None,
        description='If `true`, enable notifications for each subfolder in this path',
    )
    send_interval: Optional[str] = Field(
        None,
        description='The time interval that notifications are aggregated by.  Can be `five_minutes`, `fifteen_minutes`, `hourly`, or `daily`.',
        examples=['daily'],
    )
    trigger_by_share_recipients: Optional[bool] = Field(
        None,
        description='Notify when actions are performed by a share recipient?',
        examples=[True],
    )
    triggering_filenames: Optional[List[str]] = Field(
        None,
        description='Array of filenames (possibly with wildcards) to match for action path',
        examples=[['*.jpg', 'notify_file.txt']],
    )
    triggering_group_ids: Optional[List[int]] = Field(
        None,
        description='Only notify on actions made by a member of one of the specified groups',
        examples=[[1]],
    )
    triggering_user_ids: Optional[List[int]] = Field(
        None,
        description='Only notify on actions made one of the specified users',
        examples=[[1]],
    )


class PermissionsGetResponse(RootModel[List[PermissionEntity]]):
    root: List[PermissionEntity]


class PermissionsPostRequest(BaseModel):
    group_id: Optional[int] = Field(None, description='Group ID')
    path: Optional[str] = Field(None, description='Folder path')
    permission: Optional[str] = Field(
        None,
        description=' Permission type.  Can be `admin`, `full`, `readonly`, `writeonly`, `list`, or `history`',
    )
    recursive: Optional[bool] = Field(
        None, description='Apply to subfolders recursively?'
    )
    user_id: Optional[int] = Field(
        None, description='User ID.  Provide `username` or `user_id`'
    )
    username: Optional[str] = Field(
        None, description='User username.  Provide `username` or `user_id`'
    )


class PrioritiesGetResponse(RootModel[List[PriorityEntity]]):
    root: List[PriorityEntity]


class ProjectsGetResponse(RootModel[List[ProjectEntity]]):
    root: List[ProjectEntity]


class ProjectsPostRequest(BaseModel):
    global_access: str = Field(
        ...,
        description='Global permissions.  Can be: `none`, `anyone_with_read`, `anyone_with_full`.',
    )


class ProjectsIdPatchRequest(BaseModel):
    global_access: str = Field(
        ...,
        description='Global permissions.  Can be: `none`, `anyone_with_read`, `anyone_with_full`.',
    )


class PublicKeysGetResponse(RootModel[List[PublicKeyEntity]]):
    root: List[PublicKeyEntity]


class PublicKeysPostRequest(BaseModel):
    public_key: str = Field(..., description='Actual contents of SSH key.')
    title: str = Field(
        ..., description='Internal reference for key.', examples=['My Main Key']
    )
    user_id: Optional[int] = Field(
        None,
        description="User ID.  Provide a value of `0` to operate the current session's user.",
    )


class PublicKeysIdPatchRequest(BaseModel):
    title: str = Field(
        ..., description='Internal reference for key.', examples=['My Main Key']
    )


class RemoteBandwidthSnapshotsGetResponse(
    RootModel[List[RemoteBandwidthSnapshotEntity]]
):
    root: List[RemoteBandwidthSnapshotEntity]


class RemoteServersGetResponse(RootModel[List[RemoteServerEntity]]):
    root: List[RemoteServerEntity]


class RemoteServersPostRequest(BaseModel):
    aws_access_key: Optional[str] = Field(
        None, description='AWS Access Key.', examples=['example']
    )
    aws_secret_key: Optional[str] = Field(None, description='AWS secret key.')
    azure_blob_storage_access_key: Optional[str] = Field(
        None, description='Azure Blob Storage secret key.'
    )
    azure_blob_storage_account: Optional[str] = Field(
        None,
        description='Azure Blob Storage Account name',
        examples=['storage-account-name'],
    )
    azure_blob_storage_container: Optional[str] = Field(
        None,
        description='Azure Blob Storage Container name',
        examples=['container-name'],
    )
    azure_blob_storage_sas_token: Optional[str] = Field(
        None,
        description='Shared Access Signature (SAS) token',
        examples=['storage-sas-token'],
    )
    azure_files_storage_access_key: Optional[str] = Field(
        None, description='Azure File Storage access key.'
    )
    azure_files_storage_account: Optional[str] = Field(
        None,
        description='Azure File Storage Account name',
        examples=['storage-account-name'],
    )
    azure_files_storage_sas_token: Optional[str] = Field(
        None,
        description='Shared Access Signature (SAS) token',
        examples=['storage-sas-token'],
    )
    azure_files_storage_share_name: Optional[str] = Field(
        None, description='Azure File Storage Share name', examples=['share-name']
    )
    backblaze_b2_application_key: Optional[str] = Field(
        None, description='Backblaze B2 Cloud Storage applicationKey.'
    )
    backblaze_b2_bucket: Optional[str] = Field(
        None,
        description='Backblaze B2 Cloud Storage Bucket name',
        examples=['my-bucket'],
    )
    backblaze_b2_key_id: Optional[str] = Field(
        None, description='Backblaze B2 Cloud Storage keyID.'
    )
    backblaze_b2_s3_endpoint: Optional[str] = Field(
        None,
        description='Backblaze B2 Cloud Storage S3 Endpoint',
        examples=['s3.us-west-001.backblazeb2.com'],
    )
    enable_dedicated_ips: Optional[bool] = Field(
        None,
        description='`true` if remote server only accepts connections from dedicated IPs',
        examples=[True],
    )
    filebase_access_key: Optional[str] = Field(
        None, description='Filebase Access Key.', examples=['example']
    )
    filebase_bucket: Optional[str] = Field(
        None, description='Filebase Bucket name', examples=['my-bucket']
    )
    filebase_secret_key: Optional[str] = Field(None, description='Filebase secret key')
    files_agent_permission_set: Optional[FilesAgentPermissionSet] = Field(
        None,
        description='Local permissions for files agent. read_only, write_only, or read_write',
        examples=['read_write'],
    )
    files_agent_root: Optional[str] = Field(
        None, description='Agent local root path', examples=['example']
    )
    google_cloud_storage_bucket: Optional[str] = Field(
        None, description='Google Cloud Storage bucket name', examples=['my-bucket']
    )
    google_cloud_storage_credentials_json: Optional[str] = Field(
        None,
        description='A JSON file that contains the private key. To generate see https://cloud.google.com/storage/docs/json_api/v1/how-tos/authorizing#APIKey',
    )
    google_cloud_storage_project_id: Optional[str] = Field(
        None, description='Google Cloud Project ID', examples=['my-project']
    )
    hostname: Optional[str] = Field(
        None, description='Hostname or IP address', examples=['remote-server.com']
    )
    max_connections: Optional[int] = Field(
        None,
        description='Max number of parallel connections.  Ignored for S3 connections (we will parallelize these as much as possible).',
        examples=[1],
    )
    name: Optional[str] = Field(
        None,
        description='Internal name for your reference',
        examples=['My Remote server'],
    )
    one_drive_account_type: Optional[OneDriveAccountType] = Field(
        None,
        description='Either personal or business_other account types',
        examples=['personal'],
    )
    password: Optional[str] = Field(None, description='Password if needed.')
    pin_to_site_region: Optional[bool] = Field(
        None,
        description='If true, we will ensure that all communications with this remote server are made through the primary region of the site.  This setting can also be overridden by a sitewide setting which will force it to true.',
        examples=[True],
    )
    port: Optional[int] = Field(
        None, description='Port for remote server.  Not needed for S3.', examples=[1]
    )
    private_key: Optional[str] = Field(None, description='Private key if needed.')
    private_key_passphrase: Optional[str] = Field(
        None, description='Passphrase for private key if needed.'
    )
    rackspace_api_key: Optional[str] = Field(
        None, description='Rackspace API key from the Rackspace Cloud Control Panel.'
    )
    rackspace_container: Optional[str] = Field(
        None,
        description='The name of the container (top level directory) where files will sync.',
        examples=['my-container'],
    )
    rackspace_region: Optional[str] = Field(
        None,
        description='Three letter airport code for Rackspace region. See https://support.rackspace.com/how-to/about-regions/',
        examples=['dfw'],
    )
    rackspace_username: Optional[str] = Field(
        None,
        description='Rackspace username used to login to the Rackspace Cloud Control Panel.',
        examples=['rackspaceuser'],
    )
    reset_authentication: Optional[bool] = Field(
        None, description='Reset authenticated account'
    )
    s3_bucket: Optional[str] = Field(
        None, description='S3 bucket name', examples=['my-bucket']
    )
    s3_compatible_access_key: Optional[str] = Field(
        None, description='S3-compatible Access Key.', examples=['example']
    )
    s3_compatible_bucket: Optional[str] = Field(
        None, description='S3-compatible Bucket name', examples=['my-bucket']
    )
    s3_compatible_endpoint: Optional[str] = Field(
        None, description='S3-compatible endpoint', examples=['mys3platform.com']
    )
    s3_compatible_region: Optional[str] = Field(
        None, description='S3-compatible endpoint', examples=['us-east-1']
    )
    s3_compatible_secret_key: Optional[str] = Field(
        None, description='S3-compatible secret key'
    )
    s3_region: Optional[str] = Field(
        None, description='S3 region', examples=['us-east-1']
    )
    server_certificate: Optional[ServerCertificate] = Field(
        None, description='Remote server certificate', examples=['require_match']
    )
    server_host_key: Optional[str] = Field(
        None,
        description='Remote server SSH Host Key. If provided, we will require that the server host key matches the provided key. Uses OpenSSH format similar to what would go into ~/.ssh/known_hosts',
        examples=['[public key]'],
    )
    server_type: Optional[ServerType] = Field(
        None, description='Remote server type.', examples=['s3']
    )
    ssl: Optional[Ssl] = Field(
        None, description='Should we require SSL?', examples=['if_available']
    )
    ssl_certificate: Optional[str] = Field(None, description='SSL client certificate.')
    username: Optional[str] = Field(
        None,
        description='Remote server username.  Not needed for S3 buckets.',
        examples=['user'],
    )
    wasabi_access_key: Optional[str] = Field(
        None, description='Wasabi access key.', examples=['example']
    )
    wasabi_bucket: Optional[str] = Field(
        None, description='Wasabi Bucket name', examples=['my-bucket']
    )
    wasabi_region: Optional[str] = Field(
        None, description='Wasabi region', examples=['us-west-1']
    )
    wasabi_secret_key: Optional[str] = Field(None, description='Wasabi secret key.')


class RemoteServersIdPatchRequest(BaseModel):
    aws_access_key: Optional[str] = Field(
        None, description='AWS Access Key.', examples=['example']
    )
    aws_secret_key: Optional[str] = Field(None, description='AWS secret key.')
    azure_blob_storage_access_key: Optional[str] = Field(
        None, description='Azure Blob Storage secret key.'
    )
    azure_blob_storage_account: Optional[str] = Field(
        None,
        description='Azure Blob Storage Account name',
        examples=['storage-account-name'],
    )
    azure_blob_storage_container: Optional[str] = Field(
        None,
        description='Azure Blob Storage Container name',
        examples=['container-name'],
    )
    azure_blob_storage_sas_token: Optional[str] = Field(
        None,
        description='Shared Access Signature (SAS) token',
        examples=['storage-sas-token'],
    )
    azure_files_storage_access_key: Optional[str] = Field(
        None, description='Azure File Storage access key.'
    )
    azure_files_storage_account: Optional[str] = Field(
        None,
        description='Azure File Storage Account name',
        examples=['storage-account-name'],
    )
    azure_files_storage_sas_token: Optional[str] = Field(
        None,
        description='Shared Access Signature (SAS) token',
        examples=['storage-sas-token'],
    )
    azure_files_storage_share_name: Optional[str] = Field(
        None, description='Azure File Storage Share name', examples=['share-name']
    )
    backblaze_b2_application_key: Optional[str] = Field(
        None, description='Backblaze B2 Cloud Storage applicationKey.'
    )
    backblaze_b2_bucket: Optional[str] = Field(
        None,
        description='Backblaze B2 Cloud Storage Bucket name',
        examples=['my-bucket'],
    )
    backblaze_b2_key_id: Optional[str] = Field(
        None, description='Backblaze B2 Cloud Storage keyID.'
    )
    backblaze_b2_s3_endpoint: Optional[str] = Field(
        None,
        description='Backblaze B2 Cloud Storage S3 Endpoint',
        examples=['s3.us-west-001.backblazeb2.com'],
    )
    enable_dedicated_ips: Optional[bool] = Field(
        None,
        description='`true` if remote server only accepts connections from dedicated IPs',
        examples=[True],
    )
    filebase_access_key: Optional[str] = Field(
        None, description='Filebase Access Key.', examples=['example']
    )
    filebase_bucket: Optional[str] = Field(
        None, description='Filebase Bucket name', examples=['my-bucket']
    )
    filebase_secret_key: Optional[str] = Field(None, description='Filebase secret key')
    files_agent_permission_set: Optional[FilesAgentPermissionSet] = Field(
        None,
        description='Local permissions for files agent. read_only, write_only, or read_write',
        examples=['read_write'],
    )
    files_agent_root: Optional[str] = Field(
        None, description='Agent local root path', examples=['example']
    )
    google_cloud_storage_bucket: Optional[str] = Field(
        None, description='Google Cloud Storage bucket name', examples=['my-bucket']
    )
    google_cloud_storage_credentials_json: Optional[str] = Field(
        None,
        description='A JSON file that contains the private key. To generate see https://cloud.google.com/storage/docs/json_api/v1/how-tos/authorizing#APIKey',
    )
    google_cloud_storage_project_id: Optional[str] = Field(
        None, description='Google Cloud Project ID', examples=['my-project']
    )
    hostname: Optional[str] = Field(
        None, description='Hostname or IP address', examples=['remote-server.com']
    )
    max_connections: Optional[int] = Field(
        None,
        description='Max number of parallel connections.  Ignored for S3 connections (we will parallelize these as much as possible).',
        examples=[1],
    )
    name: Optional[str] = Field(
        None,
        description='Internal name for your reference',
        examples=['My Remote server'],
    )
    one_drive_account_type: Optional[OneDriveAccountType] = Field(
        None,
        description='Either personal or business_other account types',
        examples=['personal'],
    )
    password: Optional[str] = Field(None, description='Password if needed.')
    pin_to_site_region: Optional[bool] = Field(
        None,
        description='If true, we will ensure that all communications with this remote server are made through the primary region of the site.  This setting can also be overridden by a sitewide setting which will force it to true.',
        examples=[True],
    )
    port: Optional[int] = Field(
        None, description='Port for remote server.  Not needed for S3.', examples=[1]
    )
    private_key: Optional[str] = Field(None, description='Private key if needed.')
    private_key_passphrase: Optional[str] = Field(
        None, description='Passphrase for private key if needed.'
    )
    rackspace_api_key: Optional[str] = Field(
        None, description='Rackspace API key from the Rackspace Cloud Control Panel.'
    )
    rackspace_container: Optional[str] = Field(
        None,
        description='The name of the container (top level directory) where files will sync.',
        examples=['my-container'],
    )
    rackspace_region: Optional[str] = Field(
        None,
        description='Three letter airport code for Rackspace region. See https://support.rackspace.com/how-to/about-regions/',
        examples=['dfw'],
    )
    rackspace_username: Optional[str] = Field(
        None,
        description='Rackspace username used to login to the Rackspace Cloud Control Panel.',
        examples=['rackspaceuser'],
    )
    reset_authentication: Optional[bool] = Field(
        None, description='Reset authenticated account'
    )
    s3_bucket: Optional[str] = Field(
        None, description='S3 bucket name', examples=['my-bucket']
    )
    s3_compatible_access_key: Optional[str] = Field(
        None, description='S3-compatible Access Key.', examples=['example']
    )
    s3_compatible_bucket: Optional[str] = Field(
        None, description='S3-compatible Bucket name', examples=['my-bucket']
    )
    s3_compatible_endpoint: Optional[str] = Field(
        None, description='S3-compatible endpoint', examples=['mys3platform.com']
    )
    s3_compatible_region: Optional[str] = Field(
        None, description='S3-compatible endpoint', examples=['us-east-1']
    )
    s3_compatible_secret_key: Optional[str] = Field(
        None, description='S3-compatible secret key'
    )
    s3_region: Optional[str] = Field(
        None, description='S3 region', examples=['us-east-1']
    )
    server_certificate: Optional[ServerCertificate] = Field(
        None, description='Remote server certificate', examples=['require_match']
    )
    server_host_key: Optional[str] = Field(
        None,
        description='Remote server SSH Host Key. If provided, we will require that the server host key matches the provided key. Uses OpenSSH format similar to what would go into ~/.ssh/known_hosts',
        examples=['[public key]'],
    )
    server_type: Optional[ServerType] = Field(
        None, description='Remote server type.', examples=['s3']
    )
    ssl: Optional[Ssl] = Field(
        None, description='Should we require SSL?', examples=['if_available']
    )
    ssl_certificate: Optional[str] = Field(None, description='SSL client certificate.')
    username: Optional[str] = Field(
        None,
        description='Remote server username.  Not needed for S3 buckets.',
        examples=['user'],
    )
    wasabi_access_key: Optional[str] = Field(
        None, description='Wasabi access key.', examples=['example']
    )
    wasabi_bucket: Optional[str] = Field(
        None, description='Wasabi Bucket name', examples=['my-bucket']
    )
    wasabi_region: Optional[str] = Field(
        None, description='Wasabi region', examples=['us-west-1']
    )
    wasabi_secret_key: Optional[str] = Field(None, description='Wasabi secret key.')


class RemoteServersIdConfigurationFilePostRequest(BaseModel):
    api_token: Optional[str] = Field(
        None, description='Files Agent API Token', examples=['example']
    )
    config_version: Optional[str] = Field(
        None, description='agent config version', examples=['example']
    )
    hostname: Optional[str] = Field(None, examples=['example'])
    permission_set: Optional[str] = Field(None, examples=['full'])
    port: Optional[int] = Field(
        None, description='Incoming port for files agent connections', examples=[1]
    )
    private_key: Optional[str] = Field(
        None, description='private key', examples=['example']
    )
    public_key: Optional[str] = Field(
        None, description='public key', examples=['example']
    )
    root: Optional[str] = Field(
        None, description='Agent local root path', examples=['example']
    )
    server_host_key: Optional[str] = Field(None, examples=['example'])
    status: Optional[str] = Field(
        None, description='either running or shutdown', examples=['example']
    )
    subdomain: Optional[str] = Field(None, examples=['example'])


class RequestsGetResponse(RootModel[List[RequestEntity]]):
    root: List[RequestEntity]


class RequestsPostRequest(BaseModel):
    destination: str = Field(
        ..., description='Destination filename (without extension) to request.'
    )
    group_ids: Optional[str] = Field(
        None,
        description='A list of group IDs to request the file from. If sent as a string, it should be comma-delimited.',
    )
    path: str = Field(..., description='Folder path on which to request the file.')
    user_ids: Optional[str] = Field(
        None,
        description='A list of user IDs to request the file from. If sent as a string, it should be comma-delimited.',
    )


class RequestsFoldersPathGetResponse(RootModel[List[RequestEntity]]):
    root: List[RequestEntity]


class SessionsPostRequest(BaseModel):
    otp: Optional[str] = Field(
        None,
        description='If this user has a 2FA device, provide its OTP or code here.',
        examples=['123456'],
    )
    partial_session_id: Optional[str] = Field(
        None, description='Identifier for a partially-completed login'
    )
    password: Optional[str] = Field(
        None, description='Password for sign in', examples=['password']
    )
    username: Optional[str] = Field(
        None, description='Username to sign in as', examples=['username']
    )


class SettingsChangesGetResponse(RootModel[List[SettingsChangeEntity]]):
    root: List[SettingsChangeEntity]


class SftpHostKeysGetResponse(RootModel[List[SftpHostKeyEntity]]):
    root: List[SftpHostKeyEntity]


class SftpHostKeysPostRequest(BaseModel):
    name: Optional[str] = Field(
        None, description='The friendly name of this SFTP Host Key.'
    )
    private_key: Optional[str] = Field(None, description='The private key data.')


class SftpHostKeysIdPatchRequest(BaseModel):
    name: Optional[str] = Field(
        None, description='The friendly name of this SFTP Host Key.'
    )
    private_key: Optional[str] = Field(None, description='The private key data.')


class SitePatchRequest(BaseModel):
    active_sftp_host_key_id: Optional[int] = Field(
        None, description='Id of the currently selected custom SFTP Host Key'
    )
    allow_bundle_names: Optional[bool] = Field(
        None, description='Are manual Bundle names allowed?'
    )
    allowed_2fa_method_bypass_for_ftp_sftp_dav: Optional[bool] = Field(
        None,
        description='Are users allowed to configure their two factor authentication to be bypassed for FTP/SFTP/WebDAV?',
    )
    allowed_2fa_method_sms: Optional[bool] = Field(
        None, description='Is SMS two factor authentication allowed?'
    )
    allowed_2fa_method_totp: Optional[bool] = Field(
        None, description='Is TOTP two factor authentication allowed?'
    )
    allowed_2fa_method_u2f: Optional[bool] = Field(
        None, description='Is U2F two factor authentication allowed?'
    )
    allowed_2fa_method_webauthn: Optional[bool] = Field(
        None, description='Is WebAuthn two factor authentication allowed?'
    )
    allowed_2fa_method_yubi: Optional[bool] = Field(
        None, description='Is yubikey two factor authentication allowed?'
    )
    allowed_countries: Optional[str] = Field(
        None, description='Comma seperated list of allowed Country codes'
    )
    allowed_ips: Optional[str] = Field(None, description='List of allowed IP addresses')
    ask_about_overwrites: Optional[bool] = Field(
        None,
        description='If false, rename conflicting files instead of asking for overwrite confirmation.  Only applies to web interface.',
    )
    bundle_activity_notifications: Optional[str] = Field(
        None, description='Do Bundle owners receive activity notifications?'
    )
    bundle_expiration: Optional[int] = Field(
        None, description='Site-wide Bundle expiration in days'
    )
    bundle_password_required: Optional[bool] = Field(
        None, description='Do Bundles require password protection?'
    )
    bundle_registration_notifications: Optional[str] = Field(
        None, description='Do Bundle owners receive registration notification?'
    )
    bundle_require_share_recipient: Optional[bool] = Field(
        None, description='Do Bundles require recipients for sharing?'
    )
    bundle_upload_receipt_notifications: Optional[str] = Field(
        None,
        description='Do Bundle uploaders receive upload confirmation notifications?',
    )
    bundle_watermark_attachment_delete: Optional[bool] = Field(
        None,
        description='If true, will delete the file stored in bundle_watermark_attachment',
    )
    bundle_watermark_attachment_file: Optional[bytes] = None
    bundle_watermark_value: Optional[Dict[str, Any]] = Field(
        None,
        description='Preview watermark settings applied to all bundle items. Uses the same keys as Behavior.value',
    )
    color2_left: Optional[str] = Field(None, description='Page link and button color')
    color2_link: Optional[str] = Field(None, description='Top bar link color')
    color2_text: Optional[str] = Field(None, description='Page link and button color')
    color2_top: Optional[str] = Field(None, description='Top bar background color')
    color2_top_text: Optional[str] = Field(None, description='Top bar text color')
    custom_namespace: Optional[bool] = Field(
        None, description='Is this site using a custom namespace for users?'
    )
    days_to_retain_backups: Optional[int] = Field(
        None, description='Number of days to keep deleted files'
    )
    default_time_zone: Optional[str] = Field(None, description='Site default time zone')
    desktop_app: Optional[bool] = Field(None, description='Is the desktop app enabled?')
    desktop_app_session_ip_pinning: Optional[bool] = Field(
        None, description='Is desktop app session IP pinning enabled?'
    )
    desktop_app_session_lifetime: Optional[int] = Field(
        None, description='Desktop app session lifetime (in hours)'
    )
    disable_2fa_with_delay: Optional[bool] = Field(
        None,
        description='If set to true, we will begin the process of disabling 2FA on this site.',
    )
    disable_files_certificate_generation: Optional[bool] = Field(
        None,
        description='If set, Files.com will not set the CAA records required to generate future SSL certificates for this domain.',
    )
    disable_password_reset: Optional[bool] = Field(
        None, description='Is password reset disabled?'
    )
    disable_users_from_inactivity_period_days: Optional[int] = Field(
        None,
        description='If greater than zero, users will unable to login if they do not show activity within this number of days.',
    )
    disallowed_countries: Optional[str] = Field(
        None, description='Comma seperated list of disallowed Country codes'
    )
    domain: Optional[str] = Field(None, description='Custom domain')
    domain_hsts_header: Optional[bool] = Field(
        None,
        description='Send HSTS (HTTP Strict Transport Security) header when visitors access the site via a custom domain?',
    )
    domain_letsencrypt_chain: Optional[str] = Field(
        None,
        description='Letsencrypt chain to use when registering SSL Certificate for domain.',
    )
    email: Optional[str] = Field(None, description='Main email for this site')
    folder_permissions_groups_only: Optional[bool] = Field(
        None,
        description='If true, permissions for this site must be bound to a group (not a user). Otherwise, permissions must be bound to a user.',
    )
    ftp_enabled: Optional[bool] = Field(None, description='Is FTP enabled?')
    icon128_delete: Optional[bool] = Field(
        None, description='If true, will delete the file stored in icon128'
    )
    icon128_file: Optional[bytes] = None
    icon16_delete: Optional[bool] = Field(
        None, description='If true, will delete the file stored in icon16'
    )
    icon16_file: Optional[bytes] = None
    icon32_delete: Optional[bool] = Field(
        None, description='If true, will delete the file stored in icon32'
    )
    icon32_file: Optional[bytes] = None
    icon48_delete: Optional[bool] = Field(
        None, description='If true, will delete the file stored in icon48'
    )
    icon48_file: Optional[bytes] = None
    immutable_files: Optional[bool] = Field(
        None, description='Are files protected from modification?'
    )
    include_password_in_welcome_email: Optional[bool] = Field(
        None, description='Include password in emails to new users?'
    )
    language: Optional[str] = Field(None, description='Site default language')
    ldap_base_dn: Optional[str] = Field(
        None, description='Base DN for looking up users in LDAP server'
    )
    ldap_domain: Optional[str] = Field(
        None, description='Domain name that will be appended to usernames'
    )
    ldap_enabled: Optional[bool] = Field(
        None, description='Main LDAP setting: is LDAP enabled?'
    )
    ldap_group_action: Optional[str] = Field(
        None, description='Should we sync groups from LDAP server?'
    )
    ldap_group_exclusion: Optional[str] = Field(
        None,
        description='Comma or newline separated list of group names (with optional wildcards) to exclude when syncing.',
    )
    ldap_group_inclusion: Optional[str] = Field(
        None,
        description='Comma or newline separated list of group names (with optional wildcards) to include when syncing.',
    )
    ldap_host: Optional[str] = Field(None, description='LDAP host')
    ldap_host_2: Optional[str] = Field(None, description='LDAP backup host')
    ldap_host_3: Optional[str] = Field(None, description='LDAP backup host')
    ldap_password_change: Optional[str] = Field(None, description='New LDAP password.')
    ldap_password_change_confirmation: Optional[str] = Field(
        None, description='Confirm new LDAP password.'
    )
    ldap_port: Optional[int] = Field(None, description='LDAP port')
    ldap_secure: Optional[bool] = Field(None, description='Use secure LDAP?')
    ldap_type: Optional[str] = Field(None, description='LDAP type')
    ldap_user_action: Optional[str] = Field(
        None, description='Should we sync users from LDAP server?'
    )
    ldap_user_include_groups: Optional[str] = Field(
        None,
        description='Comma or newline separated list of group names (with optional wildcards) - if provided, only users in these groups will be added or synced.',
    )
    ldap_username: Optional[str] = Field(
        None, description='Username for signing in to LDAP server.'
    )
    ldap_username_field: Optional[str] = Field(None, description='LDAP username field')
    login_help_text: Optional[str] = Field(None, description='Login help text')
    logo_delete: Optional[bool] = Field(
        None, description='If true, will delete the file stored in logo'
    )
    logo_file: Optional[bytes] = None
    max_prior_passwords: Optional[int] = Field(
        None, description='Number of prior passwords to disallow'
    )
    mobile_app: Optional[bool] = Field(None, description='Is the mobile app enabled?')
    mobile_app_session_ip_pinning: Optional[bool] = Field(
        None, description='Is mobile app session IP pinning enabled?'
    )
    mobile_app_session_lifetime: Optional[int] = Field(
        None, description='Mobile app session lifetime (in hours)'
    )
    motd_text: Optional[str] = Field(
        None, description='A message to show users when they connect via FTP or SFTP.'
    )
    motd_use_for_ftp: Optional[bool] = Field(
        None, description='Show message to users connecting via FTP'
    )
    motd_use_for_sftp: Optional[bool] = Field(
        None, description='Show message to users connecting via SFTP'
    )
    name: Optional[str] = Field(None, description='Site name')
    non_sso_groups_allowed: Optional[bool] = Field(
        None,
        description='If true, groups can be manually created / modified / deleted by Site Admins. Otherwise, groups can only be managed via your SSO provider.',
    )
    non_sso_users_allowed: Optional[bool] = Field(
        None,
        description='If true, users can be manually created / modified / deleted by Site Admins. Otherwise, users can only be managed via your SSO provider.',
    )
    office_integration_available: Optional[bool] = Field(
        None, description='Allow users to use Office for the web?'
    )
    office_integration_type: Optional[str] = Field(
        None,
        description='Office integration application used to edit and view the MS Office documents',
    )
    opt_out_global: Optional[bool] = Field(
        None, description='Use servers in the USA only?'
    )
    overage_notify: Optional[bool] = Field(
        None, description='Notify site email of overages?'
    )
    password_min_length: Optional[int] = Field(
        None, description='Shortest password length for users'
    )
    password_require_letter: Optional[bool] = Field(
        None, description='Require a letter in passwords?'
    )
    password_require_mixed: Optional[bool] = Field(
        None, description='Require lower and upper case letters in passwords?'
    )
    password_require_number: Optional[bool] = Field(
        None, description='Require a number in passwords?'
    )
    password_require_special: Optional[bool] = Field(
        None, description='Require special characters in password?'
    )
    password_require_unbreached: Optional[bool] = Field(
        None,
        description='Require passwords that have not been previously breached? (see https://haveibeenpwned.com/)',
    )
    password_requirements_apply_to_bundles: Optional[bool] = Field(
        None,
        description="Require bundles' passwords, and passwords for other items (inboxes, public shares, etc.) to conform to the same requirements as users' passwords?",
    )
    password_validity_days: Optional[int] = Field(
        None, description='Number of days password is valid'
    )
    pin_all_remote_servers_to_site_region: Optional[bool] = Field(
        None,
        description='If true, we will ensure that all internal communications with any remote server are made through the primary region of the site. This setting overrides individual remote server settings.',
    )
    reply_to_email: Optional[str] = Field(
        None, description='Reply-to email for this site'
    )
    require_2fa: Optional[bool] = Field(
        None, description='Require two-factor authentication for all users?'
    )
    require_2fa_user_type: Optional[str] = Field(
        None,
        description='What type of user is required to use two-factor authentication (when require_2fa is set to `true` for this site)?',
    )
    session_expiry: Optional[float] = Field(None, description='Session expiry in hours')
    session_expiry_minutes: Optional[int] = Field(
        None, description='Session expiry in minutes'
    )
    session_pinned_by_ip: Optional[bool] = Field(
        None,
        description='Are sessions locked to the same IP? (i.e. do users need to log in again if they change IPs?)',
    )
    sftp_enabled: Optional[bool] = Field(None, description='Is SFTP enabled?')
    sftp_host_key_type: Optional[str] = Field(None, description='Sftp Host Key Type')
    sftp_insecure_ciphers: Optional[bool] = Field(
        None,
        description='Are Insecure Ciphers allowed for SFTP?  Note:  Settting TLS Disabled -> True will always allow insecure ciphers for SFTP as well.  Enabling this is insecure.',
    )
    sftp_user_root_enabled: Optional[bool] = Field(
        None, description='Use user FTP roots also for SFTP?'
    )
    sharing_enabled: Optional[bool] = Field(None, description='Allow bundle creation')
    show_request_access_link: Optional[bool] = Field(
        None,
        description='Show request access link for users without access?  Currently unused.',
    )
    site_footer: Optional[str] = Field(None, description='Custom site footer text')
    site_header: Optional[str] = Field(None, description='Custom site header text')
    smtp_address: Optional[str] = Field(None, description='SMTP server hostname or IP')
    smtp_authentication: Optional[str] = Field(
        None, description='SMTP server authentication type'
    )
    smtp_from: Optional[str] = Field(
        None, description='From address to use when mailing through custom SMTP'
    )
    smtp_password: Optional[str] = Field(None, description='Password for SMTP server.')
    smtp_port: Optional[int] = Field(None, description='SMTP server port')
    smtp_username: Optional[str] = Field(None, description='SMTP server username')
    ssl_required: Optional[bool] = Field(
        None, description='Is SSL required?  Disabling this is insecure.'
    )
    subdomain: Optional[str] = Field(None, description='Site subdomain')
    tls_disabled: Optional[bool] = Field(
        None,
        description='Are Insecure TLS and SFTP Ciphers allowed?  Enabling this is insecure.',
    )
    uploads_via_email_authentication: Optional[bool] = Field(
        None,
        description='Do incoming emails in the Inboxes require checking for SPF/DKIM/DMARC?',
    )
    use_provided_modified_at: Optional[bool] = Field(
        None,
        description='Allow uploaders to set `provided_modified_at` for uploaded files?',
    )
    user_lockout: Optional[bool] = Field(
        None, description='Will users be locked out after incorrect login attempts?'
    )
    user_lockout_lock_period: Optional[int] = Field(
        None, description='How many hours to lock user out for failed password?'
    )
    user_lockout_tries: Optional[int] = Field(
        None,
        description='Number of login tries within `user_lockout_within` hours before users are locked out',
    )
    user_lockout_within: Optional[int] = Field(
        None, description='Number of hours for user lockout window'
    )
    user_requests_enabled: Optional[bool] = Field(
        None, description='Enable User Requests feature'
    )
    user_requests_notify_admins: Optional[bool] = Field(
        None, description='Send email to site admins when a user request is received?'
    )
    welcome_custom_text: Optional[str] = Field(
        None, description='Custom text send in user welcome email'
    )
    welcome_email_cc: Optional[str] = Field(
        None, description='Include this email in welcome emails if enabled'
    )
    welcome_email_enabled: Optional[bool] = Field(
        None, description='Will the welcome email be sent to new users?'
    )
    welcome_email_subject: Optional[str] = Field(
        None, description='Include this email subject in welcome emails if enabled'
    )
    welcome_screen: Optional[str] = Field(
        None, description='Does the welcome screen appear?'
    )
    windows_mode_ftp: Optional[bool] = Field(
        None, description='Does FTP user Windows emulation mode?'
    )


class SiteApiKeysGetResponse(RootModel[List[ApiKeyEntity]]):
    root: List[ApiKeyEntity]


class SiteApiKeysPostRequest(BaseModel):
    description: Optional[str] = Field(
        None, description='User-supplied description of API key.', examples=['example']
    )
    expires_at: Optional[datetime] = Field(
        None, description='API Key expiration date', examples=['2000-01-01T01:00:00Z']
    )
    name: Optional[str] = Field(
        None,
        description='Internal name for the API Key.  For your use.',
        examples=['My Main API Key'],
    )
    path: Optional[str] = Field(
        None,
        description='Folder path restriction for this api key.',
        examples=['shared/docs'],
    )
    permission_set: Optional[PermissionSet] = Field(
        'full',
        description='Permissions for this API Key.  Keys with the `desktop_app` permission set only have the ability to do the functions provided in our Desktop App (File and Share Link operations).  Additional permission sets may become available in the future, such as for a Site Admin to give a key with no administrator privileges.  If you have ideas for permission sets, please let us know.',
        examples=['full'],
    )
    user_id: Optional[int] = Field(
        None,
        description="User ID.  Provide a value of `0` to operate the current session's user.",
    )


class SiteDnsRecordsGetResponse(RootModel[List[DnsRecordEntity]]):
    root: List[DnsRecordEntity]


class SiteIpAddressesGetResponse(RootModel[List[IpAddressEntity]]):
    root: List[IpAddressEntity]


class SiteTestWebhookPostRequest(BaseModel):
    action: Optional[str] = Field(
        None, description='action for test body', examples=['test']
    )
    body: Optional[Dict[str, Any]] = Field(
        None,
        description='Additional body parameters.',
        examples=[{'test-param': 'testvalue'}],
    )
    encoding: Optional[str] = Field(
        None,
        description='HTTP encoding method.  Can be JSON, XML, or RAW (form data).',
        examples=['RAW'],
    )
    headers: Optional[Dict[str, Any]] = Field(
        None,
        description='Additional request headers.',
        examples=[{'x-test-header': 'testvalue'}],
    )
    method: Optional[str] = Field(
        None, description='HTTP method(GET or POST).', examples=['GET']
    )
    url: str = Field(
        ...,
        description='URL for testing the webhook.',
        examples=['https://www.site.com/...'],
    )


class SsoStrategiesGetResponse(RootModel[List[SsoStrategyEntity]]):
    root: List[SsoStrategyEntity]


class StylesPathPatchRequest(BaseModel):
    file: bytes = Field(..., description='Logo for custom branding.')


class UsageDailySnapshotsGetResponse(RootModel[List[UsageDailySnapshotEntity]]):
    root: List[UsageDailySnapshotEntity]


class UsageSnapshotsGetResponse(RootModel[List[UsageSnapshotEntity]]):
    root: List[UsageSnapshotEntity]


class UserPatchRequest(BaseModel):
    allowed_ips: Optional[str] = Field(
        None,
        description='A list of allowed IPs if applicable.  Newline delimited',
        examples=['127.0.0.1'],
    )
    announcements_read: Optional[bool] = Field(
        None,
        description='Signifies that the user has read all the announcements in the UI.',
    )
    attachments_permission: Optional[bool] = Field(
        None,
        description='DEPRECATED: Can the user create Bundles (aka Share Links)? Use the bundle permission instead.',
        examples=[True],
    )
    authenticate_until: Optional[datetime] = Field(
        None,
        description='Scheduled Date/Time at which user will be deactivated',
        examples=['2000-01-01T01:00:00Z'],
    )
    authentication_method: Optional[AuthenticationMethod] = Field(
        None, description='How is this user authenticated?', examples=['password']
    )
    avatar_delete: Optional[bool] = Field(
        None, description='If true, the avatar will be deleted.'
    )
    avatar_file: Optional[bytes] = Field(
        None, description='An image file for your user avatar.'
    )
    billing_permission: Optional[bool] = Field(
        None,
        description='Allow this user to perform operations on the account, payments, and invoices?',
    )
    bypass_inactive_disable: Optional[bool] = Field(
        None, description='Exempt this user from being disabled based on inactivity?'
    )
    bypass_site_allowed_ips: Optional[bool] = Field(
        None, description='Allow this user to skip site-wide IP blacklists?'
    )
    change_password: Optional[str] = Field(
        None, description='Used for changing a password on an existing user.'
    )
    change_password_confirmation: Optional[str] = Field(
        None,
        description='Optional, but if provided, we will ensure that it matches the value sent in `change_password`.',
    )
    company: Optional[str] = Field(
        None, description="User's company", examples=['ACME Corp.']
    )
    dav_permission: Optional[bool] = Field(
        None, description='Can the user connect with WebDAV?', examples=[True]
    )
    disabled: Optional[bool] = Field(
        None,
        description='Is user disabled? Disabled users cannot log in, and do not count for billing purposes.  Users can be automatically disabled after an inactivity period via a Site setting.',
        examples=[True],
    )
    email: Optional[str] = Field(None, description="User's email.")
    ftp_permission: Optional[bool] = Field(
        None, description='Can the user access with FTP/FTPS?', examples=[True]
    )
    grant_permission: Optional[str] = Field(
        None,
        description='Permission to grant on the user root.  Can be blank or `full`, `read`, `write`, `list`, or `history`.',
    )
    group_id: Optional[int] = Field(
        None, description='Group ID to associate this user with.'
    )
    group_ids: Optional[str] = Field(
        None,
        description='A list of group ids to associate this user with.  Comma delimited.',
    )
    header_text: Optional[str] = Field(
        None,
        description='Text to display to the user in the header of the UI',
        examples=['User-specific message.'],
    )
    imported_password_hash: Optional[str] = Field(
        None,
        description="Pre-calculated hash of the user's password. If supplied, this will be used to authenticate the user on first login. Supported hash menthods are MD5, SHA1, and SHA256.",
    )
    language: Optional[str] = Field(
        None, description='Preferred language', examples=['en']
    )
    name: Optional[str] = Field(
        None, description="User's full name", examples=['John Doe']
    )
    notes: Optional[str] = Field(
        None,
        description='Any internal notes on the user',
        examples=['Internal notes on this user.'],
    )
    notification_daily_send_time: Optional[int] = Field(
        None,
        description='Hour of the day at which daily notifications should be sent. Can be in range 0 to 23',
        examples=[18],
    )
    office_integration_enabled: Optional[bool] = Field(
        None, description='Enable integration with Office for the web?', examples=[True]
    )
    password: Optional[str] = Field(None, description='User password.')
    password_confirmation: Optional[str] = Field(
        None,
        description='Optional, but if provided, we will ensure that it matches the value sent in `password`.',
    )
    password_validity_days: Optional[int] = Field(
        None,
        description='Number of days to allow user to use the same password',
        examples=[1],
    )
    receive_admin_alerts: Optional[bool] = Field(
        None,
        description='Should the user receive admin alerts such a certificate expiration notifications and overages?',
        examples=[True],
    )
    require_2fa: Optional[Require2fa] = Field(
        None, description='2FA required setting', examples=['always_require']
    )
    require_password_change: Optional[bool] = Field(
        None,
        description='Is a password change required upon next user login?',
        examples=[True],
    )
    restapi_permission: Optional[bool] = Field(
        None, description='Can this user access the REST API?', examples=[True]
    )
    self_managed: Optional[bool] = Field(
        None,
        description="Does this user manage it's own credentials or is it a shared/bot user?",
        examples=[True],
    )
    sftp_permission: Optional[bool] = Field(
        None, description='Can the user access with SFTP?', examples=[True]
    )
    site_admin: Optional[bool] = Field(
        None, description='Is the user an administrator for this site?', examples=[True]
    )
    skip_welcome_screen: Optional[bool] = Field(
        None, description='Skip Welcome page in the UI?', examples=[True]
    )
    ssl_required: Optional[SslRequired] = Field(
        None, description='SSL required setting', examples=['always_require']
    )
    sso_strategy_id: Optional[int] = Field(
        None,
        description='SSO (Single Sign On) strategy ID for the user, if applicable.',
        examples=[1],
    )
    subscribe_to_newsletter: Optional[bool] = Field(
        None, description='Is the user subscribed to the newsletter?', examples=[True]
    )
    time_zone: Optional[str] = Field(
        None, description='User time zone', examples=['Pacific Time (US & Canada)']
    )
    user_root: Optional[str] = Field(
        None,
        description='Root folder for FTP (and optionally SFTP if the appropriate site-wide setting is set.)  Note that this is not used for API, Desktop, or Web interface.',
        examples=['example'],
    )
    username: Optional[str] = Field(
        None, description="User's username", examples=['user']
    )


class UserApiKeysGetResponse(RootModel[List[ApiKeyEntity]]):
    root: List[ApiKeyEntity]


class UserApiKeysPostRequest(BaseModel):
    description: Optional[str] = Field(
        None, description='User-supplied description of API key.', examples=['example']
    )
    expires_at: Optional[datetime] = Field(
        None, description='API Key expiration date', examples=['2000-01-01T01:00:00Z']
    )
    name: Optional[str] = Field(
        None,
        description='Internal name for the API Key.  For your use.',
        examples=['My Main API Key'],
    )
    path: Optional[str] = Field(
        None,
        description='Folder path restriction for this api key.',
        examples=['shared/docs'],
    )
    permission_set: Optional[PermissionSet] = Field(
        'full',
        description='Permissions for this API Key.  Keys with the `desktop_app` permission set only have the ability to do the functions provided in our Desktop App (File and Share Link operations).  Additional permission sets may become available in the future, such as for a Site Admin to give a key with no administrator privileges.  If you have ideas for permission sets, please let us know.',
        examples=['full'],
    )
    user_id: Optional[int] = Field(
        None,
        description="User ID.  Provide a value of `0` to operate the current session's user.",
    )


class UserGroupsGetResponse(RootModel[List[GroupUserEntity]]):
    root: List[GroupUserEntity]


class UserPublicKeysGetResponse(RootModel[List[PublicKeyEntity]]):
    root: List[PublicKeyEntity]


class UserPublicKeysPostRequest(BaseModel):
    public_key: str = Field(..., description='Actual contents of SSH key.')
    title: str = Field(
        ..., description='Internal reference for key.', examples=['My Main Key']
    )
    user_id: Optional[int] = Field(
        None,
        description="User ID.  Provide a value of `0` to operate the current session's user.",
    )


class UserCipherUsesGetResponse(RootModel[List[UserCipherUseEntity]]):
    root: List[UserCipherUseEntity]


class UserRequestsGetResponse(RootModel[List[UserRequestEntity]]):
    root: List[UserRequestEntity]


class UserRequestsPostRequest(BaseModel):
    details: str = Field(..., description='Details of the user request')
    email: str = Field(..., description='Email of user requested')
    name: str = Field(..., description='Name of user requested')


class UsersGetResponse(RootModel[List[UserEntity]]):
    root: List[UserEntity]


class UsersPostRequest(BaseModel):
    allowed_ips: Optional[str] = Field(
        None,
        description='A list of allowed IPs if applicable.  Newline delimited',
        examples=['127.0.0.1'],
    )
    announcements_read: Optional[bool] = Field(
        None,
        description='Signifies that the user has read all the announcements in the UI.',
    )
    attachments_permission: Optional[bool] = Field(
        None,
        description='DEPRECATED: Can the user create Bundles (aka Share Links)? Use the bundle permission instead.',
        examples=[True],
    )
    authenticate_until: Optional[datetime] = Field(
        None,
        description='Scheduled Date/Time at which user will be deactivated',
        examples=['2000-01-01T01:00:00Z'],
    )
    authentication_method: Optional[AuthenticationMethod] = Field(
        None, description='How is this user authenticated?', examples=['password']
    )
    avatar_delete: Optional[bool] = Field(
        None, description='If true, the avatar will be deleted.'
    )
    avatar_file: Optional[bytes] = Field(
        None, description='An image file for your user avatar.'
    )
    billing_permission: Optional[bool] = Field(
        None,
        description='Allow this user to perform operations on the account, payments, and invoices?',
    )
    bypass_inactive_disable: Optional[bool] = Field(
        None, description='Exempt this user from being disabled based on inactivity?'
    )
    bypass_site_allowed_ips: Optional[bool] = Field(
        None, description='Allow this user to skip site-wide IP blacklists?'
    )
    change_password: Optional[str] = Field(
        None, description='Used for changing a password on an existing user.'
    )
    change_password_confirmation: Optional[str] = Field(
        None,
        description='Optional, but if provided, we will ensure that it matches the value sent in `change_password`.',
    )
    company: Optional[str] = Field(
        None, description="User's company", examples=['ACME Corp.']
    )
    dav_permission: Optional[bool] = Field(
        None, description='Can the user connect with WebDAV?', examples=[True]
    )
    disabled: Optional[bool] = Field(
        None,
        description='Is user disabled? Disabled users cannot log in, and do not count for billing purposes.  Users can be automatically disabled after an inactivity period via a Site setting.',
        examples=[True],
    )
    email: Optional[str] = Field(None, description="User's email.")
    ftp_permission: Optional[bool] = Field(
        None, description='Can the user access with FTP/FTPS?', examples=[True]
    )
    grant_permission: Optional[str] = Field(
        None,
        description='Permission to grant on the user root.  Can be blank or `full`, `read`, `write`, `list`, or `history`.',
    )
    group_id: Optional[int] = Field(
        None, description='Group ID to associate this user with.'
    )
    group_ids: Optional[str] = Field(
        None,
        description='A list of group ids to associate this user with.  Comma delimited.',
    )
    header_text: Optional[str] = Field(
        None,
        description='Text to display to the user in the header of the UI',
        examples=['User-specific message.'],
    )
    imported_password_hash: Optional[str] = Field(
        None,
        description="Pre-calculated hash of the user's password. If supplied, this will be used to authenticate the user on first login. Supported hash menthods are MD5, SHA1, and SHA256.",
    )
    language: Optional[str] = Field(
        None, description='Preferred language', examples=['en']
    )
    name: Optional[str] = Field(
        None, description="User's full name", examples=['John Doe']
    )
    notes: Optional[str] = Field(
        None,
        description='Any internal notes on the user',
        examples=['Internal notes on this user.'],
    )
    notification_daily_send_time: Optional[int] = Field(
        None,
        description='Hour of the day at which daily notifications should be sent. Can be in range 0 to 23',
        examples=[18],
    )
    office_integration_enabled: Optional[bool] = Field(
        None, description='Enable integration with Office for the web?', examples=[True]
    )
    password: Optional[str] = Field(None, description='User password.')
    password_confirmation: Optional[str] = Field(
        None,
        description='Optional, but if provided, we will ensure that it matches the value sent in `password`.',
    )
    password_validity_days: Optional[int] = Field(
        None,
        description='Number of days to allow user to use the same password',
        examples=[1],
    )
    receive_admin_alerts: Optional[bool] = Field(
        None,
        description='Should the user receive admin alerts such a certificate expiration notifications and overages?',
        examples=[True],
    )
    require_2fa: Optional[Require2fa] = Field(
        None, description='2FA required setting', examples=['always_require']
    )
    require_password_change: Optional[bool] = Field(
        None,
        description='Is a password change required upon next user login?',
        examples=[True],
    )
    restapi_permission: Optional[bool] = Field(
        None, description='Can this user access the REST API?', examples=[True]
    )
    self_managed: Optional[bool] = Field(
        None,
        description="Does this user manage it's own credentials or is it a shared/bot user?",
        examples=[True],
    )
    sftp_permission: Optional[bool] = Field(
        None, description='Can the user access with SFTP?', examples=[True]
    )
    site_admin: Optional[bool] = Field(
        None, description='Is the user an administrator for this site?', examples=[True]
    )
    skip_welcome_screen: Optional[bool] = Field(
        None, description='Skip Welcome page in the UI?', examples=[True]
    )
    ssl_required: Optional[SslRequired] = Field(
        None, description='SSL required setting', examples=['always_require']
    )
    sso_strategy_id: Optional[int] = Field(
        None,
        description='SSO (Single Sign On) strategy ID for the user, if applicable.',
        examples=[1],
    )
    subscribe_to_newsletter: Optional[bool] = Field(
        None, description='Is the user subscribed to the newsletter?', examples=[True]
    )
    time_zone: Optional[str] = Field(
        None, description='User time zone', examples=['Pacific Time (US & Canada)']
    )
    user_root: Optional[str] = Field(
        None,
        description='Root folder for FTP (and optionally SFTP if the appropriate site-wide setting is set.)  Note that this is not used for API, Desktop, or Web interface.',
        examples=['example'],
    )
    username: Optional[str] = Field(
        None, description="User's username", examples=['user']
    )


class UsersIdPatchRequest(BaseModel):
    allowed_ips: Optional[str] = Field(
        None,
        description='A list of allowed IPs if applicable.  Newline delimited',
        examples=['127.0.0.1'],
    )
    announcements_read: Optional[bool] = Field(
        None,
        description='Signifies that the user has read all the announcements in the UI.',
    )
    attachments_permission: Optional[bool] = Field(
        None,
        description='DEPRECATED: Can the user create Bundles (aka Share Links)? Use the bundle permission instead.',
        examples=[True],
    )
    authenticate_until: Optional[datetime] = Field(
        None,
        description='Scheduled Date/Time at which user will be deactivated',
        examples=['2000-01-01T01:00:00Z'],
    )
    authentication_method: Optional[AuthenticationMethod] = Field(
        None, description='How is this user authenticated?', examples=['password']
    )
    avatar_delete: Optional[bool] = Field(
        None, description='If true, the avatar will be deleted.'
    )
    avatar_file: Optional[bytes] = Field(
        None, description='An image file for your user avatar.'
    )
    billing_permission: Optional[bool] = Field(
        None,
        description='Allow this user to perform operations on the account, payments, and invoices?',
    )
    bypass_inactive_disable: Optional[bool] = Field(
        None, description='Exempt this user from being disabled based on inactivity?'
    )
    bypass_site_allowed_ips: Optional[bool] = Field(
        None, description='Allow this user to skip site-wide IP blacklists?'
    )
    change_password: Optional[str] = Field(
        None, description='Used for changing a password on an existing user.'
    )
    change_password_confirmation: Optional[str] = Field(
        None,
        description='Optional, but if provided, we will ensure that it matches the value sent in `change_password`.',
    )
    company: Optional[str] = Field(
        None, description="User's company", examples=['ACME Corp.']
    )
    dav_permission: Optional[bool] = Field(
        None, description='Can the user connect with WebDAV?', examples=[True]
    )
    disabled: Optional[bool] = Field(
        None,
        description='Is user disabled? Disabled users cannot log in, and do not count for billing purposes.  Users can be automatically disabled after an inactivity period via a Site setting.',
        examples=[True],
    )
    email: Optional[str] = Field(None, description="User's email.")
    ftp_permission: Optional[bool] = Field(
        None, description='Can the user access with FTP/FTPS?', examples=[True]
    )
    grant_permission: Optional[str] = Field(
        None,
        description='Permission to grant on the user root.  Can be blank or `full`, `read`, `write`, `list`, or `history`.',
    )
    group_id: Optional[int] = Field(
        None, description='Group ID to associate this user with.'
    )
    group_ids: Optional[str] = Field(
        None,
        description='A list of group ids to associate this user with.  Comma delimited.',
    )
    header_text: Optional[str] = Field(
        None,
        description='Text to display to the user in the header of the UI',
        examples=['User-specific message.'],
    )
    imported_password_hash: Optional[str] = Field(
        None,
        description="Pre-calculated hash of the user's password. If supplied, this will be used to authenticate the user on first login. Supported hash menthods are MD5, SHA1, and SHA256.",
    )
    language: Optional[str] = Field(
        None, description='Preferred language', examples=['en']
    )
    name: Optional[str] = Field(
        None, description="User's full name", examples=['John Doe']
    )
    notes: Optional[str] = Field(
        None,
        description='Any internal notes on the user',
        examples=['Internal notes on this user.'],
    )
    notification_daily_send_time: Optional[int] = Field(
        None,
        description='Hour of the day at which daily notifications should be sent. Can be in range 0 to 23',
        examples=[18],
    )
    office_integration_enabled: Optional[bool] = Field(
        None, description='Enable integration with Office for the web?', examples=[True]
    )
    password: Optional[str] = Field(None, description='User password.')
    password_confirmation: Optional[str] = Field(
        None,
        description='Optional, but if provided, we will ensure that it matches the value sent in `password`.',
    )
    password_validity_days: Optional[int] = Field(
        None,
        description='Number of days to allow user to use the same password',
        examples=[1],
    )
    receive_admin_alerts: Optional[bool] = Field(
        None,
        description='Should the user receive admin alerts such a certificate expiration notifications and overages?',
        examples=[True],
    )
    require_2fa: Optional[Require2fa] = Field(
        None, description='2FA required setting', examples=['always_require']
    )
    require_password_change: Optional[bool] = Field(
        None,
        description='Is a password change required upon next user login?',
        examples=[True],
    )
    restapi_permission: Optional[bool] = Field(
        None, description='Can this user access the REST API?', examples=[True]
    )
    self_managed: Optional[bool] = Field(
        None,
        description="Does this user manage it's own credentials or is it a shared/bot user?",
        examples=[True],
    )
    sftp_permission: Optional[bool] = Field(
        None, description='Can the user access with SFTP?', examples=[True]
    )
    site_admin: Optional[bool] = Field(
        None, description='Is the user an administrator for this site?', examples=[True]
    )
    skip_welcome_screen: Optional[bool] = Field(
        None, description='Skip Welcome page in the UI?', examples=[True]
    )
    ssl_required: Optional[SslRequired] = Field(
        None, description='SSL required setting', examples=['always_require']
    )
    sso_strategy_id: Optional[int] = Field(
        None,
        description='SSO (Single Sign On) strategy ID for the user, if applicable.',
        examples=[1],
    )
    subscribe_to_newsletter: Optional[bool] = Field(
        None, description='Is the user subscribed to the newsletter?', examples=[True]
    )
    time_zone: Optional[str] = Field(
        None, description='User time zone', examples=['Pacific Time (US & Canada)']
    )
    user_root: Optional[str] = Field(
        None,
        description='Root folder for FTP (and optionally SFTP if the appropriate site-wide setting is set.)  Note that this is not used for API, Desktop, or Web interface.',
        examples=['example'],
    )
    username: Optional[str] = Field(
        None, description="User's username", examples=['user']
    )


class UsersUserIdApiKeysGetResponse(RootModel[List[ApiKeyEntity]]):
    root: List[ApiKeyEntity]


class UsersUserIdApiKeysPostRequest(BaseModel):
    description: Optional[str] = Field(
        None, description='User-supplied description of API key.', examples=['example']
    )
    expires_at: Optional[datetime] = Field(
        None, description='API Key expiration date', examples=['2000-01-01T01:00:00Z']
    )
    name: Optional[str] = Field(
        None,
        description='Internal name for the API Key.  For your use.',
        examples=['My Main API Key'],
    )
    path: Optional[str] = Field(
        None,
        description='Folder path restriction for this api key.',
        examples=['shared/docs'],
    )
    permission_set: Optional[PermissionSet] = Field(
        'full',
        description='Permissions for this API Key.  Keys with the `desktop_app` permission set only have the ability to do the functions provided in our Desktop App (File and Share Link operations).  Additional permission sets may become available in the future, such as for a Site Admin to give a key with no administrator privileges.  If you have ideas for permission sets, please let us know.',
        examples=['full'],
    )


class UsersUserIdCipherUsesGetResponse(RootModel[List[UserCipherUseEntity]]):
    root: List[UserCipherUseEntity]


class UsersUserIdGroupsGetResponse(RootModel[List[GroupUserEntity]]):
    root: List[GroupUserEntity]


class UsersUserIdPermissionsGetResponse(RootModel[List[PermissionEntity]]):
    root: List[PermissionEntity]


class UsersUserIdPublicKeysGetResponse(RootModel[List[PublicKeyEntity]]):
    root: List[PublicKeyEntity]


class UsersUserIdPublicKeysPostRequest(BaseModel):
    public_key: str = Field(..., description='Actual contents of SSH key.')
    title: str = Field(
        ..., description='Internal reference for key.', examples=['My Main Key']
    )


class WebhookTestsPostRequest(BaseModel):
    action: Optional[str] = Field(
        None, description='action for test body', examples=['test']
    )
    body: Optional[Dict[str, Any]] = Field(
        None,
        description='Additional body parameters.',
        examples=[{'test-param': 'testvalue'}],
    )
    encoding: Optional[str] = Field(
        None,
        description='HTTP encoding method.  Can be JSON, XML, or RAW (form data).',
        examples=['RAW'],
    )
    file_as_body: Optional[bool] = Field(
        None, description='Send the file data as the request body?'
    )
    file_form_field: Optional[str] = Field(
        None,
        description='Send the file data as a named parameter in the request POST body',
        examples=['upload_file_data'],
    )
    headers: Optional[Dict[str, Any]] = Field(
        None,
        description='Additional request headers.',
        examples=[{'x-test-header': 'testvalue'}],
    )
    method: Optional[str] = Field(
        None, description='HTTP method(GET or POST).', examples=['GET']
    )
    raw_body: Optional[str] = Field(
        None, description='raw body text', examples=['test body']
    )
    url: str = Field(
        ...,
        description='URL for testing the webhook.',
        examples=['https://www.site.com/...'],
    )


class AccountLineItemEntity(BaseModel):
    amount: Optional[float] = Field(None, description='Line item amount', examples=[1])
    balance: Optional[float] = Field(
        None, description='Line item balance', examples=[1]
    )
    created_at: Optional[datetime] = Field(
        None, description='Line item created at', examples=['2000-01-01T01:00:00Z']
    )
    currency: Optional[str] = Field(
        None, description='Line item currency', examples=['USD']
    )
    download_uri: Optional[str] = Field(
        None, description='Line item download uri', examples=['https://url...']
    )
    id: Optional[int] = Field(None, description='Line item Id', examples=[1])
    invoice_line_items: Optional[List[InvoiceLineItemEntity]] = Field(
        None, description='Associated invoice line items', examples=[[None]]
    )
    method: Optional[str] = Field(
        None, description='Line item payment method', examples=['paypal']
    )
    payment_line_items: Optional[List[PaymentLineItemEntity]] = Field(
        None, description='Associated payment line items', examples=[[None]]
    )
    payment_reversed_at: Optional[datetime] = Field(
        None,
        description='Date/time payment was reversed if applicable',
        examples=['2000-01-01T01:00:00Z'],
    )
    payment_type: Optional[str] = Field(
        None, description='Type of payment if applicable', examples=['example']
    )
    site_name: Optional[str] = Field(
        None, description='Site name this line item is for', examples=['My Site']
    )
    type: Optional[str] = Field(
        None,
        description='Type of line item, either payment or invoice',
        examples=['invoice'],
    )
    updated_at: Optional[datetime] = Field(
        None, description='Line item updated at', examples=['2000-01-01T01:00:00Z']
    )


class BundleDownloadEntity(BaseModel):
    bundle_registration: Optional[BundleRegistrationEntity] = None
    created_at: Optional[datetime] = Field(
        None, description='Download date/time', examples=['2000-01-01T01:00:00Z']
    )
    download_method: Optional[DownloadMethod] = Field(
        None, description='Download method (file or full_zip)', examples=['file']
    )
    path: Optional[str] = Field(
        None, description='Download path', examples=['a/b/test.txt']
    )


class BundleEntity(BaseModel):
    clickwrap_body: Optional[str] = Field(
        None,
        description='Legal text that must be agreed to prior to accessing Bundle.',
        examples=['[Legal text]'],
    )
    clickwrap_id: Optional[int] = Field(
        None, description='ID of the clickwrap to use with this bundle.', examples=[1]
    )
    code: Optional[str] = Field(
        None,
        description='Bundle code.  This code forms the end part of the Public URL.',
        examples=['abc123'],
    )
    created_at: Optional[datetime] = Field(
        None,
        description='Bundle created at date/time',
        examples=['2000-01-01T01:00:00Z'],
    )
    description: Optional[str] = Field(
        None,
        description='Public description',
        examples=['The public description of the bundle.'],
    )
    dont_separate_submissions_by_folder: Optional[bool] = Field(
        None,
        description='Do not create subfolders for files uploaded to this share. Note: there are subtle security pitfalls with allowing anonymous uploads from multiple users to live in the same folder. We strongly discourage use of this option unless absolutely required.',
        examples=[True],
    )
    expires_at: Optional[datetime] = Field(
        None,
        description='Bundle expiration date/time',
        examples=['2000-01-01T01:00:00Z'],
    )
    form_field_set: Optional[FormFieldSetEntity] = None
    has_inbox: Optional[bool] = Field(
        None, description='Does this bundle have an associated inbox?', examples=[True]
    )
    id: Optional[int] = Field(None, description='Bundle ID', examples=[1])
    inbox_id: Optional[int] = Field(
        None, description='ID of the associated inbox, if available.', examples=[1]
    )
    max_uses: Optional[int] = Field(
        None, description='Maximum number of times bundle can be accessed', examples=[1]
    )
    note: Optional[str] = Field(
        None,
        description='Bundle internal note',
        examples=['The internal note on the bundle.'],
    )
    password_protected: Optional[bool] = Field(
        None, description='Is this bundle password protected?'
    )
    path_template: Optional[str] = Field(
        None,
        description="Template for creating submission subfolders. Can use the uploader's name, email address, ip, company, and any custom form data.",
        examples=['{{name}}_{{ip}}'],
    )
    paths: Optional[List[str]] = Field(
        None, description='A list of paths in this bundle', examples=[['file.txt']]
    )
    permissions: Optional[Permissions] = Field(
        None,
        description='Permissions that apply to Folders in this Share Link.',
        examples=['read'],
    )
    preview_only: Optional[bool] = Field(
        None, description='Restrict users to previewing files only?'
    )
    require_registration: Optional[bool] = Field(
        None,
        description="Show a registration page that captures the downloader's name and email address?",
    )
    require_share_recipient: Optional[bool] = Field(
        None,
        description='Only allow access to recipients who have explicitly received the share via an email sent through the Files.com UI?',
    )
    send_email_receipt_to_uploader: Optional[bool] = Field(
        None,
        description='Send delivery receipt to the uploader. Note: For writable share only',
        examples=[True],
    )
    skip_company: Optional[bool] = Field(
        None,
        description='BundleRegistrations can be saved without providing company?',
        examples=[True],
    )
    skip_email: Optional[bool] = Field(
        None,
        description='BundleRegistrations can be saved without providing email?',
        examples=[True],
    )
    skip_name: Optional[bool] = Field(
        None,
        description='BundleRegistrations can be saved without providing name?',
        examples=[True],
    )
    url: Optional[str] = Field(
        None,
        description='Public URL of Share Link',
        examples=['https://subdomain.files.com/f/12345678'],
    )
    user_id: Optional[int] = Field(
        None, description='Bundle creator user ID', examples=[1]
    )
    username: Optional[str] = Field(
        None, description='Bundle creator username', examples=['user']
    )
    watermark_attachment: Optional[ImageEntity] = None
    watermark_value: Optional[Dict[str, Any]] = Field(
        None,
        description='Preview watermark settings applied to all bundle items. Uses the same keys as Behavior.value',
        examples=[{'key': 'example value'}],
    )


class FileCommentEntity(BaseModel):
    body: Optional[str] = Field(
        None, description='Comment body.', examples=['What a great file!']
    )
    id: Optional[int] = Field(None, description='File Comment ID', examples=[1])
    reactions: Optional[List[FileCommentReactionEntity]] = Field(
        None, description='Reactions to this comment.', examples=[[None]]
    )


class FileEntity(BaseModel):
    crc32: Optional[str] = Field(
        None,
        description='File CRC32 checksum. This is sometimes delayed, so if you get a blank response, wait and try again.',
        examples=['70976923'],
    )
    created_at: Optional[datetime] = Field(
        None, description='File created date/time', examples=['2000-01-01T01:00:00Z']
    )
    display_name: Optional[str] = Field(
        None, description='File/Folder display name', examples=['file.txt']
    )
    download_uri: Optional[str] = Field(
        None,
        description='Link to download file. Provided only in response to a download request.',
        examples=['https://mysite.files.com/...'],
    )
    is_locked: Optional[bool] = Field(
        None,
        description='Is this folder locked and unable to be modified?',
        examples=[True],
    )
    md5: Optional[str] = Field(
        None,
        description='File MD5 checksum. This is sometimes delayed, so if you get a blank response, wait and try again.',
        examples=['17c54824e9931a4688ca032d03f6663c'],
    )
    mime_type: Optional[str] = Field(
        None,
        description='MIME Type.  This is determined by the filename extension and is not stored separately internally.',
        examples=['application/octet-stream'],
    )
    mtime: Optional[datetime] = Field(
        None,
        description='File last modified date/time, according to the server.  This is the timestamp of the last Files.com operation of the file, regardless of what modified timestamp was sent.',
        examples=['2000-01-01T01:00:00Z'],
    )
    path: Optional[str] = Field(
        None, description='File/Folder path', examples=['path/file.txt']
    )
    permissions: Optional[str] = Field(
        None,
        description="A short string representing the current user's permissions.  Can be `r`,`w`,`d`, `l` or any combination",
        examples=['rwd'],
    )
    preview: Optional[PreviewEntity] = None
    preview_id: Optional[int] = Field(None, description='File preview ID', examples=[1])
    priority_color: Optional[str] = Field(
        None, description='Bookmark/priority color of file/folder', examples=['red']
    )
    provided_mtime: Optional[datetime] = Field(
        None,
        description='File last modified date/time, according to the client who set it.  Files.com allows desktop, FTP, SFTP, and WebDAV clients to set modified at times.  This allows Desktop<->Cloud syncing to preserve modified at times.',
        examples=['2000-01-01T01:00:00Z'],
    )
    region: Optional[str] = Field(
        None, description='Region location', examples=['us-east-1']
    )
    size: Optional[int] = Field(None, description='File/Folder size', examples=[1024])
    subfolders_locked_: Optional[bool] = Field(
        None,
        alias='subfolders_locked?',
        description='Are subfolders locked and unable to be modified?',
        examples=[True],
    )
    type: Optional[str] = Field(
        None, description='Type: `directory` or `file`.', examples=['file']
    )


class MessageCommentEntity(BaseModel):
    body: Optional[str] = Field(
        None, description='Comment body.', examples=['What a great idea, thank you!']
    )
    id: Optional[int] = Field(None, description='Message Comment ID', examples=[1])
    reactions: Optional[List[MessageCommentReactionEntity]] = Field(
        None, description='Reactions to this comment.', examples=[[None]]
    )


class MessageEntity(BaseModel):
    body: Optional[str] = Field(
        None,
        description='Message body.',
        examples=['We should upgrade our Files.com account!'],
    )
    comments: Optional[List[MessageCommentEntity]] = Field(
        None, description='Comments.', examples=[[None]]
    )
    id: Optional[int] = Field(None, description='Message ID', examples=[1])
    subject: Optional[str] = Field(
        None, description='Message subject.', examples=['Files.com Account Upgrade']
    )


class SiteEntity(BaseModel):
    active_sftp_host_key_id: Optional[int] = Field(
        None,
        description='Id of the currently selected custom SFTP Host Key',
        examples=[1],
    )
    admin_user_id: Optional[int] = Field(
        None, description='User ID for the main site administrator', examples=[1]
    )
    allow_bundle_names: Optional[bool] = Field(
        None, description='Are manual Bundle names allowed?', examples=[True]
    )
    allowed_2fa_method_bypass_for_ftp_sftp_dav: Optional[bool] = Field(
        None,
        description='Are users allowed to configure their two factor authentication to be bypassed for FTP/SFTP/WebDAV?',
        examples=[True],
    )
    allowed_2fa_method_sms: Optional[bool] = Field(
        None, description='Is SMS two factor authentication allowed?', examples=[True]
    )
    allowed_2fa_method_totp: Optional[bool] = Field(
        None, description='Is TOTP two factor authentication allowed?', examples=[True]
    )
    allowed_2fa_method_u2f: Optional[bool] = Field(
        None, description='Is U2F two factor authentication allowed?', examples=[True]
    )
    allowed_2fa_method_webauthn: Optional[bool] = Field(
        None,
        description='Is WebAuthn two factor authentication allowed?',
        examples=[True],
    )
    allowed_2fa_method_yubi: Optional[bool] = Field(
        None,
        description='Is yubikey two factor authentication allowed?',
        examples=[True],
    )
    allowed_countries: Optional[str] = Field(
        None,
        description='Comma seperated list of allowed Country codes',
        examples=['US,DE'],
    )
    allowed_ips: Optional[str] = Field(
        None, description='List of allowed IP addresses', examples=['example']
    )
    ask_about_overwrites: Optional[bool] = Field(
        None,
        description='If false, rename conflicting files instead of asking for overwrite confirmation.  Only applies to web interface.',
        examples=[True],
    )
    bundle_activity_notifications: Optional[BundleActivityNotifications] = Field(
        None,
        description='Do Bundle owners receive activity notifications?',
        examples=['never'],
    )
    bundle_expiration: Optional[int] = Field(
        None, description='Site-wide Bundle expiration in days', examples=[1]
    )
    bundle_password_required: Optional[bool] = Field(
        None, description='Do Bundles require password protection?', examples=[True]
    )
    bundle_registration_notifications: Optional[BundleRegistrationNotifications] = (
        Field(
            None,
            description='Do Bundle owners receive registration notification?',
            examples=['never'],
        )
    )
    bundle_require_share_recipient: Optional[bool] = Field(
        None, description='Do Bundles require recipients for sharing?', examples=[True]
    )
    bundle_upload_receipt_notifications: Optional[BundleUploadReceiptNotifications] = (
        Field(
            None,
            description='Do Bundle uploaders receive upload confirmation notifications?',
            examples=['never'],
        )
    )
    bundle_watermark_attachment: Optional[ImageEntity] = None
    bundle_watermark_value: Optional[Dict[str, Any]] = Field(
        None,
        description='Preview watermark settings applied to all bundle items. Uses the same keys as Behavior.value',
        examples=[{'key': 'example value'}],
    )
    color2_left: Optional[str] = Field(
        None, description='Page link and button color', examples=['#0066a7']
    )
    color2_link: Optional[str] = Field(
        None, description='Top bar link color', examples=['#d34f5d']
    )
    color2_text: Optional[str] = Field(
        None, description='Page link and button color', examples=['#0066a7']
    )
    color2_top: Optional[str] = Field(
        None, description='Top bar background color', examples=['#000000']
    )
    color2_top_text: Optional[str] = Field(
        None, description='Top bar text color', examples=['#ffffff']
    )
    contact_name: Optional[str] = Field(
        None, description='Site main contact name', examples=['John Doe']
    )
    created_at: Optional[datetime] = Field(
        None,
        description='Time this site was created',
        examples=['2000-01-01T01:00:00Z'],
    )
    currency: Optional[str] = Field(
        None, description='Preferred currency', examples=['USD']
    )
    custom_namespace: Optional[bool] = Field(
        None,
        description='Is this site using a custom namespace for users?',
        examples=[True],
    )
    days_to_retain_backups: Optional[int] = Field(
        None, description='Number of days to keep deleted files', examples=[30]
    )
    default_time_zone: Optional[str] = Field(
        None,
        description='Site default time zone',
        examples=['Pacific Time (US & Canada)'],
    )
    desktop_app: Optional[bool] = Field(
        None, description='Is the desktop app enabled?', examples=[True]
    )
    desktop_app_session_ip_pinning: Optional[bool] = Field(
        None, description='Is desktop app session IP pinning enabled?', examples=[True]
    )
    desktop_app_session_lifetime: Optional[int] = Field(
        None, description='Desktop app session lifetime (in hours)', examples=[1]
    )
    disable_files_certificate_generation: Optional[bool] = Field(
        None,
        description='If set, Files.com will not set the CAA records required to generate future SSL certificates for this domain.',
        examples=[True],
    )
    disable_notifications: Optional[bool] = Field(
        None, description='Are notifications disabled?', examples=[True]
    )
    disable_password_reset: Optional[bool] = Field(
        None, description='Is password reset disabled?', examples=[True]
    )
    disable_users_from_inactivity_period_days: Optional[int] = Field(
        None,
        description='If greater than zero, users will unable to login if they do not show activity within this number of days.',
        examples=[1],
    )
    disallowed_countries: Optional[str] = Field(
        None,
        description='Comma seperated list of disallowed Country codes',
        examples=['US,DE'],
    )
    domain: Optional[str] = Field(
        None, description='Custom domain', examples=['my-custom-domain.com']
    )
    domain_hsts_header: Optional[bool] = Field(
        None,
        description='Send HSTS (HTTP Strict Transport Security) header when visitors access the site via a custom domain?',
        examples=[True],
    )
    domain_letsencrypt_chain: Optional[DomainLetsencryptChain] = Field(
        None,
        description='Letsencrypt chain to use when registering SSL Certificate for domain.',
        examples=['example'],
    )
    email: Optional[EmailStr] = Field(
        None, description='Main email for this site', examples=['example']
    )
    folder_permissions_groups_only: Optional[bool] = Field(
        None,
        description='If true, permissions for this site must be bound to a group (not a user). Otherwise, permissions must be bound to a user.',
        examples=[True],
    )
    ftp_enabled: Optional[bool] = Field(
        None, description='Is FTP enabled?', examples=[True]
    )
    hipaa: Optional[bool] = Field(
        None,
        description='Is there a signed HIPAA BAA between Files.com and this site?',
        examples=[True],
    )
    icon128: Optional[ImageEntity] = None
    icon16: Optional[ImageEntity] = None
    icon32: Optional[ImageEntity] = None
    icon48: Optional[ImageEntity] = None
    immutable_files_set_at: Optional[datetime] = Field(
        None, description='Can files be modified?', examples=['2000-01-01T01:00:00Z']
    )
    include_password_in_welcome_email: Optional[bool] = Field(
        None, description='Include password in emails to new users?', examples=[True]
    )
    language: Optional[str] = Field(
        None, description='Site default language', examples=['en']
    )
    ldap_base_dn: Optional[str] = Field(
        None,
        description='Base DN for looking up users in LDAP server',
        examples=['example'],
    )
    ldap_domain: Optional[str] = Field(
        None,
        description='Domain name that will be appended to usernames',
        examples=['mysite.com'],
    )
    ldap_enabled: Optional[bool] = Field(
        None, description='Main LDAP setting: is LDAP enabled?', examples=[True]
    )
    ldap_group_action: Optional[str] = Field(
        None,
        description='Should we sync groups from LDAP server?',
        examples=['disabled'],
    )
    ldap_group_exclusion: Optional[str] = Field(
        None,
        description='Comma or newline separated list of group names (with optional wildcards) to exclude when syncing.',
        examples=['example'],
    )
    ldap_group_inclusion: Optional[str] = Field(
        None,
        description='Comma or newline separated list of group names (with optional wildcards) to include when syncing.',
        examples=['example'],
    )
    ldap_host: Optional[str] = Field(
        None, description='LDAP host', examples=['ldap.site.com']
    )
    ldap_host_2: Optional[str] = Field(
        None, description='LDAP backup host', examples=['ldap2.site.com']
    )
    ldap_host_3: Optional[str] = Field(
        None, description='LDAP backup host', examples=['ldap3.site.com']
    )
    ldap_port: Optional[int] = Field(None, description='LDAP port', examples=[1])
    ldap_secure: Optional[bool] = Field(
        None, description='Use secure LDAP?', examples=[True]
    )
    ldap_type: Optional[str] = Field(
        None, description='LDAP type', examples=['open_ldap']
    )
    ldap_user_action: Optional[str] = Field(
        None,
        description='Should we sync users from LDAP server?',
        examples=['disabled'],
    )
    ldap_user_include_groups: Optional[str] = Field(
        None,
        description='Comma or newline separated list of group names (with optional wildcards) - if provided, only users in these groups will be added or synced.',
        examples=['example'],
    )
    ldap_username: Optional[str] = Field(
        None,
        description='Username for signing in to LDAP server.',
        examples=['[ldap username]'],
    )
    ldap_username_field: Optional[str] = Field(
        None, description='LDAP username field', examples=['sAMAccountName']
    )
    login_help_text: Optional[str] = Field(
        None, description='Login help text', examples=['Login page help text.']
    )
    logo: Optional[ImageEntity] = None
    max_prior_passwords: Optional[int] = Field(
        None, description='Number of prior passwords to disallow', examples=[1]
    )
    mobile_app: Optional[bool] = Field(
        None, description='Is the mobile app enabled?', examples=[True]
    )
    mobile_app_session_ip_pinning: Optional[bool] = Field(
        None, description='Is mobile app session IP pinning enabled?', examples=[True]
    )
    mobile_app_session_lifetime: Optional[int] = Field(
        None, description='Mobile app session lifetime (in hours)', examples=[1]
    )
    motd_text: Optional[str] = Field(
        None,
        description='A message to show users when they connect via FTP or SFTP.',
        examples=['example'],
    )
    motd_use_for_ftp: Optional[bool] = Field(
        None, description='Show message to users connecting via FTP', examples=[True]
    )
    motd_use_for_sftp: Optional[bool] = Field(
        None, description='Show message to users connecting via SFTP', examples=[True]
    )
    name: Optional[str] = Field(None, description='Site name', examples=['My Site'])
    next_billing_amount: Optional[float] = Field(
        None, description='Next billing amount', examples=[1]
    )
    next_billing_date: Optional[str] = Field(
        None, description='Next billing date', examples=['Apr 20']
    )
    non_sso_groups_allowed: Optional[bool] = Field(
        None,
        description='If true, groups can be manually created / modified / deleted by Site Admins. Otherwise, groups can only be managed via your SSO provider.',
        examples=[True],
    )
    non_sso_users_allowed: Optional[bool] = Field(
        None,
        description='If true, users can be manually created / modified / deleted by Site Admins. Otherwise, users can only be managed via your SSO provider.',
        examples=[True],
    )
    office_integration_available: Optional[bool] = Field(
        None, description='Allow users to use Office for the web?', examples=[True]
    )
    office_integration_type: Optional[OfficeIntegrationType] = Field(
        None,
        description='Office integration application used to edit and view the MS Office documents',
        examples=['example'],
    )
    oncehub_link: Optional[str] = Field(
        None,
        description='Link to scheduling a meeting with our Sales team',
        examples=['https://go.oncehub.com/files'],
    )
    opt_out_global: Optional[bool] = Field(
        None, description='Use servers in the USA only?', examples=[True]
    )
    overage_notified_at: Optional[datetime] = Field(
        None,
        description='Last time the site was notified about an overage',
        examples=['2000-01-01T01:00:00Z'],
    )
    overage_notify: Optional[bool] = Field(
        None, description='Notify site email of overages?', examples=[True]
    )
    overdue: Optional[bool] = Field(
        None, description="Is this site's billing overdue?", examples=[True]
    )
    password_min_length: Optional[int] = Field(
        None, description='Shortest password length for users', examples=[1]
    )
    password_require_letter: Optional[bool] = Field(
        None, description='Require a letter in passwords?', examples=[True]
    )
    password_require_mixed: Optional[bool] = Field(
        None,
        description='Require lower and upper case letters in passwords?',
        examples=[True],
    )
    password_require_number: Optional[bool] = Field(
        None, description='Require a number in passwords?', examples=[True]
    )
    password_require_special: Optional[bool] = Field(
        None, description='Require special characters in password?', examples=[True]
    )
    password_require_unbreached: Optional[bool] = Field(
        None,
        description='Require passwords that have not been previously breached? (see https://haveibeenpwned.com/)',
        examples=[True],
    )
    password_requirements_apply_to_bundles: Optional[bool] = Field(
        None,
        description="Require bundles' passwords, and passwords for other items (inboxes, public shares, etc.) to conform to the same requirements as users' passwords?",
        examples=[True],
    )
    password_validity_days: Optional[int] = Field(
        None, description='Number of days password is valid', examples=[1]
    )
    phone: Optional[str] = Field(
        None, description='Site phone number', examples=['555-555-5555']
    )
    pin_all_remote_servers_to_site_region: Optional[bool] = Field(
        None,
        description='If true, we will ensure that all internal communications with any remote server are made through the primary region of the site. This setting overrides individual remote server settings.',
        examples=[True],
    )
    reply_to_email: Optional[EmailStr] = Field(
        None, description='Reply-to email for this site', examples=['example']
    )
    require_2fa: Optional[bool] = Field(
        None,
        description='Require two-factor authentication for all users?',
        examples=[True],
    )
    require_2fa_stop_time: Optional[datetime] = Field(
        None,
        description='If set, requirement for two-factor authentication has been scheduled to end on this date-time.',
        examples=['2000-01-01T01:00:00Z'],
    )
    require_2fa_user_type: Optional[Require2faUserType] = Field(
        None,
        description='What type of user is required to use two-factor authentication (when require_2fa is set to `true` for this site)?',
        examples=['`site_admins`'],
    )
    session: Optional[SessionEntity] = None
    session_expiry: Optional[float] = Field(
        None, description='Session expiry in hours', examples=[6]
    )
    session_expiry_minutes: Optional[int] = Field(
        None, description='Session expiry in minutes', examples=[360]
    )
    session_pinned_by_ip: Optional[bool] = Field(
        None,
        description='Are sessions locked to the same IP? (i.e. do users need to log in again if they change IPs?)',
        examples=[True],
    )
    sftp_enabled: Optional[bool] = Field(
        None, description='Is SFTP enabled?', examples=[True]
    )
    sftp_host_key_type: Optional[SftpHostKeyType] = Field(
        None, description='Sftp Host Key Type', examples=['default']
    )
    sftp_insecure_ciphers: Optional[bool] = Field(
        None,
        description='Are Insecure Ciphers allowed for SFTP?  Note:  Settting TLS Disabled -> True will always allow insecure ciphers for SFTP as well.  Enabling this is insecure.',
    )
    sftp_user_root_enabled: Optional[bool] = Field(
        None, description='Use user FTP roots also for SFTP?'
    )
    sharing_enabled: Optional[bool] = Field(
        None, description='Allow bundle creation', examples=[True]
    )
    show_request_access_link: Optional[bool] = Field(
        None,
        description='Show request access link for users without access?  Currently unused.',
        examples=[True],
    )
    site_footer: Optional[str] = Field(
        None, description='Custom site footer text', examples=['example']
    )
    site_header: Optional[str] = Field(
        None, description='Custom site header text', examples=['example']
    )
    smtp_address: Optional[str] = Field(
        None,
        description='SMTP server hostname or IP',
        examples=['smtp.my-mail-server.com'],
    )
    smtp_authentication: Optional[str] = Field(
        None, description='SMTP server authentication type', examples=['plain']
    )
    smtp_from: Optional[str] = Field(
        None,
        description='From address to use when mailing through custom SMTP',
        examples=['me@my-mail-server.com'],
    )
    smtp_port: Optional[int] = Field(
        None, description='SMTP server port', examples=[25]
    )
    smtp_username: Optional[str] = Field(
        None, description='SMTP server username', examples=['mail']
    )
    ssl_required: Optional[bool] = Field(
        None,
        description='Is SSL required?  Disabling this is insecure.',
        examples=[True],
    )
    subdomain: Optional[str] = Field(
        None, description='Site subdomain', examples=['mysite']
    )
    switch_to_plan_date: Optional[datetime] = Field(
        None,
        description='If switching plans, when does the new plan take effect?',
        examples=['2000-01-01T01:00:00Z'],
    )
    tls_disabled: Optional[bool] = Field(
        None,
        description='Are Insecure TLS and SFTP Ciphers allowed?  Enabling this is insecure.',
    )
    trial_days_left: Optional[int] = Field(
        None, description='Number of days left in trial', examples=[1]
    )
    trial_until: Optional[datetime] = Field(
        None,
        description='When does this Site trial expire?',
        examples=['2000-01-01T01:00:00Z'],
    )
    updated_at: Optional[datetime] = Field(
        None,
        description='Last time this Site was updated',
        examples=['2000-01-01T01:00:00Z'],
    )
    uploads_via_email_authentication: Optional[bool] = Field(
        None,
        description='Do incoming emails in the Inboxes require checking for SPF/DKIM/DMARC?',
        examples=[True],
    )
    use_provided_modified_at: Optional[bool] = Field(
        None,
        description='Allow uploaders to set `provided_modified_at` for uploaded files?',
        examples=[True],
    )
    user: Optional[UserEntity] = None
    user_lockout: Optional[bool] = Field(
        None,
        description='Will users be locked out after incorrect login attempts?',
        examples=[True],
    )
    user_lockout_lock_period: Optional[int] = Field(
        None,
        description='How many hours to lock user out for failed password?',
        examples=[1],
    )
    user_lockout_tries: Optional[int] = Field(
        None,
        description='Number of login tries within `user_lockout_within` hours before users are locked out',
        examples=[1],
    )
    user_lockout_within: Optional[int] = Field(
        None, description='Number of hours for user lockout window', examples=[6]
    )
    user_requests_enabled: Optional[bool] = Field(
        None, description='Enable User Requests feature', examples=[True]
    )
    user_requests_notify_admins: Optional[bool] = Field(
        None,
        description='Send email to site admins when a user request is received?',
        examples=[True],
    )
    welcome_custom_text: Optional[str] = Field(
        None,
        description='Custom text send in user welcome email',
        examples=['Welcome to my site!'],
    )
    welcome_email_cc: Optional[EmailStr] = Field(
        None,
        description='Include this email in welcome emails if enabled',
        examples=['example'],
    )
    welcome_email_enabled: Optional[bool] = Field(
        None,
        description='Will the welcome email be sent to new users?',
        examples=[True],
    )
    welcome_email_subject: Optional[str] = Field(
        None,
        description='Include this email subject in welcome emails if enabled',
        examples=['example'],
    )
    welcome_screen: Optional[WelcomeScreen] = Field(
        None,
        description='Does the welcome screen appear?',
        examples=['user_controlled'],
    )
    windows_mode_ftp: Optional[bool] = Field(
        None, description='Does FTP user Windows emulation mode?', examples=[True]
    )


class BundleDownloadsGetResponse(RootModel[List[BundleDownloadEntity]]):
    root: List[BundleDownloadEntity]


class BundlesGetResponse(RootModel[List[BundleEntity]]):
    root: List[BundleEntity]


class FileCommentsFilesPathGetResponse(RootModel[List[FileCommentEntity]]):
    root: List[FileCommentEntity]


class FoldersPathGetResponse(RootModel[List[FileEntity]]):
    root: List[FileEntity]


class InvoicesGetResponse(RootModel[List[AccountLineItemEntity]]):
    root: List[AccountLineItemEntity]


class MessageCommentsGetResponse(RootModel[List[MessageCommentEntity]]):
    root: List[MessageCommentEntity]


class MessagesGetResponse(RootModel[List[MessageEntity]]):
    root: List[MessageEntity]


class PaymentsGetResponse(RootModel[List[AccountLineItemEntity]]):
    root: List[AccountLineItemEntity]
