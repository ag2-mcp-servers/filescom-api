# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T19:12:37+00:00



import argparse
import json
import os
from datetime import datetime
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity
from fastapi import Query, UploadFile
from starlette.requests import Request

from models import (
    AccountLineItemEntity,
    ActionNotificationExportEntity,
    ActionNotificationExportResultsGetResponse,
    ApiKeyEntity,
    ApiKeysGetResponse,
    AppsGetResponse,
    As2IncomingMessagesGetResponse,
    As2OutgoingMessagesGetResponse,
    As2PartnerEntity,
    As2PartnersGetResponse,
    As2StationEntity,
    As2StationsGetResponse,
    AutomationEntity,
    AutomationRunEntity,
    AutomationRunsGetResponse,
    AutomationsGetResponse,
    BandwidthSnapshotsGetResponse,
    BehaviorEntity,
    BehaviorsFoldersPathGetResponse,
    BehaviorsGetResponse,
    BundleDownloadsGetResponse,
    BundleEntity,
    BundleNotificationEntity,
    BundleNotificationsGetResponse,
    BundleRecipientEntity,
    BundleRecipientsGetResponse,
    BundleRegistrationsGetResponse,
    BundlesGetResponse,
    ClickwrapEntity,
    ClickwrapsGetResponse,
    DnsRecordsGetResponse,
    ExternalEventEntity,
    ExternalEventsGetResponse,
    FileActionEntity,
    FileActionsBeginUploadPathPostResponse,
    FileCommentEntity,
    FileCommentReactionEntity,
    FileCommentsFilesPathGetResponse,
    FileEntity,
    FileMigrationEntity,
    Filter,
    FilterGt,
    FilterGteq,
    FilterLike,
    FilterLt,
    FilterLteq,
    FoldersPathGetResponse,
    FormFieldSetEntity,
    FormFieldSetsGetResponse,
    GroupEntity,
    GroupsGetResponse,
    GroupsGroupIdPermissionsGetResponse,
    GroupsGroupIdUsersGetResponse,
    GroupUserEntity,
    GroupUsersGetResponse,
    HistoryExportEntity,
    HistoryExportResultsGetResponse,
    HistoryFilesPathGetResponse,
    HistoryFoldersPathGetResponse,
    HistoryGetResponse,
    HistoryLoginGetResponse,
    HistoryUsersUserIdGetResponse,
    InboxRecipientEntity,
    InboxRecipientsGetResponse,
    InboxRegistrationsGetResponse,
    InboxUploadsGetResponse,
    InvoicesGetResponse,
    IpAddressesExavaultReservedGetResponse,
    IpAddressesGetResponse,
    IpAddressesReservedGetResponse,
    LockEntity,
    LocksPathGetResponse,
    MessageCommentEntity,
    MessageCommentReactionEntity,
    MessageCommentReactionsGetResponse,
    MessageCommentsGetResponse,
    MessageEntity,
    MessageReactionEntity,
    MessageReactionsGetResponse,
    MessagesGetResponse,
    NotificationEntity,
    NotificationsGetResponse,
    PatchFormFieldSets,
    PaymentsGetResponse,
    PermissionEntity,
    PermissionsGetResponse,
    PostFormFieldSets,
    PrioritiesGetResponse,
    ProjectEntity,
    ProjectsGetResponse,
    PublicKeyEntity,
    PublicKeysGetResponse,
    RemoteBandwidthSnapshotsGetResponse,
    RemoteServerConfigurationFileEntity,
    RemoteServerEntity,
    RemoteServersGetResponse,
    RequestEntity,
    RequestsFoldersPathGetResponse,
    RequestsGetResponse,
    SessionEntity,
    SettingsChangesGetResponse,
    SftpHostKeyEntity,
    SftpHostKeysGetResponse,
    SiteApiKeysGetResponse,
    SiteDnsRecordsGetResponse,
    SiteEntity,
    SiteIpAddressesGetResponse,
    SortBy,
    SsoStrategiesGetResponse,
    SsoStrategyEntity,
    StatusEntity,
    StyleEntity,
    UsageDailySnapshotsGetResponse,
    UsageSnapshotEntity,
    UsageSnapshotsGetResponse,
    UserApiKeysGetResponse,
    UserCipherUsesGetResponse,
    UserEntity,
    UserGroupsGetResponse,
    UserPublicKeysGetResponse,
    UserRequestEntity,
    UserRequestsGetResponse,
    UsersGetResponse,
    UsersUserIdApiKeysGetResponse,
    UsersUserIdCipherUsesGetResponse,
    UsersUserIdGroupsGetResponse,
    UsersUserIdPermissionsGetResponse,
    UsersUserIdPublicKeysGetResponse,
    WebhookTestEntity,
)

app = MCPProxy(
    contact={'email': 'support@files.com', 'name': 'Files.com Customer Success Team'},
    title='Files.com API',
    version='0.0.1',
    servers=[{'url': '//app.files.com/api/rest/v1'}],
)


@app.get(
    '/action_notification_export_results',
    description=""" List Action Notification Export Results """,
    tags=['action_notification_management'],
)
def get_action_notification_export_results(
    user_id: Optional[int] = None,
    cursor: Optional[str] = None,
    per_page: Optional[int] = None,
    action_notification_export_id: int = ...,
):
    """
    List Action Notification Export Results
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/action_notification_exports',
    description=""" Create Action Notification Export """,
    tags=['action_notification_management', 'file_upload_management'],
)
def post_action_notification_exports(file: UploadFile):
    """
    Create Action Notification Export
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/action_notification_exports/{id}',
    description=""" Show Action Notification Export """,
    tags=['action_notification_management', 'webhook_management'],
)
def get_action_notification_exports_id(id: int):
    """
    Show Action Notification Export
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/action_webhook_failures/{id}/retry',
    description=""" retry Action Webhook Failure """,
    tags=['action_notification_management', 'webhook_management'],
)
def post_action_webhook_failures_id_retry(id: int):
    """
    retry Action Webhook Failure
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api_key',
    description=""" Delete current API key.  (Requires current API connection to be using an API key.) """,
    tags=['api_key_management'],
)
def api_key_delete_current():
    """
    Delete current API key.  (Requires current API connection to be using an API key.)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api_key',
    description=""" Show information about current API key.  (Requires current API connection to be using an API key.) """,
    tags=['api_key_management'],
)
def api_key_find_current():
    """
    Show information about current API key.  (Requires current API connection to be using an API key.)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/api_key',
    description=""" Update current API key.  (Requires current API connection to be using an API key.) """,
    tags=['api_key_management'],
)
def api_key_update_current(file: UploadFile):
    """
    Update current API key.  (Requires current API connection to be using an API key.)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api_keys', description=""" List Api Keys """, tags=['api_key_management'])
def get_api_keys(
    user_id: Optional[int] = None,
    cursor: Optional[str] = None,
    per_page: Optional[int] = None,
    sort_by: Optional[SortBy] = None,
    filter: Optional[Filter] = None,
    filter_gt: Optional[FilterGt] = None,
    filter_gteq: Optional[FilterGteq] = None,
    filter_like: Optional[FilterLike] = None,
    filter_lt: Optional[FilterLt] = None,
    filter_lteq: Optional[FilterLteq] = None,
):
    """
    List Api Keys
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/api_keys', description=""" Create Api Key """, tags=['api_key_management'])
def post_api_keys(file: UploadFile):
    """
    Create Api Key
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api_keys/{id}', description=""" Delete Api Key """, tags=['api_key_management']
)
def delete_api_keys_id(id: int):
    """
    Delete Api Key
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api_keys/{id}', description=""" Show Api Key """, tags=['api_key_management']
)
def get_api_keys_id(id: int):
    """
    Show Api Key
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/api_keys/{id}', description=""" Update Api Key """, tags=['api_key_management']
)
def patch_api_keys_id(id: int, file: UploadFile = ...):
    """
    Update Api Key
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/apps', description=""" List Apps """, tags=['event_handling', 'user_management']
)
def get_apps(
    cursor: Optional[str] = None,
    per_page: Optional[int] = None,
    sort_by: Optional[SortBy] = None,
    filter: Optional[Filter] = None,
    filter_gt: Optional[FilterGt] = None,
    filter_gteq: Optional[FilterGteq] = None,
    filter_like: Optional[FilterLike] = None,
    filter_lt: Optional[FilterLt] = None,
    filter_lteq: Optional[FilterLteq] = None,
):
    """
    List Apps
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/as2_incoming_messages',
    description=""" List As2 Incoming Messages """,
    tags=['as2_message_management', 'as2_partner_management'],
)
def get_as2_incoming_messages(
    cursor: Optional[str] = None,
    per_page: Optional[int] = None,
    sort_by: Optional[SortBy] = None,
    filter: Optional[Filter] = None,
    filter_gt: Optional[FilterGt] = None,
    filter_gteq: Optional[FilterGteq] = None,
    filter_like: Optional[FilterLike] = None,
    filter_lt: Optional[FilterLt] = None,
    filter_lteq: Optional[FilterLteq] = None,
    as2_partner_id: Optional[int] = None,
):
    """
    List As2 Incoming Messages
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/as2_outgoing_messages',
    description=""" List As2 Outgoing Messages """,
    tags=['as2_message_management', 'as2_partner_management'],
)
def get_as2_outgoing_messages(
    cursor: Optional[str] = None,
    per_page: Optional[int] = None,
    sort_by: Optional[SortBy] = None,
    filter: Optional[Filter] = None,
    filter_gt: Optional[FilterGt] = None,
    filter_gteq: Optional[FilterGteq] = None,
    filter_like: Optional[FilterLike] = None,
    filter_lt: Optional[FilterLt] = None,
    filter_lteq: Optional[FilterLteq] = None,
    as2_partner_id: Optional[int] = None,
):
    """
    List As2 Outgoing Messages
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/as2_partners',
    description=""" List As2 Partners """,
    tags=['as2_partner_management'],
)
def get_as2_partners(cursor: Optional[str] = None, per_page: Optional[int] = None):
    """
    List As2 Partners
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/as2_partners',
    description=""" Create As2 Partner """,
    tags=['as2_partner_management', 'file_upload_management'],
)
def post_as2_partners(file: UploadFile):
    """
    Create As2 Partner
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/as2_partners/{id}',
    description=""" Delete As2 Partner """,
    tags=['as2_partner_management'],
)
def delete_as2_partners_id(id: int):
    """
    Delete As2 Partner
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/as2_partners/{id}',
    description=""" Show As2 Partner """,
    tags=['as2_partner_management'],
)
def get_as2_partners_id(id: int):
    """
    Show As2 Partner
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/as2_partners/{id}',
    description=""" Update As2 Partner """,
    tags=['as2_partner_management', 'file_upload_management'],
)
def patch_as2_partners_id(id: int, file: UploadFile = ...):
    """
    Update As2 Partner
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/as2_stations',
    description=""" List As2 Stations """,
    tags=['as2_station_management', 'as2_partner_management'],
)
def get_as2_stations(cursor: Optional[str] = None, per_page: Optional[int] = None):
    """
    List As2 Stations
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/as2_stations',
    description=""" Create As2 Station """,
    tags=['as2_station_management', 'as2_partner_management'],
)
def post_as2_stations(file: UploadFile):
    """
    Create As2 Station
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/as2_stations/{id}',
    description=""" Delete As2 Station """,
    tags=['as2_station_management', 'as2_partner_management'],
)
def delete_as2_stations_id(id: int):
    """
    Delete As2 Station
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/as2_stations/{id}',
    description=""" Show As2 Station """,
    tags=['as2_station_management'],
)
def get_as2_stations_id(id: int):
    """
    Show As2 Station
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/as2_stations/{id}',
    description=""" Update As2 Station """,
    tags=['as2_station_management', 'as2_partner_management'],
)
def patch_as2_stations_id(id: int, file: UploadFile = ...):
    """
    Update As2 Station
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/automation_runs',
    description=""" List Automation Runs """,
    tags=['automation_management', 'automation_run_management'],
)
def get_automation_runs(
    user_id: Optional[int] = None,
    cursor: Optional[str] = None,
    per_page: Optional[int] = None,
    sort_by: Optional[SortBy] = None,
    filter: Optional[Filter] = None,
    filter_gt: Optional[FilterGt] = None,
    filter_gteq: Optional[FilterGteq] = None,
    filter_like: Optional[FilterLike] = None,
    filter_lt: Optional[FilterLt] = None,
    filter_lteq: Optional[FilterLteq] = None,
    automation_id: int = ...,
):
    """
    List Automation Runs
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/automation_runs/{id}',
    description=""" Show Automation Run """,
    tags=['automation_management', 'automation_run_management'],
)
def get_automation_runs_id(id: int):
    """
    Show Automation Run
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/automations', description=""" List Automations """, tags=['automation_management']
)
def get_automations(
    cursor: Optional[str] = None,
    per_page: Optional[int] = None,
    sort_by: Optional[SortBy] = None,
    filter: Optional[Filter] = None,
    filter_gt: Optional[FilterGt] = None,
    filter_gteq: Optional[FilterGteq] = None,
    filter_like: Optional[FilterLike] = None,
    filter_lt: Optional[FilterLt] = None,
    filter_lteq: Optional[FilterLteq] = None,
    with_deleted: Optional[bool] = None,
    automation: Optional[str] = None,
):
    """
    List Automations
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/automations',
    description=""" Create Automation """,
    tags=['automation_management'],
)
def post_automations(file: UploadFile):
    """
    Create Automation
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/automations/{id}',
    description=""" Delete Automation """,
    tags=['automation_management'],
)
def delete_automations_id(id: int):
    """
    Delete Automation
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/automations/{id}',
    description=""" Show Automation """,
    tags=['automation_management', 'automation_run_management'],
)
def get_automations_id(id: int):
    """
    Show Automation
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/automations/{id}',
    description=""" Update Automation """,
    tags=['automation_management', 'file_upload_management'],
)
def patch_automations_id(id: int, file: UploadFile = ...):
    """
    Update Automation
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/bandwidth_snapshots',
    description=""" List Bandwidth Snapshots """,
    tags=['bandwidth_management'],
)
def get_bandwidth_snapshots(
    cursor: Optional[str] = None,
    per_page: Optional[int] = None,
    sort_by: Optional[SortBy] = None,
    filter: Optional[Filter] = None,
    filter_gt: Optional[FilterGt] = None,
    filter_gteq: Optional[FilterGteq] = None,
    filter_like: Optional[FilterLike] = None,
    filter_lt: Optional[FilterLt] = None,
    filter_lteq: Optional[FilterLteq] = None,
):
    """
    List Bandwidth Snapshots
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/behaviors', description=""" List Behaviors """, tags=['behavior_management'])
def get_behaviors(
    cursor: Optional[str] = None,
    per_page: Optional[int] = None,
    sort_by: Optional[SortBy] = None,
    filter: Optional[Filter] = None,
    filter_gt: Optional[FilterGt] = None,
    filter_gteq: Optional[FilterGteq] = None,
    filter_like: Optional[FilterLike] = None,
    filter_lt: Optional[FilterLt] = None,
    filter_lteq: Optional[FilterLteq] = None,
    behavior: Optional[str] = None,
):
    """
    List Behaviors
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/behaviors', description=""" Create Behavior """, tags=['behavior_management']
)
def post_behaviors(file: UploadFile):
    """
    Create Behavior
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/behaviors/folders/{path}',
    description=""" List Behaviors by path """,
    tags=['behavior_management'],
)
def behavior_list_for_path(
    cursor: Optional[str] = None,
    per_page: Optional[int] = None,
    sort_by: Optional[SortBy] = None,
    filter: Optional[Filter] = None,
    filter_gt: Optional[FilterGt] = None,
    filter_gteq: Optional[FilterGteq] = None,
    filter_like: Optional[FilterLike] = None,
    filter_lt: Optional[FilterLt] = None,
    filter_lteq: Optional[FilterLteq] = None,
    path: str = ...,
    recursive: Optional[str] = None,
    behavior: Optional[str] = None,
):
    """
    List Behaviors by path
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/behaviors/webhook/test',
    description=""" Test webhook. """,
    tags=['webhook_management'],
)
def post_behaviors_webhook_test(file: UploadFile):
    """
    Test webhook.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/behaviors/{id}', description=""" Delete Behavior """, tags=['behavior_management']
)
def delete_behaviors_id(id: int):
    """
    Delete Behavior
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/behaviors/{id}', description=""" Show Behavior """, tags=['behavior_management']
)
def get_behaviors_id(id: int):
    """
    Show Behavior
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/behaviors/{id}',
    description=""" Update Behavior """,
    tags=['behavior_management', 'file_upload_management'],
)
def patch_behaviors_id(id: int, file: UploadFile = ...):
    """
    Update Behavior
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/bundle_downloads',
    description=""" List Bundle Downloads """,
    tags=['bundle_management'],
)
def get_bundle_downloads(
    cursor: Optional[str] = None,
    per_page: Optional[int] = None,
    sort_by: Optional[SortBy] = None,
    filter: Optional[Filter] = None,
    filter_gt: Optional[FilterGt] = None,
    filter_gteq: Optional[FilterGteq] = None,
    filter_like: Optional[FilterLike] = None,
    filter_lt: Optional[FilterLt] = None,
    filter_lteq: Optional[FilterLteq] = None,
    bundle_id: Optional[int] = None,
    bundle_registration_id: Optional[int] = None,
):
    """
    List Bundle Downloads
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/bundle_notifications',
    description=""" List Bundle Notifications """,
    tags=['bundle_management', 'notification_management'],
)
def get_bundle_notifications(
    user_id: Optional[int] = None,
    cursor: Optional[str] = None,
    per_page: Optional[int] = None,
    bundle_id: Optional[int] = None,
):
    """
    List Bundle Notifications
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/bundle_notifications',
    description=""" Create Bundle Notification """,
    tags=['bundle_management', 'notification_management'],
)
def post_bundle_notifications(file: UploadFile):
    """
    Create Bundle Notification
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/bundle_notifications/{id}',
    description=""" Delete Bundle Notification """,
    tags=['bundle_management', 'notification_management'],
)
def delete_bundle_notifications_id(id: int):
    """
    Delete Bundle Notification
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/bundle_notifications/{id}',
    description=""" Show Bundle Notification """,
    tags=['bundle_management', 'notification_management'],
)
def get_bundle_notifications_id(id: int):
    """
    Show Bundle Notification
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/bundle_notifications/{id}',
    description=""" Update Bundle Notification """,
    tags=['bundle_management', 'notification_management'],
)
def patch_bundle_notifications_id(id: int, file: UploadFile = ...):
    """
    Update Bundle Notification
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/bundle_recipients',
    description=""" List Bundle Recipients """,
    tags=['bundle_management'],
)
def get_bundle_recipients(
    user_id: Optional[int] = None,
    cursor: Optional[str] = None,
    per_page: Optional[int] = None,
    sort_by: Optional[SortBy] = None,
    filter: Optional[Filter] = None,
    filter_gt: Optional[FilterGt] = None,
    filter_gteq: Optional[FilterGteq] = None,
    filter_like: Optional[FilterLike] = None,
    filter_lt: Optional[FilterLt] = None,
    filter_lteq: Optional[FilterLteq] = None,
    bundle_id: int = ...,
):
    """
    List Bundle Recipients
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/bundle_recipients',
    description=""" Create Bundle Recipient """,
    tags=['bundle_management', 'inbox_management', 'file_upload_management'],
)
def post_bundle_recipients(file: UploadFile):
    """
    Create Bundle Recipient
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/bundle_registrations',
    description=""" List Bundle Registrations """,
    tags=['bundle_management'],
)
def get_bundle_registrations(
    user_id: Optional[int] = None,
    cursor: Optional[str] = None,
    per_page: Optional[int] = None,
    bundle_id: Optional[int] = None,
):
    """
    List Bundle Registrations
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/bundles', description=""" List Bundles """, tags=['bundle_management'])
def get_bundles(
    user_id: Optional[int] = None,
    cursor: Optional[str] = None,
    per_page: Optional[int] = None,
    sort_by: Optional[SortBy] = None,
    filter: Optional[Filter] = None,
    filter_gt: Optional[FilterGt] = None,
    filter_gteq: Optional[FilterGteq] = None,
    filter_like: Optional[FilterLike] = None,
    filter_lt: Optional[FilterLt] = None,
    filter_lteq: Optional[FilterLteq] = None,
):
    """
    List Bundles
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/bundles',
    description=""" Create Bundle """,
    tags=['bundle_management', 'file_upload_management'],
)
def post_bundles(file: UploadFile):
    """
    Create Bundle
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/bundles/{id}', description=""" Delete Bundle """, tags=['bundle_management']
)
def delete_bundles_id(id: int):
    """
    Delete Bundle
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/bundles/{id}', description=""" Show Bundle """, tags=['bundle_management'])
def get_bundles_id(id: int):
    """
    Show Bundle
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/bundles/{id}',
    description=""" Update Bundle """,
    tags=['bundle_management', 'file_upload_management'],
)
def patch_bundles_id(id: int, file: UploadFile = ...):
    """
    Update Bundle
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/bundles/{id}/share',
    description=""" Send email(s) with a link to bundle """,
    tags=['bundle_management', 'notification_management'],
)
def post_bundles_id_share(id: int, file: UploadFile = ...):
    """
    Send email(s) with a link to bundle
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/clickwraps', description=""" List Clickwraps """, tags=['clickwrap_management']
)
def get_clickwraps(cursor: Optional[str] = None, per_page: Optional[int] = None):
    """
    List Clickwraps
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/clickwraps',
    description=""" Create Clickwrap """,
    tags=['clickwrap_management', 'file_upload_management'],
)
def post_clickwraps(file: UploadFile):
    """
    Create Clickwrap
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/clickwraps/{id}',
    description=""" Delete Clickwrap """,
    tags=['clickwrap_management'],
)
def delete_clickwraps_id(id: int):
    """
    Delete Clickwrap
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/clickwraps/{id}',
    description=""" Show Clickwrap """,
    tags=['clickwrap_management'],
)
def get_clickwraps_id(id: int):
    """
    Show Clickwrap
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/clickwraps/{id}',
    description=""" Update Clickwrap """,
    tags=['clickwrap_management'],
)
def patch_clickwraps_id(id: int, file: UploadFile = ...):
    """
    Update Clickwrap
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/dns_records',
    description=""" Show site DNS configuration. """,
    tags=['dns_record_management', 'site_configuration_management'],
)
def get_dns_records(cursor: Optional[str] = None, per_page: Optional[int] = None):
    """
    Show site DNS configuration.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/external_events',
    description=""" List External Events """,
    tags=['event_handling'],
)
def get_external_events(
    cursor: Optional[str] = None,
    per_page: Optional[int] = None,
    sort_by: Optional[SortBy] = None,
    filter: Optional[Filter] = None,
    filter_gt: Optional[FilterGt] = None,
    filter_gteq: Optional[FilterGteq] = None,
    filter_like: Optional[FilterLike] = None,
    filter_lt: Optional[FilterLt] = None,
    filter_lteq: Optional[FilterLteq] = None,
):
    """
    List External Events
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/external_events',
    description=""" Create External Event """,
    tags=['event_handling', 'file_upload_management'],
)
def post_external_events(file: UploadFile):
    """
    Create External Event
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/external_events/{id}',
    description=""" Show External Event """,
    tags=['event_handling'],
)
def get_external_events_id(id: int):
    """
    Show External Event
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/file_actions/begin_upload/{path}',
    description=""" Begin file upload """,
    tags=['file_upload_management', 'file_system_management', 'inbox_management'],
)
def file_action_begin_upload(path: str, file: UploadFile = ...):
    """
    Begin file upload
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/file_actions/copy/{path}',
    description=""" Copy file/folder """,
    tags=['file_system_management', 'file_upload_management'],
)
def file_action_copy(path: str, file: UploadFile = ...):
    """
    Copy file/folder
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/file_actions/metadata/{path}',
    description=""" Find file/folder by path """,
    tags=['file_system_management'],
)
def file_action_find(
    path: str,
    preview_size: Optional[str] = None,
    with_previews: Optional[bool] = None,
    with_priority_color: Optional[bool] = None,
):
    """
    Find file/folder by path
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/file_actions/move/{path}',
    description=""" Move file/folder """,
    tags=['file_system_management'],
)
def file_action_move(path: str, file: UploadFile = ...):
    """
    Move file/folder
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/file_comment_reactions',
    description=""" Create File Comment Reaction """,
    tags=[
        'file_comment_management',
        'file_upload_management',
        'file_system_management',
    ],
)
def post_file_comment_reactions(file: UploadFile):
    """
    Create File Comment Reaction
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/file_comment_reactions/{id}',
    description=""" Delete File Comment Reaction """,
    tags=['file_comment_management', 'file_system_management'],
)
def delete_file_comment_reactions_id(id: int):
    """
    Delete File Comment Reaction
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/file_comments',
    description=""" Create File Comment """,
    tags=['file_comment_management'],
)
def post_file_comments(file: UploadFile):
    """
    Create File Comment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/file_comments/files/{path}',
    description=""" List File Comments by path """,
    tags=['file_comment_management', 'file_system_management'],
)
def file_comment_list_for_path(
    cursor: Optional[str] = None, per_page: Optional[int] = None, path: str = ...
):
    """
    List File Comments by path
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/file_comments/{id}',
    description=""" Delete File Comment """,
    tags=['file_comment_management', 'file_system_management'],
)
def delete_file_comments_id(id: int):
    """
    Delete File Comment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/file_comments/{id}',
    description=""" Update File Comment """,
    tags=['file_comment_management', 'file_system_management'],
)
def patch_file_comments_id(id: int, file: UploadFile = ...):
    """
    Update File Comment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/file_migrations/{id}',
    description=""" Show File Migration """,
    tags=['file_system_management'],
)
def get_file_migrations_id(id: int):
    """
    Show File Migration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/files/{path}',
    description=""" Delete file/folder """,
    tags=['file_system_management'],
)
def delete_files_path(path: str, recursive: Optional[bool] = None):
    """
    Delete file/folder
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/files/{path}',
    description=""" Download file """,
    tags=['file_system_management', 'file_upload_management'],
)
def file_download(
    path: str,
    action: Optional[str] = None,
    preview_size: Optional[str] = None,
    with_previews: Optional[bool] = None,
    with_priority_color: Optional[bool] = None,
):
    """
    Download file
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/files/{path}',
    description=""" Update file/folder metadata """,
    tags=['file_system_management'],
)
def patch_files_path(path: str, file: UploadFile = ...):
    """
    Update file/folder metadata
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/files/{path}',
    description=""" Upload file """,
    tags=['file_upload_management', 'file_system_management', 'inbox_management'],
)
def post_files_path(path: str, file: UploadFile = ...):
    """
    Upload file
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/folders/{path}',
    description=""" List Folders by path """,
    tags=['file_system_management'],
)
def folder_list_for_path(
    cursor: Optional[str] = None,
    per_page: Optional[int] = None,
    path: str = ...,
    filter: Optional[str] = None,
    preview_size: Optional[str] = None,
    search: Optional[str] = None,
    search_all: Optional[bool] = None,
    with_previews: Optional[bool] = None,
    with_priority_color: Optional[bool] = None,
):
    """
    List Folders by path
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/folders/{path}',
    description=""" Create folder """,
    tags=['file_system_management'],
)
def post_folders_path(path: str, file: UploadFile = ...):
    """
    Create folder
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/form_field_sets',
    description=""" List Form Field Sets """,
    tags=['form_field_management'],
)
def get_form_field_sets(
    user_id: Optional[int] = None,
    cursor: Optional[str] = None,
    per_page: Optional[int] = None,
):
    """
    List Form Field Sets
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/form_field_sets',
    description=""" Create Form Field Set """,
    tags=['form_field_management'],
)
def post_form_field_sets(body: PostFormFieldSets):
    """
    Create Form Field Set
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/form_field_sets/{id}',
    description=""" Delete Form Field Set """,
    tags=['form_field_management'],
)
def delete_form_field_sets_id(id: int):
    """
    Delete Form Field Set
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/form_field_sets/{id}',
    description=""" Show Form Field Set """,
    tags=['form_field_management'],
)
def get_form_field_sets_id(id: int):
    """
    Show Form Field Set
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/form_field_sets/{id}',
    description=""" Update Form Field Set """,
    tags=['form_field_management'],
)
def patch_form_field_sets_id(id: int, body: PatchFormFieldSets = ...):
    """
    Update Form Field Set
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/group_users',
    description=""" List Group Users """,
    tags=['group_user_management', 'group_management'],
)
def get_group_users(
    user_id: Optional[int] = None,
    cursor: Optional[str] = None,
    per_page: Optional[int] = None,
    group_id: Optional[int] = None,
):
    """
    List Group Users
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/group_users',
    description=""" Create Group User """,
    tags=['group_user_management', 'user_management'],
)
def post_group_users(file: UploadFile):
    """
    Create Group User
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/group_users/{id}',
    description=""" Delete Group User """,
    tags=['group_user_management', 'group_management'],
)
def delete_group_users_id(id: int, group_id: int = ..., user_id: int = ...):
    """
    Delete Group User
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/group_users/{id}',
    description=""" Update Group User """,
    tags=['group_user_management', 'user_management'],
)
def patch_group_users_id(id: int, file: UploadFile = ...):
    """
    Update Group User
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/groups',
    description=""" List Groups """,
    tags=['group_management', 'group_user_management'],
)
def get_groups(
    cursor: Optional[str] = None,
    per_page: Optional[int] = None,
    sort_by: Optional[SortBy] = None,
    filter: Optional[Filter] = None,
    filter_gt: Optional[FilterGt] = None,
    filter_gteq: Optional[FilterGteq] = None,
    filter_like: Optional[FilterLike] = None,
    filter_lt: Optional[FilterLt] = None,
    filter_lteq: Optional[FilterLteq] = None,
    ids: Optional[str] = None,
):
    """
    List Groups
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/groups',
    description=""" Create Group """,
    tags=['group_management', 'file_upload_management'],
)
def post_groups(file: UploadFile):
    """
    Create Group
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/groups/{group_id}/memberships/{user_id}',
    description=""" Delete Group User """,
    tags=['group_user_management', 'group_management'],
)
def delete_groups_group_id_memberships_user_id(group_id: int, user_id: int = ...):
    """
    Delete Group User
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/groups/{group_id}/memberships/{user_id}',
    description=""" Update Group User """,
    tags=['group_user_management', 'user_management'],
)
def patch_groups_group_id_memberships_user_id(
    group_id: int, user_id: int = ..., file: UploadFile = ...
):
    """
    Update Group User
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/groups/{group_id}/permissions',
    description=""" List Permissions """,
    tags=[
        'group_permission_management',
        'user_permission_management',
        'permission_management',
    ],
)
def get_groups_group_id_permissions(
    cursor: Optional[str] = None,
    per_page: Optional[int] = None,
    sort_by: Optional[SortBy] = None,
    filter: Optional[Filter] = None,
    filter_gt: Optional[FilterGt] = None,
    filter_gteq: Optional[FilterGteq] = None,
    filter_like: Optional[FilterLike] = None,
    filter_lt: Optional[FilterLt] = None,
    filter_lteq: Optional[FilterLteq] = None,
    path: Optional[str] = None,
    group_id: str = ...,
    user_id: Optional[str] = None,
    include_groups: Optional[bool] = None,
):
    """
    List Permissions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/groups/{group_id}/users',
    description=""" List Group Users """,
    tags=['group_user_management', 'group_management', 'user_management'],
)
def get_groups_group_id_users(
    user_id: Optional[int] = None,
    cursor: Optional[str] = None,
    per_page: Optional[int] = None,
    group_id: int = ...,
):
    """
    List Group Users
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/groups/{group_id}/users',
    description=""" Create User """,
    tags=['group_user_management', 'user_management'],
)
def post_groups_group_id_users(group_id: int, file: UploadFile = ...):
    """
    Create User
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/groups/{id}',
    description=""" Delete Group """,
    tags=['group_management', 'group_user_management'],
)
def delete_groups_id(id: int):
    """
    Delete Group
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/groups/{id}',
    description=""" Show Group """,
    tags=['group_management', 'user_management'],
)
def get_groups_id(id: int):
    """
    Show Group
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/groups/{id}',
    description=""" Update Group """,
    tags=['group_management', 'file_upload_management'],
)
def patch_groups_id(id: int, file: UploadFile = ...):
    """
    Update Group
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/history',
    description=""" List site full action history. """,
    tags=['history_data_management', 'site_settings_management'],
)
def history_list(
    start_at: Optional[datetime] = None,
    end_at: Optional[datetime] = None,
    display: Optional[str] = None,
    cursor: Optional[str] = None,
    per_page: Optional[int] = None,
    sort_by: Optional[SortBy] = None,
    filter: Optional[Filter] = None,
    filter_gt: Optional[FilterGt] = None,
    filter_gteq: Optional[FilterGteq] = None,
    filter_like: Optional[FilterLike] = None,
    filter_lt: Optional[FilterLt] = None,
    filter_lteq: Optional[FilterLteq] = None,
):
    """
    List site full action history.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/history/files/{path}',
    description=""" List history for specific file. """,
    tags=['history_data_management'],
)
def history_list_for_file(
    start_at: Optional[datetime] = None,
    end_at: Optional[datetime] = None,
    display: Optional[str] = None,
    cursor: Optional[str] = None,
    per_page: Optional[int] = None,
    sort_by: Optional[SortBy] = None,
    path: str = ...,
):
    """
    List history for specific file.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/history/folders/{path}',
    description=""" List history for specific folder. """,
    tags=['history_data_management', 'file_system_management'],
)
def history_list_for_folder(
    start_at: Optional[datetime] = None,
    end_at: Optional[datetime] = None,
    display: Optional[str] = None,
    cursor: Optional[str] = None,
    per_page: Optional[int] = None,
    sort_by: Optional[SortBy] = None,
    path: str = ...,
):
    """
    List history for specific folder.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/history/login',
    description=""" List site login history. """,
    tags=['history_data_management', 'user_management'],
)
def history_list_logins(
    start_at: Optional[datetime] = None,
    end_at: Optional[datetime] = None,
    display: Optional[str] = None,
    cursor: Optional[str] = None,
    per_page: Optional[int] = None,
    sort_by: Optional[SortBy] = None,
):
    """
    List site login history.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/history/users/{user_id}',
    description=""" List history for specific user. """,
    tags=['history_data_management', 'user_management'],
)
def history_list_for_user(
    start_at: Optional[datetime] = None,
    end_at: Optional[datetime] = None,
    display: Optional[str] = None,
    cursor: Optional[str] = None,
    per_page: Optional[int] = None,
    sort_by: Optional[SortBy] = None,
    user_id: int = ...,
):
    """
    List history for specific user.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/history_export_results',
    description=""" List History Export Results """,
    tags=['history_data_management'],
)
def get_history_export_results(
    user_id: Optional[int] = None,
    cursor: Optional[str] = None,
    per_page: Optional[int] = None,
    history_export_id: int = ...,
):
    """
    List History Export Results
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/history_exports',
    description=""" Create History Export """,
    tags=['history_data_management', 'file_upload_management'],
)
def post_history_exports(file: UploadFile):
    """
    Create History Export
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/history_exports/{id}',
    description=""" Show History Export """,
    tags=['history_data_management'],
)
def get_history_exports_id(id: int):
    """
    Show History Export
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/inbox_recipients',
    description=""" List Inbox Recipients """,
    tags=['inbox_management', 'message_management'],
)
def get_inbox_recipients(
    user_id: Optional[int] = None,
    cursor: Optional[str] = None,
    per_page: Optional[int] = None,
    sort_by: Optional[SortBy] = None,
    filter: Optional[Filter] = None,
    filter_gt: Optional[FilterGt] = None,
    filter_gteq: Optional[FilterGteq] = None,
    filter_like: Optional[FilterLike] = None,
    filter_lt: Optional[FilterLt] = None,
    filter_lteq: Optional[FilterLteq] = None,
    inbox_id: int = ...,
):
    """
    List Inbox Recipients
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/inbox_recipients',
    description=""" Create Inbox Recipient """,
    tags=['inbox_management', 'file_upload_management'],
)
def post_inbox_recipients(file: UploadFile):
    """
    Create Inbox Recipient
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/inbox_registrations',
    description=""" List Inbox Registrations """,
    tags=['inbox_management'],
)
def get_inbox_registrations(
    cursor: Optional[str] = None,
    per_page: Optional[int] = None,
    folder_behavior_id: Optional[int] = None,
):
    """
    List Inbox Registrations
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/inbox_uploads', description=""" List Inbox Uploads """, tags=['inbox_management']
)
def get_inbox_uploads(
    cursor: Optional[str] = None,
    per_page: Optional[int] = None,
    sort_by: Optional[SortBy] = None,
    filter: Optional[Filter] = None,
    filter_gt: Optional[FilterGt] = None,
    filter_gteq: Optional[FilterGteq] = None,
    filter_like: Optional[FilterLike] = None,
    filter_lt: Optional[FilterLt] = None,
    filter_lteq: Optional[FilterLteq] = None,
    inbox_registration_id: Optional[int] = None,
    inbox_id: Optional[int] = None,
):
    """
    List Inbox Uploads
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/invoices', description=""" List Invoices """, tags=['invoice_management'])
def get_invoices(cursor: Optional[str] = None, per_page: Optional[int] = None):
    """
    List Invoices
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/invoices/{id}', description=""" Show Invoice """, tags=['invoice_management']
)
def get_invoices_id(id: int):
    """
    Show Invoice
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/ip_addresses',
    description=""" List IP Addresses associated with the current site """,
    tags=['ip_address_management'],
)
def get_ip_addresses(cursor: Optional[str] = None, per_page: Optional[int] = None):
    """
    List IP Addresses associated with the current site
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/ip_addresses/exavault-reserved',
    description=""" List all possible public ExaVault IP addresses """,
    tags=['ip_address_management'],
)
def get_ip_addresses_exavault_reserved(
    cursor: Optional[str] = None, per_page: Optional[int] = None
):
    """
    List all possible public ExaVault IP addresses
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/ip_addresses/reserved',
    description=""" List all possible public IP addresses """,
    tags=['ip_address_management'],
)
def get_ip_addresses_reserved(
    cursor: Optional[str] = None, per_page: Optional[int] = None
):
    """
    List all possible public IP addresses
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete('/locks/{path}', description=""" Delete Lock """, tags=['lock_management'])
def delete_locks_path(path: str, token: str = ...):
    """
    Delete Lock
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/locks/{path}', description=""" List Locks by path """, tags=['lock_management']
)
def lock_list_for_path(
    cursor: Optional[str] = None,
    per_page: Optional[int] = None,
    path: str = ...,
    include_children: Optional[bool] = None,
):
    """
    List Locks by path
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/locks/{path}', description=""" Create Lock """, tags=['lock_management'])
def post_locks_path(path: str, file: UploadFile = ...):
    """
    Create Lock
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/message_comment_reactions',
    description=""" List Message Comment Reactions """,
    tags=['message_comment_management'],
)
def get_message_comment_reactions(
    user_id: Optional[int] = None,
    cursor: Optional[str] = None,
    per_page: Optional[int] = None,
    message_comment_id: int = ...,
):
    """
    List Message Comment Reactions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/message_comment_reactions',
    description=""" Create Message Comment Reaction """,
    tags=['message_comment_management', 'message_management'],
)
def post_message_comment_reactions(file: UploadFile):
    """
    Create Message Comment Reaction
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/message_comment_reactions/{id}',
    description=""" Delete Message Comment Reaction """,
    tags=['message_comment_management'],
)
def delete_message_comment_reactions_id(id: int):
    """
    Delete Message Comment Reaction
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/message_comment_reactions/{id}',
    description=""" Show Message Comment Reaction """,
    tags=['message_comment_management', 'message_management'],
)
def get_message_comment_reactions_id(id: int):
    """
    Show Message Comment Reaction
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/message_comments',
    description=""" List Message Comments """,
    tags=['message_comment_management', 'message_management'],
)
def get_message_comments(
    user_id: Optional[int] = None,
    cursor: Optional[str] = None,
    per_page: Optional[int] = None,
    message_id: int = ...,
):
    """
    List Message Comments
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/message_comments',
    description=""" Create Message Comment """,
    tags=['file_comment_management', 'message_comment_management'],
)
def post_message_comments(file: UploadFile):
    """
    Create Message Comment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/message_comments/{id}',
    description=""" Delete Message Comment """,
    tags=['message_comment_management', 'message_management'],
)
def delete_message_comments_id(id: int):
    """
    Delete Message Comment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/message_comments/{id}',
    description=""" Show Message Comment """,
    tags=['message_comment_management'],
)
def get_message_comments_id(id: int):
    """
    Show Message Comment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/message_comments/{id}',
    description=""" Update Message Comment """,
    tags=['file_comment_management', 'message_comment_management'],
)
def patch_message_comments_id(id: int, file: UploadFile = ...):
    """
    Update Message Comment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/message_reactions',
    description=""" List Message Reactions """,
    tags=['message_management'],
)
def get_message_reactions(
    user_id: Optional[int] = None,
    cursor: Optional[str] = None,
    per_page: Optional[int] = None,
    message_id: int = ...,
):
    """
    List Message Reactions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/message_reactions',
    description=""" Create Message Reaction """,
    tags=['message_management', 'notification_management'],
)
def post_message_reactions(file: UploadFile):
    """
    Create Message Reaction
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/message_reactions/{id}',
    description=""" Delete Message Reaction """,
    tags=['message_management'],
)
def delete_message_reactions_id(id: int):
    """
    Delete Message Reaction
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/message_reactions/{id}',
    description=""" Show Message Reaction """,
    tags=['notification_management', 'message_management'],
)
def get_message_reactions_id(id: int):
    """
    Show Message Reaction
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/messages',
    description=""" List Messages """,
    tags=['as2_message_management', 'message_management'],
)
def get_messages(
    user_id: Optional[int] = None,
    cursor: Optional[str] = None,
    per_page: Optional[int] = None,
    project_id: int = ...,
):
    """
    List Messages
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/messages',
    description=""" Create Message """,
    tags=['message_management', 'file_upload_management'],
)
def post_messages(file: UploadFile):
    """
    Create Message
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/messages/{id}',
    description=""" Delete Message """,
    tags=['message_management', 'inbox_management'],
)
def delete_messages_id(id: int):
    """
    Delete Message
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/messages/{id}',
    description=""" Show Message """,
    tags=['notification_management', 'message_management'],
)
def get_messages_id(id: int):
    """
    Show Message
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/messages/{id}',
    description=""" Update Message """,
    tags=['message_management', 'file_upload_management'],
)
def patch_messages_id(id: int, file: UploadFile = ...):
    """
    Update Message
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/notifications',
    description=""" List Notifications """,
    tags=['notification_management'],
)
def get_notifications(
    user_id: Optional[int] = None,
    cursor: Optional[str] = None,
    per_page: Optional[int] = None,
    sort_by: Optional[SortBy] = None,
    filter: Optional[Filter] = None,
    filter_gt: Optional[FilterGt] = None,
    filter_gteq: Optional[FilterGteq] = None,
    filter_like: Optional[FilterLike] = None,
    filter_lt: Optional[FilterLt] = None,
    filter_lteq: Optional[FilterLteq] = None,
    group_id: Optional[int] = None,
    path: Optional[str] = None,
    include_ancestors: Optional[bool] = None,
):
    """
    List Notifications
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/notifications',
    description=""" Create Notification """,
    tags=['notification_management', 'event_handling'],
)
def post_notifications(file: UploadFile):
    """
    Create Notification
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/notifications/{id}',
    description=""" Delete Notification """,
    tags=['notification_management'],
)
def delete_notifications_id(id: int):
    """
    Delete Notification
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/notifications/{id}',
    description=""" Show Notification """,
    tags=['notification_management'],
)
def get_notifications_id(id: int):
    """
    Show Notification
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/notifications/{id}',
    description=""" Update Notification """,
    tags=['notification_management', 'file_upload_management'],
)
def patch_notifications_id(id: int, file: UploadFile = ...):
    """
    Update Notification
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/payments', description=""" List Payments """, tags=['payment_management'])
def get_payments(cursor: Optional[str] = None, per_page: Optional[int] = None):
    """
    List Payments
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/payments/{id}', description=""" Show Payment """, tags=['payment_management']
)
def get_payments_id(id: int):
    """
    Show Payment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/permissions',
    description=""" List Permissions """,
    tags=[
        'group_permission_management',
        'user_permission_management',
        'permission_management',
    ],
)
def get_permissions(
    cursor: Optional[str] = None,
    per_page: Optional[int] = None,
    sort_by: Optional[SortBy] = None,
    filter: Optional[Filter] = None,
    filter_gt: Optional[FilterGt] = None,
    filter_gteq: Optional[FilterGteq] = None,
    filter_like: Optional[FilterLike] = None,
    filter_lt: Optional[FilterLt] = None,
    filter_lteq: Optional[FilterLteq] = None,
    path: Optional[str] = None,
    group_id: Optional[str] = None,
    user_id: Optional[str] = None,
    include_groups: Optional[bool] = None,
):
    """
    List Permissions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/permissions',
    description=""" Create Permission """,
    tags=[
        'permission_management',
        'user_permission_management',
        'group_permission_management',
    ],
)
def post_permissions(file: UploadFile):
    """
    Create Permission
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/permissions/{id}',
    description=""" Delete Permission """,
    tags=['group_permission_management', 'permission_management'],
)
def delete_permissions_id(id: int):
    """
    Delete Permission
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/priorities', description=""" List Priorities """, tags=['priority_management']
)
def get_priorities(
    cursor: Optional[str] = None, per_page: Optional[int] = None, path: str = ...
):
    """
    List Priorities
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/projects', description=""" List Projects """, tags=['project_management'])
def get_projects(cursor: Optional[str] = None, per_page: Optional[int] = None):
    """
    List Projects
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/projects',
    description=""" Create Project """,
    tags=['project_management', 'file_upload_management'],
)
def post_projects(file: UploadFile):
    """
    Create Project
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/projects/{id}', description=""" Delete Project """, tags=['project_management']
)
def delete_projects_id(id: int):
    """
    Delete Project
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/projects/{id}', description=""" Show Project """, tags=['project_management']
)
def get_projects_id(id: int):
    """
    Show Project
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/projects/{id}',
    description=""" Update Project """,
    tags=['project_management', 'file_upload_management'],
)
def patch_projects_id(id: int, file: UploadFile = ...):
    """
    Update Project
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/public_keys',
    description=""" List Public Keys """,
    tags=['public_key_management', 'user_key_management', 'api_key_management'],
)
def get_public_keys(
    user_id: Optional[int] = None,
    cursor: Optional[str] = None,
    per_page: Optional[int] = None,
):
    """
    List Public Keys
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/public_keys',
    description=""" Create Public Key """,
    tags=['public_key_management'],
)
def post_public_keys(file: UploadFile):
    """
    Create Public Key
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/public_keys/{id}',
    description=""" Delete Public Key """,
    tags=['public_key_management'],
)
def delete_public_keys_id(id: int):
    """
    Delete Public Key
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/public_keys/{id}',
    description=""" Show Public Key """,
    tags=['public_key_management', 'user_key_management'],
)
def get_public_keys_id(id: int):
    """
    Show Public Key
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/public_keys/{id}',
    description=""" Update Public Key """,
    tags=['public_key_management', 'user_key_management'],
)
def patch_public_keys_id(id: int, file: UploadFile = ...):
    """
    Update Public Key
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/remote_bandwidth_snapshots',
    description=""" List Remote Bandwidth Snapshots """,
    tags=['bandwidth_management'],
)
def get_remote_bandwidth_snapshots(
    cursor: Optional[str] = None,
    per_page: Optional[int] = None,
    sort_by: Optional[SortBy] = None,
    filter: Optional[Filter] = None,
    filter_gt: Optional[FilterGt] = None,
    filter_gteq: Optional[FilterGteq] = None,
    filter_like: Optional[FilterLike] = None,
    filter_lt: Optional[FilterLt] = None,
    filter_lteq: Optional[FilterLteq] = None,
):
    """
    List Remote Bandwidth Snapshots
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/remote_servers',
    description=""" List Remote Servers """,
    tags=['remote_server_management'],
)
def get_remote_servers(cursor: Optional[str] = None, per_page: Optional[int] = None):
    """
    List Remote Servers
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/remote_servers',
    description=""" Create Remote Server """,
    tags=['remote_server_management'],
)
def post_remote_servers(file: UploadFile):
    """
    Create Remote Server
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/remote_servers/{id}',
    description=""" Delete Remote Server """,
    tags=['remote_server_management'],
)
def delete_remote_servers_id(id: int):
    """
    Delete Remote Server
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/remote_servers/{id}',
    description=""" Show Remote Server """,
    tags=['remote_server_management'],
)
def get_remote_servers_id(id: int):
    """
    Show Remote Server
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/remote_servers/{id}',
    description=""" Update Remote Server """,
    tags=[
        'remote_server_management',
        'file_upload_management',
        'file_system_management',
    ],
)
def patch_remote_servers_id(id: int, file: UploadFile = ...):
    """
    Update Remote Server
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/remote_servers/{id}/configuration_file',
    description=""" Download configuration file (required for some Remote Server integrations, such as the Files.com Agent) """,
    tags=['remote_server_management', 'site_configuration_management'],
)
def get_remote_servers_id_configuration_file(id: int):
    """
    Download configuration file (required for some Remote Server integrations, such as the Files.com Agent)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/remote_servers/{id}/configuration_file',
    description=""" Post local changes, check in, and download configuration file (used by some Remote Server integrations, such as the Files.com Agent) """,
    tags=[
        'remote_server_management',
        'file_upload_management',
        'file_system_management',
    ],
)
def post_remote_servers_id_configuration_file(id: int, file: UploadFile = ...):
    """
    Post local changes, check in, and download configuration file (used by some Remote Server integrations, such as the Files.com Agent)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/requests',
    description=""" List Requests """,
    tags=['request_management', 'user_request_management'],
)
def get_requests(
    cursor: Optional[str] = None,
    per_page: Optional[int] = None,
    sort_by: Optional[SortBy] = None,
    mine: Optional[bool] = None,
    path: Optional[str] = None,
):
    """
    List Requests
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/requests',
    description=""" Create Request """,
    tags=['file_upload_management', 'request_management'],
)
def post_requests(file: UploadFile):
    """
    Create Request
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/requests/folders/{path}',
    description=""" List Requests """,
    tags=['request_management', 'user_request_management'],
)
def get_requests_folders_path(
    cursor: Optional[str] = None,
    per_page: Optional[int] = None,
    sort_by: Optional[SortBy] = None,
    mine: Optional[bool] = None,
    path: str = ...,
):
    """
    List Requests
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/requests/{id}',
    description=""" Delete Request """,
    tags=['request_management', 'user_request_management'],
)
def delete_requests_id(id: int):
    """
    Delete Request
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/sessions',
    description=""" Delete user session (log out) """,
    tags=['session_management', 'user_management'],
)
def delete_sessions():
    """
    Delete user session (log out)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/sessions',
    description=""" Create user session (log in) """,
    tags=['session_management', 'user_management'],
)
def post_sessions(file: UploadFile):
    """
    Create user session (log in)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/settings_changes',
    description=""" List Settings Changes """,
    tags=['settings_change_management'],
)
def get_settings_changes(
    cursor: Optional[str] = None,
    per_page: Optional[int] = None,
    sort_by: Optional[SortBy] = None,
    filter: Optional[Filter] = None,
    filter_gt: Optional[FilterGt] = None,
    filter_gteq: Optional[FilterGteq] = None,
    filter_like: Optional[FilterLike] = None,
    filter_lt: Optional[FilterLt] = None,
    filter_lteq: Optional[FilterLteq] = None,
):
    """
    List Settings Changes
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/sftp_host_keys',
    description=""" List Sftp Host Keys """,
    tags=['sftp_key_management', 'sftp_host_key_management'],
)
def get_sftp_host_keys(cursor: Optional[str] = None, per_page: Optional[int] = None):
    """
    List Sftp Host Keys
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/sftp_host_keys',
    description=""" Create Sftp Host Key """,
    tags=['sftp_host_key_management', 'sftp_key_management'],
)
def post_sftp_host_keys(file: UploadFile):
    """
    Create Sftp Host Key
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/sftp_host_keys/{id}',
    description=""" Delete Sftp Host Key """,
    tags=['sftp_key_management', 'sftp_host_key_management'],
)
def delete_sftp_host_keys_id(id: int):
    """
    Delete Sftp Host Key
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/sftp_host_keys/{id}',
    description=""" Show Sftp Host Key """,
    tags=['sftp_host_key_management', 'sftp_key_management'],
)
def get_sftp_host_keys_id(id: int):
    """
    Show Sftp Host Key
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/sftp_host_keys/{id}',
    description=""" Update Sftp Host Key """,
    tags=['sftp_host_key_management', 'sftp_key_management'],
)
def patch_sftp_host_keys_id(id: int, file: UploadFile = ...):
    """
    Update Sftp Host Key
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/site',
    description=""" Show site settings """,
    tags=['site_settings_management', 'site_configuration_management'],
)
def get_site():
    """
    Show site settings
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/site',
    description=""" Update site settings. """,
    tags=['site_settings_management', 'site_configuration_management'],
)
def patch_site(file: UploadFile):
    """
    Update site settings.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/site/api_keys', description=""" List Api Keys """, tags=['api_key_management']
)
def get_site_api_keys(
    user_id: Optional[int] = None,
    cursor: Optional[str] = None,
    per_page: Optional[int] = None,
    sort_by: Optional[SortBy] = None,
    filter: Optional[Filter] = None,
    filter_gt: Optional[FilterGt] = None,
    filter_gteq: Optional[FilterGteq] = None,
    filter_like: Optional[FilterLike] = None,
    filter_lt: Optional[FilterLt] = None,
    filter_lteq: Optional[FilterLteq] = None,
):
    """
    List Api Keys
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/site/api_keys', description=""" Create Api Key """, tags=['api_key_management']
)
def post_site_api_keys(file: UploadFile):
    """
    Create Api Key
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/site/dns_records',
    description=""" Show site DNS configuration. """,
    tags=['dns_record_management', 'site_configuration_management'],
)
def get_site_dns_records(cursor: Optional[str] = None, per_page: Optional[int] = None):
    """
    Show site DNS configuration.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/site/ip_addresses',
    description=""" List IP Addresses associated with the current site """,
    tags=['ip_address_management'],
)
def get_site_ip_addresses(cursor: Optional[str] = None, per_page: Optional[int] = None):
    """
    List IP Addresses associated with the current site
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/site/test-webhook', description=""" Test webhook. """, tags=['webhook_management']
)
def post_site_test_webhook(file: UploadFile):
    """
    Test webhook.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/site/usage',
    description=""" Get the most recent usage snapshot (usage data for billing purposes) for a Site. """,
    tags=['usage_data_management'],
)
def get_site_usage():
    """
    Get the most recent usage snapshot (usage data for billing purposes) for a Site.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/sso_strategies',
    description=""" List Sso Strategies """,
    tags=['sso_strategy_management'],
)
def get_sso_strategies(cursor: Optional[str] = None, per_page: Optional[int] = None):
    """
    List Sso Strategies
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/sso_strategies/{id}',
    description=""" Show Sso Strategy """,
    tags=['sso_strategy_management'],
)
def get_sso_strategies_id(id: int):
    """
    Show Sso Strategy
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/sso_strategies/{id}/sync',
    description=""" Synchronize provisioning data with the SSO remote server. """,
    tags=['sso_strategy_management', 'remote_server_management'],
)
def post_sso_strategies_id_sync(id: int):
    """
    Synchronize provisioning data with the SSO remote server.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/styles/{path}', description=""" Delete Style """, tags=['style_management']
)
def delete_styles_path(path: str):
    """
    Delete Style
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/styles/{path}', description=""" Show Style """, tags=['style_management'])
def get_styles_path(path: str):
    """
    Show Style
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/styles/{path}', description=""" Update Style """, tags=['style_management']
)
def patch_styles_path(path: str, file: UploadFile = ...):
    """
    Update Style
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/usage_daily_snapshots',
    description=""" List Usage Daily Snapshots """,
    tags=['usage_data_management', 'history_data_management'],
)
def get_usage_daily_snapshots(
    cursor: Optional[str] = None,
    per_page: Optional[int] = None,
    sort_by: Optional[SortBy] = None,
    filter: Optional[Filter] = None,
    filter_gt: Optional[FilterGt] = None,
    filter_gteq: Optional[FilterGteq] = None,
    filter_like: Optional[FilterLike] = None,
    filter_lt: Optional[FilterLt] = None,
    filter_lteq: Optional[FilterLteq] = None,
):
    """
    List Usage Daily Snapshots
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/usage_snapshots',
    description=""" List Usage Snapshots """,
    tags=['usage_data_management', 'bandwidth_management'],
)
def get_usage_snapshots(cursor: Optional[str] = None, per_page: Optional[int] = None):
    """
    List Usage Snapshots
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/user',
    description=""" Update User """,
    tags=['user_management', 'file_upload_management'],
)
def patch_user(file: UploadFile):
    """
    Update User
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/user/api_keys', description=""" List Api Keys """, tags=['api_key_management']
)
def get_user_api_keys(
    user_id: Optional[int] = None,
    cursor: Optional[str] = None,
    per_page: Optional[int] = None,
    sort_by: Optional[SortBy] = None,
    filter: Optional[Filter] = None,
    filter_gt: Optional[FilterGt] = None,
    filter_gteq: Optional[FilterGteq] = None,
    filter_like: Optional[FilterLike] = None,
    filter_lt: Optional[FilterLt] = None,
    filter_lteq: Optional[FilterLteq] = None,
):
    """
    List Api Keys
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/user/api_keys', description=""" Create Api Key """, tags=['api_key_management']
)
def post_user_api_keys(file: UploadFile):
    """
    Create Api Key
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/user/groups',
    description=""" List Group Users """,
    tags=['group_user_management', 'group_management'],
)
def get_user_groups(
    user_id: Optional[int] = None,
    cursor: Optional[str] = None,
    per_page: Optional[int] = None,
    group_id: Optional[int] = None,
):
    """
    List Group Users
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/user/public_keys',
    description=""" List Public Keys """,
    tags=['public_key_management', 'user_key_management'],
)
def get_user_public_keys(
    user_id: Optional[int] = None,
    cursor: Optional[str] = None,
    per_page: Optional[int] = None,
):
    """
    List Public Keys
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/user/public_keys',
    description=""" Create Public Key """,
    tags=['public_key_management'],
)
def post_user_public_keys(file: UploadFile):
    """
    Create Public Key
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/user_cipher_uses',
    description=""" List User Cipher Uses """,
    tags=['user_management', 'user_key_management', 'user_permission_management'],
)
def get_user_cipher_uses(
    user_id: Optional[int] = None,
    cursor: Optional[str] = None,
    per_page: Optional[int] = None,
):
    """
    List User Cipher Uses
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/user_requests',
    description=""" List User Requests """,
    tags=['request_management', 'user_request_management'],
)
def get_user_requests(cursor: Optional[str] = None, per_page: Optional[int] = None):
    """
    List User Requests
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/user_requests',
    description=""" Create User Request """,
    tags=['user_request_management', 'file_upload_management'],
)
def post_user_requests(file: UploadFile):
    """
    Create User Request
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/user_requests/{id}',
    description=""" Delete User Request """,
    tags=['user_request_management', 'user_management'],
)
def delete_user_requests_id(id: int):
    """
    Delete User Request
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/user_requests/{id}',
    description=""" Show User Request """,
    tags=['user_request_management', 'request_management'],
)
def get_user_requests_id(id: int):
    """
    Show User Request
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users',
    description=""" List Users """,
    tags=['user_management', 'group_user_management', 'user_permission_management'],
)
def get_users(
    cursor: Optional[str] = None,
    per_page: Optional[int] = None,
    sort_by: Optional[SortBy] = None,
    filter: Optional[Filter] = None,
    filter_gt: Optional[FilterGt] = None,
    filter_gteq: Optional[FilterGteq] = None,
    filter_like: Optional[FilterLike] = None,
    filter_lt: Optional[FilterLt] = None,
    filter_lteq: Optional[FilterLteq] = None,
    ids: Optional[str] = None,
    q_username_: Optional[str] = Query(None, alias='q[username]'),
    q_email_: Optional[str] = Query(None, alias='q[email]'),
    q_notes_: Optional[str] = Query(None, alias='q[notes]'),
    q_admin_: Optional[str] = Query(None, alias='q[admin]'),
    q_allowed_ips_: Optional[str] = Query(None, alias='q[allowed_ips]'),
    q_password_validity_days_: Optional[str] = Query(
        None, alias='q[password_validity_days]'
    ),
    q_ssl_required_: Optional[str] = Query(None, alias='q[ssl_required]'),
    search: Optional[str] = None,
):
    """
    List Users
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/users',
    description=""" Create User """,
    tags=['user_management', 'group_user_management'],
)
def post_users(file: UploadFile):
    """
    Create User
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/users/{id}',
    description=""" Delete User """,
    tags=['user_management', 'group_user_management'],
)
def delete_users_id(id: int):
    """
    Delete User
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/users/{id}', description=""" Show User """, tags=['user_management'])
def get_users_id(id: int):
    """
    Show User
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/users/{id}',
    description=""" Update User """,
    tags=['user_management', 'group_user_management'],
)
def patch_users_id(id: int, file: UploadFile = ...):
    """
    Update User
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/users/{id}/2fa/reset',
    description=""" Trigger 2FA Reset process for user who has lost access to their existing 2FA methods. """,
    tags=['user_management', 'user_request_management'],
)
def post_users_id2fa_reset(id: int):
    """
    Trigger 2FA Reset process for user who has lost access to their existing 2FA methods.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/users/{id}/resend_welcome_email',
    description=""" Resend user welcome email """,
    tags=['notification_management', 'user_management'],
)
def post_users_id_resend_welcome_email(id: int):
    """
    Resend user welcome email
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/users/{id}/unlock',
    description=""" Unlock user who has been locked out due to failed logins. """,
    tags=['user_management', 'session_management', 'lock_management'],
)
def post_users_id_unlock(id: int):
    """
    Unlock user who has been locked out due to failed logins.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/{user_id}/api_keys',
    description=""" List Api Keys """,
    tags=['api_key_management', 'user_key_management'],
)
def get_users_user_id_api_keys(
    user_id: int,
    cursor: Optional[str] = None,
    per_page: Optional[int] = None,
    sort_by: Optional[SortBy] = None,
    filter: Optional[Filter] = None,
    filter_gt: Optional[FilterGt] = None,
    filter_gteq: Optional[FilterGteq] = None,
    filter_like: Optional[FilterLike] = None,
    filter_lt: Optional[FilterLt] = None,
    filter_lteq: Optional[FilterLteq] = None,
):
    """
    List Api Keys
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/users/{user_id}/api_keys',
    description=""" Create Api Key """,
    tags=['api_key_management'],
)
def post_users_user_id_api_keys(user_id: int, file: UploadFile = ...):
    """
    Create Api Key
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/{user_id}/cipher_uses',
    description=""" List User Cipher Uses """,
    tags=['user_management', 'user_permission_management', 'usage_data_management'],
)
def get_users_user_id_cipher_uses(
    user_id: int, cursor: Optional[str] = None, per_page: Optional[int] = None
):
    """
    List User Cipher Uses
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/{user_id}/groups',
    description=""" List Group Users """,
    tags=['group_user_management', 'group_management'],
)
def get_users_user_id_groups(
    user_id: int,
    cursor: Optional[str] = None,
    per_page: Optional[int] = None,
    group_id: Optional[int] = None,
):
    """
    List Group Users
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/{user_id}/permissions',
    description=""" List Permissions """,
    tags=['group_permission_management', 'user_permission_management'],
)
def get_users_user_id_permissions(
    cursor: Optional[str] = None,
    per_page: Optional[int] = None,
    sort_by: Optional[SortBy] = None,
    filter: Optional[Filter] = None,
    filter_gt: Optional[FilterGt] = None,
    filter_gteq: Optional[FilterGteq] = None,
    filter_like: Optional[FilterLike] = None,
    filter_lt: Optional[FilterLt] = None,
    filter_lteq: Optional[FilterLteq] = None,
    path: Optional[str] = None,
    group_id: Optional[str] = None,
    user_id: str = ...,
    include_groups: Optional[bool] = None,
):
    """
    List Permissions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/{user_id}/public_keys',
    description=""" List Public Keys """,
    tags=['public_key_management', 'user_key_management'],
)
def get_users_user_id_public_keys(
    user_id: int, cursor: Optional[str] = None, per_page: Optional[int] = None
):
    """
    List Public Keys
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/users/{user_id}/public_keys',
    description=""" Create Public Key """,
    tags=['public_key_management', 'user_key_management'],
)
def post_users_user_id_public_keys(user_id: int, file: UploadFile = ...):
    """
    Create Public Key
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/webhook_tests',
    description=""" Create Webhook Test """,
    tags=['webhook_management'],
)
def post_webhook_tests(file: UploadFile):
    """
    Create Webhook Test
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
